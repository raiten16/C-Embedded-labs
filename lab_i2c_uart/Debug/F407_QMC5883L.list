
F407_QMC5883L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008628  08008628  00018628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a2c  08008a2c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a34  08008a34  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000041f0  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200043c8  200043c8  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fad7  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027cd  00000000  00000000  0002fd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e90  00000000  00000000  000324f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b46  00000000  00000000  00033380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236b4  00000000  00000000  00033ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012916  00000000  00000000  0005757a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf86c  00000000  00000000  00069e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004dd4  00000000  00000000  001396fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008610 	.word	0x08008610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008610 	.word	0x08008610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <QMC_init>:
#include"QMC5883.h"


//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	601a      	str	r2, [r3, #0]
	array[0]=0x01;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	753b      	strb	r3, [r7, #20]
	array[1]=0x01;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	757b      	strb	r3, [r7, #21]

	qmc->offsets[0] = 0;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
	qmc->offsets[1] = 0;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
	qmc->offsets[2] = 0;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28

	qmc->scales[0] = 1;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	qmc->scales[1] = 1;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
	qmc->scales[2] = 1;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34

	if(Output_Data_Rate==200)array[1]|=0b00001100;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2bc8      	cmp	r3, #200	; 0xc8
 8000f94:	d105      	bne.n	8000fa2 <QMC_init+0x5e>
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	f043 030c 	orr.w	r3, r3, #12
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	757b      	strb	r3, [r7, #21]
 8000fa0:	e01c      	b.n	8000fdc <QMC_init+0x98>
	else if(Output_Data_Rate==100)array[1]|=0b00001000;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b64      	cmp	r3, #100	; 0x64
 8000fa6:	d105      	bne.n	8000fb4 <QMC_init+0x70>
 8000fa8:	7d7b      	ldrb	r3, [r7, #21]
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	757b      	strb	r3, [r7, #21]
 8000fb2:	e013      	b.n	8000fdc <QMC_init+0x98>
	else if(Output_Data_Rate==50)array[1]|=0b00000100;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b32      	cmp	r3, #50	; 0x32
 8000fb8:	d105      	bne.n	8000fc6 <QMC_init+0x82>
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	757b      	strb	r3, [r7, #21]
 8000fc4:	e00a      	b.n	8000fdc <QMC_init+0x98>
	else if(Output_Data_Rate==10)array[1]|=0b00000000;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d102      	bne.n	8000fd2 <QMC_init+0x8e>
 8000fcc:	7d7b      	ldrb	r3, [r7, #21]
 8000fce:	757b      	strb	r3, [r7, #21]
 8000fd0:	e004      	b.n	8000fdc <QMC_init+0x98>
	else array[1]|=0b00001100;
 8000fd2:	7d7b      	ldrb	r3, [r7, #21]
 8000fd4:	f043 030c 	orr.w	r3, r3, #12
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	757b      	strb	r3, [r7, #21]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, HAL_MAX_DELAY)!=HAL_OK)return 1;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	220b      	movs	r2, #11
 8000ff4:	211a      	movs	r1, #26
 8000ff6:	f001 f9f7 	bl	80023e8 <HAL_I2C_Mem_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <QMC_init+0xc0>
 8001000:	2301      	movs	r3, #1
 8001002:	e015      	b.n	8001030 <QMC_init+0xec>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, HAL_MAX_DELAY)!=HAL_OK)return 2;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	3301      	adds	r3, #1
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	2209      	movs	r2, #9
 800101e:	211a      	movs	r1, #26
 8001020:	f001 f9e2 	bl	80023e8 <HAL_I2C_Mem_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <QMC_init+0xea>
 800102a:	2302      	movs	r3, #2
 800102c:	e000      	b.n	8001030 <QMC_init+0xec>

	return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <QMC_apply_calibration>:
	uint8_t command= 0x80;
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0A, 1, &command, 1, HAL_MAX_DELAY)!=HAL_OK)return 1;
	return 0;
}

static void QMC_apply_calibration(QMC_t *qmc){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	qmc->X = (qmc->rawX - qmc->offsets[0]) * qmc->scales[0];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edd3 7a08 	vldr	s15, [r3, #32]
 8001054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	edc3 7a03 	vstr	s15, [r3, #12]
	qmc->Y = (qmc->rawY - qmc->offsets[1]) * qmc->scales[1];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800107c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edc3 7a04 	vstr	s15, [r3, #16]
	qmc->Z = (qmc->rawZ - qmc->offsets[2]) * qmc->scales[2];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80010ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	711a      	strb	r2, [r3, #4]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, HAL_MAX_DELAY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	f04f 32ff 	mov.w	r2, #4294967295
 80010de:	9202      	str	r2, [sp, #8]
 80010e0:	2201      	movs	r2, #1
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2206      	movs	r2, #6
 80010ea:	211a      	movs	r1, #26
 80010ec:	f001 fa76 	bl	80025dc <HAL_I2C_Mem_Read>

	  if(!(qmc->datas[0] & 1))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <QMC_read+0x3c>
		  return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e033      	b.n	8001168 <QMC_read+0xa4>

	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, HAL_MAX_DELAY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	9202      	str	r2, [sp, #8]
 800110e:	2206      	movs	r2, #6
 8001110:	9201      	str	r2, [sp, #4]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2200      	movs	r2, #0
 8001118:	211a      	movs	r1, #26
 800111a:	f001 fa5f 	bl	80025dc <HAL_I2C_Mem_Read>
	  qmc->rawX= (int16_t)((qmc->datas[1]<<8) | qmc->datas[0]);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	795b      	ldrb	r3, [r3, #5]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	831a      	strh	r2, [r3, #24]
	  qmc->rawY= (int16_t)((qmc->datas[3]<<8) | qmc->datas[2]);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	79db      	ldrb	r3, [r3, #7]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	799b      	ldrb	r3, [r3, #6]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21a      	sxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	835a      	strh	r2, [r3, #26]
	  qmc->rawZ= (int16_t)((qmc->datas[5]<<8) | qmc->datas[4]);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7a5b      	ldrb	r3, [r3, #9]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7a1b      	ldrb	r3, [r3, #8]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	839a      	strh	r2, [r3, #28]

	  QMC_apply_calibration(qmc);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff69 	bl	8001038 <QMC_apply_calibration>

	  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <QMC_Calibrate>:

void QMC_Calibrate(QMC_t *qmc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	int16_t	calibration_data[3][2] = {{32767,-32768},{32767,-32768},{32767,-32768}};
 8001178:	4a76      	ldr	r2, [pc, #472]	; (8001354 <QMC_Calibrate+0x1e4>)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001180:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint32_t start_time = (uint32_t)xTaskGetTickCount();
 8001184:	f003 fbca 	bl	800491c <xTaskGetTickCount>
 8001188:	6278      	str	r0, [r7, #36]	; 0x24
	while((uint32_t)xTaskGetTickCount() - start_time < 30000){
 800118a:	e04a      	b.n	8001222 <QMC_Calibrate+0xb2>
		if(QMC_read(qmc) == 0){
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff99 	bl	80010c4 <QMC_read>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d141      	bne.n	800121c <QMC_Calibrate+0xac>
			if(qmc->rawX < calibration_data[0][0]) calibration_data[0][0] = qmc->rawX;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800119e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	da03      	bge.n	80011ae <QMC_Calibrate+0x3e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011ac:	813b      	strh	r3, [r7, #8]
			if(qmc->rawX > calibration_data[0][1]) calibration_data[0][1] = qmc->rawX;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80011b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dd03      	ble.n	80011c4 <QMC_Calibrate+0x54>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011c2:	817b      	strh	r3, [r7, #10]

			if(qmc->rawY < calibration_data[1][0]) calibration_data[1][0] = qmc->rawY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80011ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	da03      	bge.n	80011da <QMC_Calibrate+0x6a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011d8:	81bb      	strh	r3, [r7, #12]
			if(qmc->rawY > calibration_data[1][1]) calibration_data[1][1] = qmc->rawY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80011e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dd03      	ble.n	80011f0 <QMC_Calibrate+0x80>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011ee:	81fb      	strh	r3, [r7, #14]

			if(qmc->rawZ < calibration_data[2][0]) calibration_data[2][0] = qmc->rawZ;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80011f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da03      	bge.n	8001206 <QMC_Calibrate+0x96>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001204:	823b      	strh	r3, [r7, #16]
			if(qmc->rawZ > calibration_data[2][1]) calibration_data[2][1] = qmc->rawZ;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800120c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001210:	429a      	cmp	r2, r3
 8001212:	dd03      	ble.n	800121c <QMC_Calibrate+0xac>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800121a:	827b      	strh	r3, [r7, #18]
		}
		osDelay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f002 ffe4 	bl	80041ea <osDelay>
	while((uint32_t)xTaskGetTickCount() - start_time < 30000){
 8001222:	f003 fb7b 	bl	800491c <xTaskGetTickCount>
 8001226:	4602      	mov	r2, r0
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001230:	4293      	cmp	r3, r2
 8001232:	d9ab      	bls.n	800118c <QMC_Calibrate+0x1c>
	}

	qmc->offsets[0] = (float)(calibration_data[0][0] + calibration_data[0][1]) / 2.0;
 8001234:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001238:	461a      	mov	r2, r3
 800123a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800123e:	4413      	add	r3, r2
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800124c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edc3 7a08 	vstr	s15, [r3, #32]
	qmc->offsets[1] = (float)(calibration_data[1][0] + calibration_data[1][1]) / 2.0;
 8001256:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800125a:	461a      	mov	r2, r3
 800125c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001260:	4413      	add	r3, r2
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	qmc->offsets[2] = (float)(calibration_data[2][0] + calibration_data[2][1]) / 2.0;
 8001278:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800127c:	461a      	mov	r2, r3
 800127e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001282:	4413      	add	r3, r2
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	float x_avg_delta = (calibration_data[0][1] - calibration_data[0][0])/2;
 800129a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129e:	461a      	mov	r2, r3
 80012a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	0fda      	lsrs	r2, r3, #31
 80012a8:	4413      	add	r3, r2
 80012aa:	105b      	asrs	r3, r3, #1
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	edc7 7a08 	vstr	s15, [r7, #32]
	float y_avg_delta = (calibration_data[1][1] - calibration_data[1][0])/2;
 80012b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012bc:	461a      	mov	r2, r3
 80012be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	0fda      	lsrs	r2, r3, #31
 80012c6:	4413      	add	r3, r2
 80012c8:	105b      	asrs	r3, r3, #1
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	edc7 7a07 	vstr	s15, [r7, #28]
	float z_avg_delta = (calibration_data[2][1] - calibration_data[2][0])/2;
 80012d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012da:	461a      	mov	r2, r3
 80012dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	0fda      	lsrs	r2, r3, #31
 80012e4:	4413      	add	r3, r2
 80012e6:	105b      	asrs	r3, r3, #1
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	edc7 7a06 	vstr	s15, [r7, #24]

	float avg_delta = (x_avg_delta + y_avg_delta + z_avg_delta) / 3;
 80012f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80012f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	edd7 7a06 	vldr	s15, [r7, #24]
 8001304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001308:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	edc7 7a05 	vstr	s15, [r7, #20]

	qmc->scales[0] = (float)(avg_delta / x_avg_delta);
 8001314:	edd7 6a05 	vldr	s13, [r7, #20]
 8001318:	ed97 7a08 	vldr	s14, [r7, #32]
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	qmc->scales[1] = (float)(avg_delta / y_avg_delta);
 8001326:	edd7 6a05 	vldr	s13, [r7, #20]
 800132a:	ed97 7a07 	vldr	s14, [r7, #28]
 800132e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	qmc->scales[2] = (float)(avg_delta / z_avg_delta);
 8001338:	edd7 6a05 	vldr	s13, [r7, #20]
 800133c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	08008628 	.word	0x08008628

08001358 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <vApplicationGetIdleTaskMemory+0x2c>)
 8001368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <vApplicationGetIdleTaskMemory+0x30>)
 800136e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200001f4 	.word	0x200001f4
 8001388:	20000248 	.word	0x20000248

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f000 fbbf 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f81f 	bl	80013d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f000 f8df 	bl	800155c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800139e:	f000 f8b3 	bl	8001508 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80013a2:	f000 f883 	bl	80014ac <MX_I2C2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <main+0x44>)
 80013a8:	1d3c      	adds	r4, r7, #4
 80013aa:	461d      	mov	r5, r3
 80013ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fec8 	bl	8004152 <osThreadCreate>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <main+0x48>)
 80013c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013c8:	f002 febc 	bl	8004144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x40>
 80013ce:	bf00      	nop
 80013d0:	08008640 	.word	0x08008640
 80013d4:	200004e0 	.word	0x200004e0

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	; 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fe9b 	bl	8006122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <SystemClock_Config+0xcc>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <SystemClock_Config+0xcc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <SystemClock_Config+0xd0>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800144c:	23a8      	movs	r3, #168	; 0xa8
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fe3f 	bl	80030e0 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001468:	f000 f96e 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001478:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2105      	movs	r1, #5
 800148a:	4618      	mov	r0, r3
 800148c:	f002 f8a0 	bl	80035d0 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001496:	f000 f957 	bl	8001748 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	; 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C2_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <MX_I2C2_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C2_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_I2C2_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C2_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C2_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_I2C2_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_I2C2_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_I2C2_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_I2C2_Init+0x50>)
 80014ea:	f000 fe39 	bl	8002160 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 f928 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000448 	.word	0x20000448
 8001500:	40005800 	.word	0x40005800
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART1_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001540:	f002 fa26 	bl	8003990 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f8fd 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000049c 	.word	0x2000049c
 8001558:	40011000 	.word	0x40011000

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_GPIO_Init+0xb0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <MX_GPIO_Init+0xb0>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_GPIO_Init+0xb0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_GPIO_Init+0xb0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <MX_GPIO_Init+0xb0>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_GPIO_Init+0xb0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_GPIO_Init+0xb0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <MX_GPIO_Init+0xb0>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_GPIO_Init+0xb0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D2_Pin|D3_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	21c0      	movs	r1, #192	; 0xc0
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_GPIO_Init+0xb4>)
 80015cc:	f000 fdae 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K0_Pin;
 80015d0:	2318      	movs	r3, #24
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_GPIO_Init+0xb8>)
 80015e4:	f000 fbee 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin;
 80015e8:	23c0      	movs	r3, #192	; 0xc0
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_GPIO_Init+0xb4>)
 8001600:	f000 fbe0 	bl	8001dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40021000 	.word	0x40021000

08001618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	char message[24];

	uint8_t init = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	77fb      	strb	r3, [r7, #31]
	init = QMC_init(&module, &hi2c2, 200);
 8001624:	22c8      	movs	r2, #200	; 0xc8
 8001626:	493e      	ldr	r1, [pc, #248]	; (8001720 <StartDefaultTask+0x108>)
 8001628:	483e      	ldr	r0, [pc, #248]	; (8001724 <StartDefaultTask+0x10c>)
 800162a:	f7ff fc8b 	bl	8000f44 <QMC_init>
 800162e:	4603      	mov	r3, r0
 8001630:	77fb      	strb	r3, [r7, #31]
	char message[20];

	for(;;)
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0){
 8001632:	2108      	movs	r1, #8
 8001634:	483c      	ldr	r0, [pc, #240]	; (8001728 <StartDefaultTask+0x110>)
 8001636:	f000 fd61 	bl	80020fc <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d108      	bne.n	8001652 <StartDefaultTask+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	4839      	ldr	r0, [pc, #228]	; (800172c <StartDefaultTask+0x114>)
 8001646:	f000 fd71 	bl	800212c <HAL_GPIO_WritePin>
			QMC_Calibrate(&module);
 800164a:	4836      	ldr	r0, [pc, #216]	; (8001724 <StartDefaultTask+0x10c>)
 800164c:	f7ff fd90 	bl	8001170 <QMC_Calibrate>
 8001650:	e05b      	b.n	800170a <StartDefaultTask+0xf2>
		}else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	4835      	ldr	r0, [pc, #212]	; (800172c <StartDefaultTask+0x114>)
 8001658:	f000 fd68 	bl	800212c <HAL_GPIO_WritePin>
			QMC_read(&module);
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <StartDefaultTask+0x10c>)
 800165e:	f7ff fd31 	bl	80010c4 <QMC_read>
			azimuth = atan2f(module.X,module.Y)*180.00/M_PI;
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <StartDefaultTask+0x10c>)
 8001664:	edd3 7a03 	vldr	s15, [r3, #12]
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <StartDefaultTask+0x10c>)
 800166a:	ed93 7a04 	vldr	s14, [r3, #16]
 800166e:	eef0 0a47 	vmov.f32	s1, s14
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	f006 fe4d 	bl	8008314 <atan2f>
 800167a:	ee10 3a10 	vmov	r3, s0
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <StartDefaultTask+0x118>)
 800168a:	f7fe ffb5 	bl	80005f8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	a320      	add	r3, pc, #128	; (adr r3, 8001718 <StartDefaultTask+0x100>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff f8d6 	bl	800084c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa7e 	bl	8000ba8 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <StartDefaultTask+0x11c>)
 80016b0:	6013      	str	r3, [r2, #0]
			azimuth += (azimuth < 0) ? 360 : 0;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <StartDefaultTask+0x11c>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	d502      	bpl.n	80016c8 <StartDefaultTask+0xb0>
 80016c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001738 <StartDefaultTask+0x120>
 80016c6:	e001      	b.n	80016cc <StartDefaultTask+0xb4>
 80016c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800173c <StartDefaultTask+0x124>
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <StartDefaultTask+0x11c>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <StartDefaultTask+0x11c>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
			uint8_t size = sprintf(message,"%.2f\n",azimuth);
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <StartDefaultTask+0x11c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	f107 0008 	add.w	r0, r7, #8
 80016ee:	4914      	ldr	r1, [pc, #80]	; (8001740 <StartDefaultTask+0x128>)
 80016f0:	f004 fcb4 	bl	800605c <siprintf>
 80016f4:	4603      	mov	r3, r0
 80016f6:	77bb      	strb	r3, [r7, #30]
			HAL_UART_Transmit(&huart1, message, size, HAL_MAX_DELAY);
 80016f8:	7fbb      	ldrb	r3, [r7, #30]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f107 0108 	add.w	r1, r7, #8
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <StartDefaultTask+0x12c>)
 8001706:	f002 f990 	bl	8003a2a <HAL_UART_Transmit>
		}
		osDelay(50);
 800170a:	2032      	movs	r0, #50	; 0x32
 800170c:	f002 fd6d 	bl	80041ea <osDelay>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0){
 8001710:	e78f      	b.n	8001632 <StartDefaultTask+0x1a>
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	54442d18 	.word	0x54442d18
 800171c:	400921fb 	.word	0x400921fb
 8001720:	20000448 	.word	0x20000448
 8001724:	200004e4 	.word	0x200004e4
 8001728:	40021000 	.word	0x40021000
 800172c:	40020000 	.word	0x40020000
 8001730:	40668000 	.word	0x40668000
 8001734:	2000051c 	.word	0x2000051c
 8001738:	43b40000 	.word	0x43b40000
 800173c:	00000000 	.word	0x00000000
 8001740:	0800865c 	.word	0x0800865c
 8001744:	2000049c 	.word	0x2000049c

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_MspInit+0x54>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_MspInit+0x54>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_MspInit+0x54>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_MspInit+0x54>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_MspInit+0x54>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_MspInit+0x54>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	210f      	movs	r1, #15
 8001796:	f06f 0001 	mvn.w	r0, #1
 800179a:	f000 faea 	bl	8001d72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_I2C_MspInit+0x84>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12c      	bne.n	8001828 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <HAL_I2C_MspInit+0x8c>)
 8001808:	f000 fadc 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0x88>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_I2C_MspInit+0x88>)
 8001816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_I2C_MspInit+0x88>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005800 	.word	0x40005800
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_UART_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12c      	bne.n	80018b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_UART_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_MspInit+0x8c>)
 80018b4:	f000 fa86 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 f95c 	bl	8001bb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001900:	f003 fa06 	bl	8004d10 <xTaskGetSchedulerState>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d001      	beq.n	800190e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800190a:	f003 fc45 	bl	8005198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}

08001912 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
	return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_kill>:

int _kill(int pid, int sig)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192c:	f004 fc4c 	bl	80061c8 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	2216      	movs	r2, #22
 8001934:	601a      	str	r2, [r3, #0]
	return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_exit>:

void _exit (int status)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800194a:	f04f 31ff 	mov.w	r1, #4294967295
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffe7 	bl	8001922 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001954:	e7fe      	b.n	8001954 <_exit+0x12>

08001956 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e00a      	b.n	800197e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001968:	f3af 8000 	nop.w
 800196c:	4601      	mov	r1, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbf0      	blt.n	8001968 <_read+0x12>
	}

return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e009      	b.n	80019b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	60ba      	str	r2, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbf1      	blt.n	80019a2 <_write+0x12>
	}
	return len;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_close>:

int _close(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f0:	605a      	str	r2, [r3, #4]
	return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_isatty>:

int _isatty(int file)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
	return 0;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f004 fbb2 	bl	80061c8 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20020000 	.word	0x20020000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	20000520 	.word	0x20000520
 8001a98:	200043c8 	.word	0x200043c8

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001adc:	4c0b      	ldr	r4, [pc, #44]	; (8001b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd7 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f004 fb71 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fc4b 	bl	800138c <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b04:	08008a3c 	.word	0x08008a3c
  ldr r2, =_sbss
 8001b08:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b0c:	200043c8 	.word	0x200043c8

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f90d 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fe04 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f917 	bl	8001daa <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f8ed 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000524 	.word	0x20000524

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000524 	.word	0x20000524

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff47 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff5c 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffb0 	bl	8001d18 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e16b      	b.n	80020b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 815a 	bne.w	80020b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d005      	beq.n	8001e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d130      	bne.n	8001e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0201 	and.w	r2, r3, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d017      	beq.n	8001eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80b4 	beq.w	80020b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a5f      	ldr	r2, [pc, #380]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a5b      	ldr	r2, [pc, #364]	; (80020d4 <HAL_GPIO_Init+0x310>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <HAL_GPIO_Init+0x314>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_GPIO_Init+0x318>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a50      	ldr	r2, [pc, #320]	; (80020e0 <HAL_GPIO_Init+0x31c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x21a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x216>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x20a>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00e      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e00c      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00a      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	; (80020d4 <HAL_GPIO_Init+0x310>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_GPIO_Init+0x334>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202e:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002034:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_GPIO_Init+0x334>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_GPIO_Init+0x334>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_GPIO_Init+0x334>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f ae90 	bls.w	8001de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40021c00 	.word	0x40021c00
 80020f8:	40013c00 	.word	0x40013c00

080020fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12b      	b.n	80023ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fb10 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c4:	f001 fbbc 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a81      	ldr	r2, [pc, #516]	; (80023d4 <HAL_I2C_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d807      	bhi.n	80021e4 <HAL_I2C_Init+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_I2C_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x92>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a7d      	ldr	r2, [pc, #500]	; (80023dc <HAL_I2C_Init+0x27c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e7      	b.n	80023ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a78      	ldr	r2, [pc, #480]	; (80023e0 <HAL_I2C_Init+0x280>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_I2C_Init+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d802      	bhi.n	8002234 <HAL_I2C_Init+0xd4>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	e009      	b.n	8002248 <HAL_I2C_Init+0xe8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a69      	ldr	r2, [pc, #420]	; (80023e4 <HAL_I2C_Init+0x284>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	495c      	ldr	r1, [pc, #368]	; (80023d4 <HAL_I2C_Init+0x274>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d819      	bhi.n	800229c <HAL_I2C_Init+0x13c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e59      	subs	r1, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb1 f3f3 	udiv	r3, r1, r3
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800227c:	400b      	ands	r3, r1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_I2C_Init+0x138>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	e051      	b.n	800233c <HAL_I2C_Init+0x1dc>
 8002298:	2304      	movs	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x168>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x18e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x196>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1dc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	817b      	strh	r3, [r7, #10]
 80023fa:	460b      	mov	r3, r1
 80023fc:	813b      	strh	r3, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002402:	f7ff fbed 	bl	8001be0 <HAL_GetTick>
 8002406:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b20      	cmp	r3, #32
 8002412:	f040 80d9 	bne.w	80025c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2319      	movs	r3, #25
 800241c:	2201      	movs	r2, #1
 800241e:	496d      	ldr	r1, [pc, #436]	; (80025d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fc7f 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	e0cc      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_I2C_Mem_Write+0x56>
 800243a:	2302      	movs	r3, #2
 800243c:	e0c5      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d007      	beq.n	8002464 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	; 0x21
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_I2C_Mem_Write+0x1f0>)
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a6:	88f8      	ldrh	r0, [r7, #6]
 80024a8:	893a      	ldrh	r2, [r7, #8]
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4603      	mov	r3, r0
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fab6 	bl	8002a28 <I2C_RequestMemoryWrite>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d052      	beq.n	8002568 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e081      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fd00 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d107      	bne.n	80024ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06b      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b04      	cmp	r3, #4
 800252e:	d11b      	bne.n	8002568 <HAL_I2C_Mem_Write+0x180>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d017      	beq.n	8002568 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1aa      	bne.n	80024c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fcec 	bl	8002f52 <I2C_WaitOnBTFFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e016      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	00100002 	.word	0x00100002
 80025d8:	ffff0000 	.word	0xffff0000

080025dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f6:	f7ff faf3 	bl	8001be0 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b20      	cmp	r3, #32
 8002606:	f040 8208 	bne.w	8002a1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2319      	movs	r3, #25
 8002610:	2201      	movs	r2, #1
 8002612:	497b      	ldr	r1, [pc, #492]	; (8002800 <HAL_I2C_Mem_Read+0x224>)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fb85 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	e1fb      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Mem_Read+0x56>
 800262e:	2302      	movs	r3, #2
 8002630:	e1f4      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d007      	beq.n	8002658 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2222      	movs	r2, #34	; 0x22
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <HAL_I2C_Mem_Read+0x228>)
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800269a:	88f8      	ldrh	r0, [r7, #6]
 800269c:	893a      	ldrh	r2, [r7, #8]
 800269e:	8979      	ldrh	r1, [r7, #10]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4603      	mov	r3, r0
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa52 	bl	8002b54 <I2C_RequestMemoryRead>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1b0      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e184      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d11b      	bne.n	800272a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e164      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	2b02      	cmp	r3, #2
 8002730:	d11b      	bne.n	800276a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002740:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	e144      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002780:	e138      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b03      	cmp	r3, #3
 8002788:	f200 80f1 	bhi.w	800296e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b01      	cmp	r3, #1
 8002792:	d123      	bne.n	80027dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fc1b 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e139      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027da:	e10b      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d14e      	bne.n	8002882 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	2200      	movs	r2, #0
 80027ec:	4906      	ldr	r1, [pc, #24]	; (8002808 <HAL_I2C_Mem_Read+0x22c>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fa98 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e10e      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
 80027fe:	bf00      	nop
 8002800:	00100002 	.word	0x00100002
 8002804:	ffff0000 	.word	0xffff0000
 8002808:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002880:	e0b8      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2200      	movs	r2, #0
 800288a:	4966      	ldr	r1, [pc, #408]	; (8002a24 <HAL_I2C_Mem_Read+0x448>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa49 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0bf      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	2200      	movs	r2, #0
 80028e6:	494f      	ldr	r1, [pc, #316]	; (8002a24 <HAL_I2C_Mem_Read+0x448>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa1b 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e091      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800296c:	e042      	b.n	80029f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fb2e 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e04c      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d118      	bne.n	80029f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f aec2 	bne.w	8002782 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00010004 	.word	0x00010004

08002a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f960 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d103      	bne.n	8002a82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e05f      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <I2C_RequestMemoryWrite+0x128>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f998 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04c      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa02 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02b      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e021      	b.n	8002b44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9dc 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e005      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8c2 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d103      	bne.n	8002bbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0aa      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	4952      	ldr	r1, [pc, #328]	; (8002d20 <I2C_RequestMemoryRead+0x1cc>)
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f8fa 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e097      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	6a39      	ldr	r1, [r7, #32]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f964 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d107      	bne.n	8002c26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e076      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c30:	893b      	ldrh	r3, [r7, #8]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	e021      	b.n	8002c80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f93e 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d107      	bne.n	8002c72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e050      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	6a39      	ldr	r1, [r7, #32]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f923 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d107      	bne.n	8002ca8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e035      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f82b 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d103      	bne.n	8002cec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e013      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	6a3a      	ldr	r2, [r7, #32]
 8002d04:	4906      	ldr	r1, [pc, #24]	; (8002d20 <I2C_RequestMemoryRead+0x1cc>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f863 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	00010002 	.word	0x00010002

08002d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	e025      	b.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d021      	beq.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe ff4f 	bl	8001be0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e023      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10d      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	e00c      	b.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d0b6      	beq.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de0:	e051      	b.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df0:	d123      	bne.n	8002e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e046      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d021      	beq.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fecd 	bl	8001be0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e020      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10c      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e00b      	b.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d18d      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	e02d      	b.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8ce 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02d      	b.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d021      	beq.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fe73 	bl	8001be0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e007      	b.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d1ca      	bne.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f5e:	e02d      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f88d 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e02d      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d021      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7fe fe32 	bl	8001be0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d1ca      	bne.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe0:	e042      	b.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d119      	bne.n	8003024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0210 	mvn.w	r2, #16
 8002ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e029      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe fddc 	bl	8001be0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d1b5      	bne.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d11b      	bne.n	80030d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e267      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b82      	ldr	r3, [pc, #520]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e242      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6f      	ldr	r2, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6c      	ldr	r2, [pc, #432]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b69      	ldr	r3, [pc, #420]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fd22 	bl	8001be0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fd1e 	bl	8001be0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e207      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd0e 	bl	8001be0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd0a 	bl	8001be0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f3      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c7      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe fcc3 	bl	8001be0 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fe fcbf 	bl	8001be0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a8      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fca2 	bl	8001be0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fe fc9e 	bl	8001be0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e187      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fc82 	bl	8001be0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fe fc7e 	bl	8001be0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e167      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fe fc6b 	bl	8001be0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fe fc67 	bl	8001be0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e150      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a7c      	ldr	r2, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b77      	ldr	r3, [pc, #476]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b74      	ldr	r3, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a73      	ldr	r2, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fe fc27 	bl	8001be0 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe fc23 	bl	8001be0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e10c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ea>
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x30c>
 80033d2:	4b5f      	ldr	r3, [pc, #380]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ec:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe fbe8 	bl	8001be0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe fbe4 	bl	8001be0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0cb      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x334>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe fbd2 	bl	8001be0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe fbce 	bl	8001be0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b5      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a1 	beq.w	80035c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d05c      	beq.n	8003544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d141      	bne.n	8003516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fba2 	bl	8001be0 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fb9e 	bl	8001be0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e087      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	491b      	ldr	r1, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fb77 	bl	8001be0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe fb73 	bl	8001be0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e05c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x416>
 8003514:	e054      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fb60 	bl	8001be0 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fb5c 	bl	8001be0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e045      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x444>
 8003542:	e03d      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e038      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d028      	beq.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d121      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fa8e 	bl	8001be0 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fa8a 	bl	8001be0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe f9ee 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	0800866c 	.word	0x0800866c
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b090      	sub	sp, #64	; 0x40
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	2300      	movs	r3, #0
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80a1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037d4:	e09b      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e098      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	627a      	str	r2, [r7, #36]	; 0x24
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003804:	2100      	movs	r1, #0
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003808:	fb03 f201 	mul.w	r2, r3, r1
 800380c:	2300      	movs	r3, #0
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	4413      	add	r3, r2
 8003814:	4a43      	ldr	r2, [pc, #268]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003816:	fba0 1202 	umull	r1, r2, r0, r2
 800381a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800381c:	460a      	mov	r2, r1
 800381e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003822:	4413      	add	r3, r2
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003836:	f7fd fa07 	bl	8000c48 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4613      	mov	r3, r2
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003842:	e053      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	2200      	movs	r2, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	617a      	str	r2, [r7, #20]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	4652      	mov	r2, sl
 800385c:	465b      	mov	r3, fp
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	ebb2 080a 	subs.w	r8, r2, sl
 8003876:	eb63 090b 	sbc.w	r9, r3, fp
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800388a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388e:	ebb2 0408 	subs.w	r4, r2, r8
 8003892:	eb63 0509 	sbc.w	r5, r3, r9
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	00eb      	lsls	r3, r5, #3
 80038a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a4:	00e2      	lsls	r2, r4, #3
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	eb14 030a 	adds.w	r3, r4, sl
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	eb45 030b 	adc.w	r3, r5, fp
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	2200      	movs	r2, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e0:	f7fd f9b2 	bl	8000c48 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 800390a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003910:	4618      	mov	r0, r3
 8003912:	3740      	adds	r7, #64	; 0x40
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	017d7840 	.word	0x017d7840

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0800867c 	.word	0x0800867c

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800867c 	.word	0x0800867c

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03f      	b.n	8003a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd ff40 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f929 	bl	8003c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08a      	sub	sp, #40	; 0x28
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d17c      	bne.n	8003b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Transmit+0x2c>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e075      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x3e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e06e      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2221      	movs	r2, #33	; 0x21
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a7e:	f7fe f8af 	bl	8001be0 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d108      	bne.n	8003aac <HAL_UART_Transmit+0x82>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e003      	b.n	8003ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003abc:	e02a      	b.n	8003b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f840 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cf      	bne.n	8003abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f810 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b090      	sub	sp, #64	; 0x40
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5e:	e050      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d04c      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b6e:	f7fe f837 	bl	8001be0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d241      	bcs.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9e:	637a      	str	r2, [r7, #52]	; 0x34
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd2:	623a      	str	r2, [r7, #32]
 8003bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	69f9      	ldr	r1, [r7, #28]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00f      	b.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d09f      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3740      	adds	r7, #64	; 0x40
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b0c0      	sub	sp, #256	; 0x100
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	68d9      	ldr	r1, [r3, #12]
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	ea40 0301 	orr.w	r3, r0, r1
 8003c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c84:	f021 010c 	bic.w	r1, r1, #12
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	6999      	ldr	r1, [r3, #24]
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	ea40 0301 	orr.w	r3, r0, r1
 8003cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <UART_SetConfig+0x2cc>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d005      	beq.n	8003ccc <UART_SetConfig+0xa0>
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b8d      	ldr	r3, [pc, #564]	; (8003efc <UART_SetConfig+0x2d0>)
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d104      	bne.n	8003cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff fe4c 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cd4:	e003      	b.n	8003cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cd6:	f7ff fe33 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8003cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	f040 810c 	bne.w	8003f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d06:	415b      	adcs	r3, r3
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d0e:	4621      	mov	r1, r4
 8003d10:	eb12 0801 	adds.w	r8, r2, r1
 8003d14:	4629      	mov	r1, r5
 8003d16:	eb43 0901 	adc.w	r9, r3, r1
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2e:	4690      	mov	r8, r2
 8003d30:	4699      	mov	r9, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	eb18 0303 	adds.w	r3, r8, r3
 8003d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	eb49 0303 	adc.w	r3, r9, r3
 8003d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	18db      	adds	r3, r3, r3
 8003d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d60:	4613      	mov	r3, r2
 8003d62:	eb42 0303 	adc.w	r3, r2, r3
 8003d66:	657b      	str	r3, [r7, #84]	; 0x54
 8003d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d70:	f7fc ff6a 	bl	8000c48 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <UART_SetConfig+0x2d4>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	011c      	lsls	r4, r3, #4
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003da4:	4641      	mov	r1, r8
 8003da6:	eb12 0a01 	adds.w	sl, r2, r1
 8003daa:	4649      	mov	r1, r9
 8003dac:	eb43 0b01 	adc.w	fp, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc4:	4692      	mov	sl, r2
 8003dc6:	469b      	mov	fp, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	eb1a 0303 	adds.w	r3, sl, r3
 8003dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003df0:	460b      	mov	r3, r1
 8003df2:	18db      	adds	r3, r3, r3
 8003df4:	643b      	str	r3, [r7, #64]	; 0x40
 8003df6:	4613      	mov	r3, r2
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e06:	f7fc ff1f 	bl	8000c48 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <UART_SetConfig+0x2d4>)
 8003e12:	fba3 2301 	umull	r2, r3, r3, r1
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2264      	movs	r2, #100	; 0x64
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	1acb      	subs	r3, r1, r3
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <UART_SetConfig+0x2d4>)
 8003e28:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e34:	441c      	add	r4, r3
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e50:	415b      	adcs	r3, r3
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	460a      	mov	r2, r1
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ec2:	f7fc fec1 	bl	8000c48 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <UART_SetConfig+0x2d4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <UART_SetConfig+0x2d4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4422      	add	r2, r4
 8003ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef4:	e106      	b.n	8004104 <UART_SetConfig+0x4d8>
 8003ef6:	bf00      	nop
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f16:	4642      	mov	r2, r8
 8003f18:	464b      	mov	r3, r9
 8003f1a:	1891      	adds	r1, r2, r2
 8003f1c:	6239      	str	r1, [r7, #32]
 8003f1e:	415b      	adcs	r3, r3
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f26:	4641      	mov	r1, r8
 8003f28:	1854      	adds	r4, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb43 0501 	adc.w	r5, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	00eb      	lsls	r3, r5, #3
 8003f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	4614      	mov	r4, r2
 8003f42:	461d      	mov	r5, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	18e3      	adds	r3, r4, r3
 8003f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	eb45 0303 	adc.w	r3, r5, r3
 8003f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f72:	4629      	mov	r1, r5
 8003f74:	008b      	lsls	r3, r1, #2
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	008a      	lsls	r2, r1, #2
 8003f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f84:	f7fc fe60 	bl	8000c48 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b60      	ldr	r3, [pc, #384]	; (8004110 <UART_SetConfig+0x4e4>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	011c      	lsls	r4, r3, #4
 8003f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	61b9      	str	r1, [r7, #24]
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb8:	4641      	mov	r1, r8
 8003fba:	1851      	adds	r1, r2, r1
 8003fbc:	6139      	str	r1, [r7, #16]
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	00cb      	lsls	r3, r1, #3
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fda:	4651      	mov	r1, sl
 8003fdc:	00ca      	lsls	r2, r1, #3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fec:	464b      	mov	r3, r9
 8003fee:	460a      	mov	r2, r1
 8003ff0:	eb42 0303 	adc.w	r3, r2, r3
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	67bb      	str	r3, [r7, #120]	; 0x78
 8004002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004010:	4649      	mov	r1, r9
 8004012:	008b      	lsls	r3, r1, #2
 8004014:	4641      	mov	r1, r8
 8004016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401a:	4641      	mov	r1, r8
 800401c:	008a      	lsls	r2, r1, #2
 800401e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004022:	f7fc fe11 	bl	8000c48 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4611      	mov	r1, r2
 800402c:	4b38      	ldr	r3, [pc, #224]	; (8004110 <UART_SetConfig+0x4e4>)
 800402e:	fba3 2301 	umull	r2, r3, r3, r1
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2264      	movs	r2, #100	; 0x64
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	1acb      	subs	r3, r1, r3
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	3332      	adds	r3, #50	; 0x32
 8004040:	4a33      	ldr	r2, [pc, #204]	; (8004110 <UART_SetConfig+0x4e4>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404c:	441c      	add	r4, r3
 800404e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004052:	2200      	movs	r2, #0
 8004054:	673b      	str	r3, [r7, #112]	; 0x70
 8004056:	677a      	str	r2, [r7, #116]	; 0x74
 8004058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	415b      	adcs	r3, r3
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800406c:	4641      	mov	r1, r8
 800406e:	1851      	adds	r1, r2, r1
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	4649      	mov	r1, r9
 8004074:	414b      	adcs	r3, r1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004084:	4659      	mov	r1, fp
 8004086:	00cb      	lsls	r3, r1, #3
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408e:	4651      	mov	r1, sl
 8004090:	00ca      	lsls	r2, r1, #3
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	4603      	mov	r3, r0
 8004098:	4642      	mov	r2, r8
 800409a:	189b      	adds	r3, r3, r2
 800409c:	66bb      	str	r3, [r7, #104]	; 0x68
 800409e:	464b      	mov	r3, r9
 80040a0:	460a      	mov	r2, r1
 80040a2:	eb42 0303 	adc.w	r3, r2, r3
 80040a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
 80040b2:	667a      	str	r2, [r7, #100]	; 0x64
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040c0:	4649      	mov	r1, r9
 80040c2:	008b      	lsls	r3, r1, #2
 80040c4:	4641      	mov	r1, r8
 80040c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ca:	4641      	mov	r1, r8
 80040cc:	008a      	lsls	r2, r1, #2
 80040ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040d2:	f7fc fdb9 	bl	8000c48 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <UART_SetConfig+0x4e4>)
 80040dc:	fba3 1302 	umull	r1, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	3332      	adds	r3, #50	; 0x32
 80040ee:	4a08      	ldr	r2, [pc, #32]	; (8004110 <UART_SetConfig+0x4e4>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4422      	add	r2, r4
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800410a:	46bd      	mov	sp, r7
 800410c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004126:	2b84      	cmp	r3, #132	; 0x84
 8004128:	d005      	beq.n	8004136 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800412a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	3303      	adds	r3, #3
 8004134:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004148:	f000 fade 	bl	8004708 <vTaskStartScheduler>
  
  return osOK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	bd80      	pop	{r7, pc}

08004152 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004154:	b089      	sub	sp, #36	; 0x24
 8004156:	af04      	add	r7, sp, #16
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <osThreadCreate+0x54>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685c      	ldr	r4, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691e      	ldr	r6, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ffc8 	bl	8004114 <makeFreeRtosPriority>
 8004184:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	9100      	str	r1, [sp, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4632      	mov	r2, r6
 8004198:	4629      	mov	r1, r5
 800419a:	4620      	mov	r0, r4
 800419c:	f000 f8ed 	bl	800437a <xTaskCreateStatic>
 80041a0:	4603      	mov	r3, r0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e01c      	b.n	80041e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685c      	ldr	r4, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ffaa 	bl	8004114 <makeFreeRtosPriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4632      	mov	r2, r6
 80041ce:	4629      	mov	r1, r5
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 f92f 	bl	8004434 <xTaskCreate>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <osDelay+0x16>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	e000      	b.n	8004202 <osDelay+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa4c 	bl	80046a0 <vTaskDelay>
  
  return osOK;
 8004208:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0208 	add.w	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d103      	bne.n	80042d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e00c      	b.n	80042ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3308      	adds	r3, #8
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e002      	b.n	80042e2 <vListInsert+0x2e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d2f6      	bcs.n	80042dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6852      	ldr	r2, [r2, #4]
 8004346:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d103      	bne.n	800435a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08e      	sub	sp, #56	; 0x38
 800437e:	af04      	add	r7, sp, #16
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xTaskCreateStatic+0x46>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61fb      	str	r3, [r7, #28]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043c0:	2354      	movs	r3, #84	; 0x54
 80043c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b54      	cmp	r3, #84	; 0x54
 80043c8:	d00a      	beq.n	80043e0 <xTaskCreateStatic+0x66>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	61bb      	str	r3, [r7, #24]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <xTaskCreateStatic+0xac>
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004400:	2300      	movs	r3, #0
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f850 	bl	80044be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004420:	f000 f8d4 	bl	80045cc <prvAddNewTaskToReadyList>
 8004424:	e001      	b.n	800442a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800442a:	697b      	ldr	r3, [r7, #20]
	}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	; 0x30
 8004438:	af04      	add	r7, sp, #16
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fef5 	bl	8005238 <pvPortMalloc>
 800444e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004456:	2054      	movs	r0, #84	; 0x54
 8004458:	f000 feee 	bl	8005238 <pvPortMalloc>
 800445c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
 800446a:	e005      	b.n	8004478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f000 ffaf 	bl	80053d0 <vPortFree>
 8004472:	e001      	b.n	8004478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	2300      	movs	r3, #0
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f80e 	bl	80044be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a2:	69f8      	ldr	r0, [r7, #28]
 80044a4:	f000 f892 	bl	80045cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e002      	b.n	80044b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b4:	69bb      	ldr	r3, [r7, #24]
	}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	3b01      	subs	r3, #1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f023 0307 	bic.w	r3, r3, #7
 80044e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <prvInitialiseNewTask+0x48>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	617b      	str	r3, [r7, #20]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e012      	b.n	8004538 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	7819      	ldrb	r1, [r3, #0]
 800451a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	3334      	adds	r3, #52	; 0x34
 8004522:	460a      	mov	r2, r1
 8004524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d9e9      	bls.n	8004512 <prvInitialiseNewTask+0x54>
 800453e:	e000      	b.n	8004542 <prvInitialiseNewTask+0x84>
			{
				break;
 8004540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800454a:	e003      	b.n	8004554 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	2b06      	cmp	r3, #6
 8004558:	d901      	bls.n	800455e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455a:	2306      	movs	r3, #6
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fe6c 	bl	8004252 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe67 	bl	8004252 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	f1c3 0207 	rsb	r2, r3, #7
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2200      	movs	r2, #0
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f000 fc33 	bl	8004e18 <pxPortInitialiseStack>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c4:	bf00      	nop
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d4:	f000 fd4e 	bl	8005074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d8:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	4a29      	ldr	r2, [pc, #164]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f0:	4b24      	ldr	r3, [pc, #144]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d110      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f8:	f000 facc 	bl	8004b94 <prvInitialiseTaskLists>
 80045fc:	e00d      	b.n	800461a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <prvAddNewTaskToReadyList+0xc0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d802      	bhi.n	800461a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <prvAddNewTaskToReadyList+0xc4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <prvAddNewTaskToReadyList+0xc4>)
 8004622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <prvAddNewTaskToReadyList+0xc8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4313      	orrs	r3, r2
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <prvAddNewTaskToReadyList+0xc8>)
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <prvAddNewTaskToReadyList+0xcc>)
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7ff fe0d 	bl	800426c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004652:	f000 fd3f 	bl	80050d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <prvAddNewTaskToReadyList+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	429a      	cmp	r2, r3
 800466a:	d207      	bcs.n	800467c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <prvAddNewTaskToReadyList+0xd0>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000628 	.word	0x20000628
 8004688:	20000528 	.word	0x20000528
 800468c:	20000634 	.word	0x20000634
 8004690:	20000644 	.word	0x20000644
 8004694:	20000630 	.word	0x20000630
 8004698:	2000052c 	.word	0x2000052c
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <vTaskDelay+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <vTaskDelay+0x30>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60bb      	str	r3, [r7, #8]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046d0:	f000 f87a 	bl	80047c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046d4:	2100      	movs	r1, #0
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb38 	bl	8004d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046dc:	f000 f882 	bl	80047e4 <xTaskResumeAll>
 80046e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <vTaskDelay+0x64>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000650 	.word	0x20000650
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004716:	463a      	mov	r2, r7
 8004718:	1d39      	adds	r1, r7, #4
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc fe1a 	bl	8001358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	9202      	str	r2, [sp, #8]
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	2300      	movs	r3, #0
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	460a      	mov	r2, r1
 8004736:	491e      	ldr	r1, [pc, #120]	; (80047b0 <vTaskStartScheduler+0xa8>)
 8004738:	481e      	ldr	r0, [pc, #120]	; (80047b4 <vTaskStartScheduler+0xac>)
 800473a:	f7ff fe1e 	bl	800437a <xTaskCreateStatic>
 800473e:	4603      	mov	r3, r0
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <vTaskStartScheduler+0xb0>)
 8004742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <vTaskStartScheduler+0xb0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e001      	b.n	8004756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d116      	bne.n	800478a <vTaskStartScheduler+0x82>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
}
 800476e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <vTaskStartScheduler+0xb4>)
 8004772:	f04f 32ff 	mov.w	r2, #4294967295
 8004776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <vTaskStartScheduler+0xb8>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <vTaskStartScheduler+0xbc>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004784:	f000 fbd4 	bl	8004f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004788:	e00e      	b.n	80047a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d10a      	bne.n	80047a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <vTaskStartScheduler+0x9e>
}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	08008664 	.word	0x08008664
 80047b4:	08004b65 	.word	0x08004b65
 80047b8:	2000064c 	.word	0x2000064c
 80047bc:	20000648 	.word	0x20000648
 80047c0:	20000634 	.word	0x20000634
 80047c4:	2000062c 	.word	0x2000062c

080047c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <vTaskSuspendAll+0x18>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <vTaskSuspendAll+0x18>)
 80047d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000650 	.word	0x20000650

080047e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <xTaskResumeAll+0x114>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <xTaskResumeAll+0x2c>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004810:	f000 fc30 	bl	8005074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004814:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <xTaskResumeAll+0x114>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a37      	ldr	r2, [pc, #220]	; (80048f8 <xTaskResumeAll+0x114>)
 800481c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <xTaskResumeAll+0x114>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d161      	bne.n	80048ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004826:	4b35      	ldr	r3, [pc, #212]	; (80048fc <xTaskResumeAll+0x118>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d05d      	beq.n	80048ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	e02e      	b.n	800488e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b33      	ldr	r3, [pc, #204]	; (8004900 <xTaskResumeAll+0x11c>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3318      	adds	r3, #24
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fd72 	bl	8004326 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fd6d 	bl	8004326 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <xTaskResumeAll+0x120>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <xTaskResumeAll+0x120>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <xTaskResumeAll+0x124>)
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fcf9 	bl	800426c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <xTaskResumeAll+0x128>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <xTaskResumeAll+0x12c>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <xTaskResumeAll+0x11c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1cc      	bne.n	8004830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800489c:	f000 fa18 	bl	8004cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048a0:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <xTaskResumeAll+0x130>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ac:	f000 f846 	bl	800493c <xTaskIncrementTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048b6:	4b16      	ldr	r3, [pc, #88]	; (8004910 <xTaskResumeAll+0x12c>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f1      	bne.n	80048ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <xTaskResumeAll+0x130>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <xTaskResumeAll+0x12c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskResumeAll+0x134>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048ea:	f000 fbf3 	bl	80050d4 <vPortExitCritical>

	return xAlreadyYielded;
 80048ee:	68bb      	ldr	r3, [r7, #8]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000650 	.word	0x20000650
 80048fc:	20000628 	.word	0x20000628
 8004900:	200005e8 	.word	0x200005e8
 8004904:	20000630 	.word	0x20000630
 8004908:	2000052c 	.word	0x2000052c
 800490c:	20000528 	.word	0x20000528
 8004910:	2000063c 	.word	0x2000063c
 8004914:	20000638 	.word	0x20000638
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <xTaskGetTickCount+0x1c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	2000062c 	.word	0x2000062c

0800493c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004946:	4b4e      	ldr	r3, [pc, #312]	; (8004a80 <xTaskIncrementTick+0x144>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 808e 	bne.w	8004a6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004950:	4b4c      	ldr	r3, [pc, #304]	; (8004a84 <xTaskIncrementTick+0x148>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004958:	4a4a      	ldr	r2, [pc, #296]	; (8004a84 <xTaskIncrementTick+0x148>)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d120      	bne.n	80049a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004964:	4b48      	ldr	r3, [pc, #288]	; (8004a88 <xTaskIncrementTick+0x14c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <xTaskIncrementTick+0x48>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	603b      	str	r3, [r7, #0]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <xTaskIncrementTick+0x46>
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <xTaskIncrementTick+0x14c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <xTaskIncrementTick+0x150>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <xTaskIncrementTick+0x14c>)
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4a3e      	ldr	r2, [pc, #248]	; (8004a8c <xTaskIncrementTick+0x150>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <xTaskIncrementTick+0x154>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <xTaskIncrementTick+0x154>)
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	f000 f995 	bl	8004cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <xTaskIncrementTick+0x158>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d348      	bcc.n	8004a42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b0:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <xTaskIncrementTick+0x14c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <xTaskIncrementTick+0x158>)
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	601a      	str	r2, [r3, #0]
					break;
 80049c2:	e03e      	b.n	8004a42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c4:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <xTaskIncrementTick+0x14c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d203      	bcs.n	80049e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049dc:	4a2d      	ldr	r2, [pc, #180]	; (8004a94 <xTaskIncrementTick+0x158>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049e2:	e02e      	b.n	8004a42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fc9c 	bl	8004326 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3318      	adds	r3, #24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fc93 	bl	8004326 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2201      	movs	r2, #1
 8004a06:	409a      	lsls	r2, r3
 8004a08:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <xTaskIncrementTick+0x15c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <xTaskIncrementTick+0x15c>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <xTaskIncrementTick+0x160>)
 8004a20:	441a      	add	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7ff fc1f 	bl	800426c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <xTaskIncrementTick+0x164>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3b9      	bcc.n	80049b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a40:	e7b6      	b.n	80049b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <xTaskIncrementTick+0x164>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4914      	ldr	r1, [pc, #80]	; (8004a9c <xTaskIncrementTick+0x160>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d901      	bls.n	8004a5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <xTaskIncrementTick+0x168>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e004      	b.n	8004a76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <xTaskIncrementTick+0x16c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <xTaskIncrementTick+0x16c>)
 8004a74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a76:	697b      	ldr	r3, [r7, #20]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000650 	.word	0x20000650
 8004a84:	2000062c 	.word	0x2000062c
 8004a88:	200005e0 	.word	0x200005e0
 8004a8c:	200005e4 	.word	0x200005e4
 8004a90:	20000640 	.word	0x20000640
 8004a94:	20000648 	.word	0x20000648
 8004a98:	20000630 	.word	0x20000630
 8004a9c:	2000052c 	.word	0x2000052c
 8004aa0:	20000528 	.word	0x20000528
 8004aa4:	2000063c 	.word	0x2000063c
 8004aa8:	20000638 	.word	0x20000638

08004aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <vTaskSwitchContext+0xa4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <vTaskSwitchContext+0xa8>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ac0:	e03f      	b.n	8004b42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <vTaskSwitchContext+0xa8>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <vTaskSwitchContext+0xac>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	f1c3 031f 	rsb	r3, r3, #31
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	491f      	ldr	r1, [pc, #124]	; (8004b5c <vTaskSwitchContext+0xb0>)
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	607b      	str	r3, [r7, #4]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <vTaskSwitchContext+0x5a>
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <vTaskSwitchContext+0xb0>)
 8004b14:	4413      	add	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d104      	bne.n	8004b38 <vTaskSwitchContext+0x8c>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <vTaskSwitchContext+0xb4>)
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000650 	.word	0x20000650
 8004b54:	2000063c 	.word	0x2000063c
 8004b58:	20000630 	.word	0x20000630
 8004b5c:	2000052c 	.word	0x2000052c
 8004b60:	20000528 	.word	0x20000528

08004b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b6c:	f000 f852 	bl	8004c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <prvIdleTask+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d9f9      	bls.n	8004b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvIdleTask+0x2c>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b88:	e7f0      	b.n	8004b6c <prvIdleTask+0x8>
 8004b8a:	bf00      	nop
 8004b8c:	2000052c 	.word	0x2000052c
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e00c      	b.n	8004bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <prvInitialiseTaskLists+0x60>)
 8004bac:	4413      	add	r3, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fb2f 	bl	8004212 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d9ef      	bls.n	8004ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bc0:	480d      	ldr	r0, [pc, #52]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004bc2:	f7ff fb26 	bl	8004212 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bc6:	480d      	ldr	r0, [pc, #52]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004bc8:	f7ff fb23 	bl	8004212 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <prvInitialiseTaskLists+0x6c>)
 8004bce:	f7ff fb20 	bl	8004212 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bd2:	480c      	ldr	r0, [pc, #48]	; (8004c04 <prvInitialiseTaskLists+0x70>)
 8004bd4:	f7ff fb1d 	bl	8004212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bd8:	480b      	ldr	r0, [pc, #44]	; (8004c08 <prvInitialiseTaskLists+0x74>)
 8004bda:	f7ff fb1a 	bl	8004212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <prvInitialiseTaskLists+0x78>)
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <prvInitialiseTaskLists+0x7c>)
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004be8:	601a      	str	r2, [r3, #0]
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	2000052c 	.word	0x2000052c
 8004bf8:	200005b8 	.word	0x200005b8
 8004bfc:	200005cc 	.word	0x200005cc
 8004c00:	200005e8 	.word	0x200005e8
 8004c04:	200005fc 	.word	0x200005fc
 8004c08:	20000614 	.word	0x20000614
 8004c0c:	200005e0 	.word	0x200005e0
 8004c10:	200005e4 	.word	0x200005e4

08004c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1a:	e019      	b.n	8004c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c1c:	f000 fa2a 	bl	8005074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <prvCheckTasksWaitingTermination+0x50>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fb7a 	bl	8004326 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c46:	f000 fa45 	bl	80050d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f810 	bl	8004c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e1      	bne.n	8004c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200005fc 	.word	0x200005fc
 8004c68:	20000628 	.word	0x20000628
 8004c6c:	20000610 	.word	0x20000610

08004c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fba2 	bl	80053d0 <vPortFree>
				vPortFree( pxTCB );
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb9f 	bl	80053d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c92:	e018      	b.n	8004cc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d103      	bne.n	8004ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb96 	bl	80053d0 <vPortFree>
	}
 8004ca4:	e00f      	b.n	8004cc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00a      	beq.n	8004cc6 <prvDeleteTCB+0x56>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	60fb      	str	r3, [r7, #12]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <prvDeleteTCB+0x54>
	}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <prvResetNextTaskUnblockTime+0x38>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <prvResetNextTaskUnblockTime+0x3c>)
 8004ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ce8:	e008      	b.n	8004cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <prvResetNextTaskUnblockTime+0x38>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <prvResetNextTaskUnblockTime+0x3c>)
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	200005e0 	.word	0x200005e0
 8004d0c:	20000648 	.word	0x20000648

08004d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <xTaskGetSchedulerState+0x34>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	e008      	b.n	8004d36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <xTaskGetSchedulerState+0x38>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	e001      	b.n	8004d36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d36:	687b      	ldr	r3, [r7, #4]
	}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000634 	.word	0x20000634
 8004d48:	20000650 	.word	0x20000650

08004d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5c:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fadf 	bl	8004326 <uxListRemove>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	2201      	movs	r2, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4013      	ands	r3, r2
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d10a      	bne.n	8004da4 <prvAddCurrentTaskToDelayedList+0x58>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	481a      	ldr	r0, [pc, #104]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d9e:	f7ff fa65 	bl	800426c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004da2:	e026      	b.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d209      	bcs.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7ff fa73 	bl	80042b4 <vListInsert>
}
 8004dce:	e010      	b.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7ff fa69 	bl	80042b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004de2:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d202      	bcs.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004dec:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6013      	str	r3, [r2, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	2000062c 	.word	0x2000062c
 8004e00:	20000528 	.word	0x20000528
 8004e04:	20000630 	.word	0x20000630
 8004e08:	20000614 	.word	0x20000614
 8004e0c:	200005e4 	.word	0x200005e4
 8004e10:	200005e0 	.word	0x200005e0
 8004e14:	20000648 	.word	0x20000648

08004e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b04      	subs	r3, #4
 8004e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3b04      	subs	r3, #4
 8004e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b04      	subs	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e48:	4a0c      	ldr	r2, [pc, #48]	; (8004e7c <pxPortInitialiseStack+0x64>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b14      	subs	r3, #20
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f06f 0202 	mvn.w	r2, #2
 8004e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b20      	subs	r3, #32
 8004e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	08004e81 	.word	0x08004e81

08004e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <prvTaskExitError+0x54>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d00a      	beq.n	8004eaa <prvTaskExitError+0x2a>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	60fb      	str	r3, [r7, #12]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <prvTaskExitError+0x28>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60bb      	str	r3, [r7, #8]
}
 8004ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ebe:	bf00      	nop
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0fc      	beq.n	8004ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	2000000c 	.word	0x2000000c
	...

08004ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <pxCurrentTCBConst2>)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	6808      	ldr	r0, [r1, #0]
 8004ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	f380 8809 	msr	PSP, r0
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8811 	msr	BASEPRI, r0
 8004efa:	4770      	bx	lr
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst2>:
 8004f00:	20000528 	.word	0x20000528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f08:	4808      	ldr	r0, [pc, #32]	; (8004f2c <prvPortStartFirstTask+0x24>)
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	6800      	ldr	r0, [r0, #0]
 8004f0e:	f380 8808 	msr	MSP, r0
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8814 	msr	CONTROL, r0
 8004f1a:	b662      	cpsie	i
 8004f1c:	b661      	cpsie	f
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	df00      	svc	0
 8004f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed08 	.word	0xe000ed08

08004f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f36:	4b46      	ldr	r3, [pc, #280]	; (8005050 <xPortStartScheduler+0x120>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a46      	ldr	r2, [pc, #280]	; (8005054 <xPortStartScheduler+0x124>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10a      	bne.n	8004f56 <xPortStartScheduler+0x26>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <xPortStartScheduler+0x120>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3f      	ldr	r2, [pc, #252]	; (8005058 <xPortStartScheduler+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10a      	bne.n	8004f76 <xPortStartScheduler+0x46>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f76:	4b39      	ldr	r3, [pc, #228]	; (800505c <xPortStartScheduler+0x12c>)
 8004f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4b31      	ldr	r3, [pc, #196]	; (8005060 <xPortStartScheduler+0x130>)
 8004f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <xPortStartScheduler+0x134>)
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fa4:	e009      	b.n	8004fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <xPortStartScheduler+0x134>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	4a2d      	ldr	r2, [pc, #180]	; (8005064 <xPortStartScheduler+0x134>)
 8004fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d0ef      	beq.n	8004fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fc6:	4b27      	ldr	r3, [pc, #156]	; (8005064 <xPortStartScheduler+0x134>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1c3 0307 	rsb	r3, r3, #7
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d00a      	beq.n	8004fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60bb      	str	r3, [r7, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fe8:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <xPortStartScheduler+0x134>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <xPortStartScheduler+0x134>)
 8004ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <xPortStartScheduler+0x134>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <xPortStartScheduler+0x134>)
 8004ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <xPortStartScheduler+0x138>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <xPortStartScheduler+0x138>)
 800500c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <xPortStartScheduler+0x138>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <xPortStartScheduler+0x138>)
 8005018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800501c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800501e:	f000 f8dd 	bl	80051dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <xPortStartScheduler+0x13c>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005028:	f000 f8fc 	bl	8005224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <xPortStartScheduler+0x140>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <xPortStartScheduler+0x140>)
 8005032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005038:	f7ff ff66 	bl	8004f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800503c:	f7ff fd36 	bl	8004aac <vTaskSwitchContext>
	prvTaskExitError();
 8005040:	f7ff ff1e 	bl	8004e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	e000ed00 	.word	0xe000ed00
 8005054:	410fc271 	.word	0x410fc271
 8005058:	410fc270 	.word	0x410fc270
 800505c:	e000e400 	.word	0xe000e400
 8005060:	20000654 	.word	0x20000654
 8005064:	20000658 	.word	0x20000658
 8005068:	e000ed20 	.word	0xe000ed20
 800506c:	2000000c 	.word	0x2000000c
 8005070:	e000ef34 	.word	0xe000ef34

08005074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	607b      	str	r3, [r7, #4]
}
 800508c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <vPortEnterCritical+0x58>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <vPortEnterCritical+0x58>)
 8005096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <vPortEnterCritical+0x58>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d10f      	bne.n	80050c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <vPortEnterCritical+0x5c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	603b      	str	r3, [r7, #0]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <vPortEnterCritical+0x4a>
	}
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <vPortExitCritical+0x50>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <vPortExitCritical+0x24>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <vPortExitCritical+0x50>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <vPortExitCritical+0x50>)
 8005100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <vPortExitCritical+0x50>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <vPortExitCritical+0x42>
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
	...

08005130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005130:	f3ef 8009 	mrs	r0, PSP
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <pxCurrentTCBConst>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f01e 0f10 	tst.w	lr, #16
 8005140:	bf08      	it	eq
 8005142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005154:	f380 8811 	msr	BASEPRI, r0
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f7ff fca4 	bl	8004aac <vTaskSwitchContext>
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f380 8811 	msr	BASEPRI, r0
 800516c:	bc09      	pop	{r0, r3}
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	6808      	ldr	r0, [r1, #0]
 8005172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005176:	f01e 0f10 	tst.w	lr, #16
 800517a:	bf08      	it	eq
 800517c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005180:	f380 8809 	msr	PSP, r0
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w

08005190 <pxCurrentTCBConst>:
 8005190:	20000528 	.word	0x20000528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop

08005198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051b2:	f7ff fbc3 	bl	800493c <xTaskIncrementTick>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <xPortSysTickHandler+0x40>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f383 8811 	msr	BASEPRI, r3
}
 80051ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortSetupTimerInterrupt+0x34>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <vPortSetupTimerInterrupt+0x38>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <vPortSetupTimerInterrupt+0x3c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <vPortSetupTimerInterrupt+0x40>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <vPortSetupTimerInterrupt+0x44>)
 80051fa:	3b01      	subs	r3, #1
 80051fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <vPortSetupTimerInterrupt+0x34>)
 8005200:	2207      	movs	r2, #7
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000e010 	.word	0xe000e010
 8005214:	e000e018 	.word	0xe000e018
 8005218:	20000000 	.word	0x20000000
 800521c:	10624dd3 	.word	0x10624dd3
 8005220:	e000e014 	.word	0xe000e014

08005224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005234 <vPortEnableVFP+0x10>
 8005228:	6801      	ldr	r1, [r0, #0]
 800522a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800522e:	6001      	str	r1, [r0, #0]
 8005230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005232:	bf00      	nop
 8005234:	e000ed88 	.word	0xe000ed88

08005238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005244:	f7ff fac0 	bl	80047c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005248:	4b5b      	ldr	r3, [pc, #364]	; (80053b8 <pvPortMalloc+0x180>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005250:	f000 f920 	bl	8005494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <pvPortMalloc+0x184>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 8093 	bne.w	8005388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01d      	beq.n	80052a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005268:	2208      	movs	r2, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f023 0307 	bic.w	r3, r3, #7
 8005280:	3308      	adds	r3, #8
 8005282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <pvPortMalloc+0x6c>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	617b      	str	r3, [r7, #20]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d06e      	beq.n	8005388 <pvPortMalloc+0x150>
 80052aa:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <pvPortMalloc+0x188>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d869      	bhi.n	8005388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052b4:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <pvPortMalloc+0x18c>)
 80052b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052b8:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <pvPortMalloc+0x18c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052be:	e004      	b.n	80052ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d903      	bls.n	80052dc <pvPortMalloc+0xa4>
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f1      	bne.n	80052c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052dc:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <pvPortMalloc+0x180>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d050      	beq.n	8005388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2208      	movs	r2, #8
 80052ec:	4413      	add	r3, r2
 80052ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	2308      	movs	r3, #8
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	429a      	cmp	r2, r3
 8005306:	d91f      	bls.n	8005348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <pvPortMalloc+0xf8>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	613b      	str	r3, [r7, #16]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad2      	subs	r2, r2, r3
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005342:	69b8      	ldr	r0, [r7, #24]
 8005344:	f000 f908 	bl	8005558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <pvPortMalloc+0x188>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <pvPortMalloc+0x188>)
 8005354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005356:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <pvPortMalloc+0x188>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <pvPortMalloc+0x190>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d203      	bcs.n	800536a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <pvPortMalloc+0x188>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <pvPortMalloc+0x190>)
 8005368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <pvPortMalloc+0x184>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	431a      	orrs	r2, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <pvPortMalloc+0x194>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <pvPortMalloc+0x194>)
 8005386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005388:	f7ff fa2c 	bl	80047e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <pvPortMalloc+0x174>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <pvPortMalloc+0x172>
	return pvReturn;
 80053ac:	69fb      	ldr	r3, [r7, #28]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3728      	adds	r7, #40	; 0x28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20004264 	.word	0x20004264
 80053bc:	20004278 	.word	0x20004278
 80053c0:	20004268 	.word	0x20004268
 80053c4:	2000425c 	.word	0x2000425c
 80053c8:	2000426c 	.word	0x2000426c
 80053cc:	20004270 	.word	0x20004270

080053d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04d      	beq.n	800547e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053e2:	2308      	movs	r3, #8
 80053e4:	425b      	negs	r3, r3
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	4b24      	ldr	r3, [pc, #144]	; (8005488 <vPortFree+0xb8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <vPortFree+0x44>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60fb      	str	r3, [r7, #12]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <vPortFree+0x62>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <vPortFree+0xb8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01e      	beq.n	800547e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11a      	bne.n	800547e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <vPortFree+0xb8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005458:	f7ff f9b6 	bl	80047c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <vPortFree+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4413      	add	r3, r2
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <vPortFree+0xbc>)
 8005468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800546a:	6938      	ldr	r0, [r7, #16]
 800546c:	f000 f874 	bl	8005558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vPortFree+0xc0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	4a06      	ldr	r2, [pc, #24]	; (8005490 <vPortFree+0xc0>)
 8005478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800547a:	f7ff f9b3 	bl	80047e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20004278 	.word	0x20004278
 800548c:	20004268 	.word	0x20004268
 8005490:	20004274 	.word	0x20004274

08005494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800549a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800549e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <prvHeapInit+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3307      	adds	r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <prvHeapInit+0xac>)
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <prvHeapInit+0xb0>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <prvHeapInit+0xb0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054e0:	2208      	movs	r2, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <prvHeapInit+0xb4>)
 80054f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <prvHeapInit+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvHeapInit+0xb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvHeapInit+0xb4>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <prvHeapInit+0xb8>)
 8005522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <prvHeapInit+0xbc>)
 800552a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <prvHeapInit+0xc0>)
 800552e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	2000065c 	.word	0x2000065c
 8005544:	2000425c 	.word	0x2000425c
 8005548:	20004264 	.word	0x20004264
 800554c:	2000426c 	.word	0x2000426c
 8005550:	20004268 	.word	0x20004268
 8005554:	20004278 	.word	0x20004278

08005558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <prvInsertBlockIntoFreeList+0xac>)
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <prvInsertBlockIntoFreeList+0x14>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d8f7      	bhi.n	8005566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d108      	bne.n	800559a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d118      	bne.n	80055e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d00d      	beq.n	80055d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e008      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e003      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d002      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000425c 	.word	0x2000425c
 8005608:	20004264 	.word	0x20004264

0800560c <__cvt>:
 800560c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005610:	ec55 4b10 	vmov	r4, r5, d0
 8005614:	2d00      	cmp	r5, #0
 8005616:	460e      	mov	r6, r1
 8005618:	4619      	mov	r1, r3
 800561a:	462b      	mov	r3, r5
 800561c:	bfbb      	ittet	lt
 800561e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005622:	461d      	movlt	r5, r3
 8005624:	2300      	movge	r3, #0
 8005626:	232d      	movlt	r3, #45	; 0x2d
 8005628:	700b      	strb	r3, [r1, #0]
 800562a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800562c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005630:	4691      	mov	r9, r2
 8005632:	f023 0820 	bic.w	r8, r3, #32
 8005636:	bfbc      	itt	lt
 8005638:	4622      	movlt	r2, r4
 800563a:	4614      	movlt	r4, r2
 800563c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005640:	d005      	beq.n	800564e <__cvt+0x42>
 8005642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005646:	d100      	bne.n	800564a <__cvt+0x3e>
 8005648:	3601      	adds	r6, #1
 800564a:	2102      	movs	r1, #2
 800564c:	e000      	b.n	8005650 <__cvt+0x44>
 800564e:	2103      	movs	r1, #3
 8005650:	ab03      	add	r3, sp, #12
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	ab02      	add	r3, sp, #8
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	ec45 4b10 	vmov	d0, r4, r5
 800565c:	4653      	mov	r3, sl
 800565e:	4632      	mov	r2, r6
 8005660:	f000 fe76 	bl	8006350 <_dtoa_r>
 8005664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005668:	4607      	mov	r7, r0
 800566a:	d102      	bne.n	8005672 <__cvt+0x66>
 800566c:	f019 0f01 	tst.w	r9, #1
 8005670:	d022      	beq.n	80056b8 <__cvt+0xac>
 8005672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005676:	eb07 0906 	add.w	r9, r7, r6
 800567a:	d110      	bne.n	800569e <__cvt+0x92>
 800567c:	783b      	ldrb	r3, [r7, #0]
 800567e:	2b30      	cmp	r3, #48	; 0x30
 8005680:	d10a      	bne.n	8005698 <__cvt+0x8c>
 8005682:	2200      	movs	r2, #0
 8005684:	2300      	movs	r3, #0
 8005686:	4620      	mov	r0, r4
 8005688:	4629      	mov	r1, r5
 800568a:	f7fb fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800568e:	b918      	cbnz	r0, 8005698 <__cvt+0x8c>
 8005690:	f1c6 0601 	rsb	r6, r6, #1
 8005694:	f8ca 6000 	str.w	r6, [sl]
 8005698:	f8da 3000 	ldr.w	r3, [sl]
 800569c:	4499      	add	r9, r3
 800569e:	2200      	movs	r2, #0
 80056a0:	2300      	movs	r3, #0
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fb fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80056aa:	b108      	cbz	r0, 80056b0 <__cvt+0xa4>
 80056ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80056b0:	2230      	movs	r2, #48	; 0x30
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	454b      	cmp	r3, r9
 80056b6:	d307      	bcc.n	80056c8 <__cvt+0xbc>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056bc:	1bdb      	subs	r3, r3, r7
 80056be:	4638      	mov	r0, r7
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	b004      	add	sp, #16
 80056c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c8:	1c59      	adds	r1, r3, #1
 80056ca:	9103      	str	r1, [sp, #12]
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e7f0      	b.n	80056b2 <__cvt+0xa6>

080056d0 <__exponent>:
 80056d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d2:	4603      	mov	r3, r0
 80056d4:	2900      	cmp	r1, #0
 80056d6:	bfb8      	it	lt
 80056d8:	4249      	neglt	r1, r1
 80056da:	f803 2b02 	strb.w	r2, [r3], #2
 80056de:	bfb4      	ite	lt
 80056e0:	222d      	movlt	r2, #45	; 0x2d
 80056e2:	222b      	movge	r2, #43	; 0x2b
 80056e4:	2909      	cmp	r1, #9
 80056e6:	7042      	strb	r2, [r0, #1]
 80056e8:	dd2a      	ble.n	8005740 <__exponent+0x70>
 80056ea:	f10d 0207 	add.w	r2, sp, #7
 80056ee:	4617      	mov	r7, r2
 80056f0:	260a      	movs	r6, #10
 80056f2:	4694      	mov	ip, r2
 80056f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80056f8:	fb06 1415 	mls	r4, r6, r5, r1
 80056fc:	3430      	adds	r4, #48	; 0x30
 80056fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005702:	460c      	mov	r4, r1
 8005704:	2c63      	cmp	r4, #99	; 0x63
 8005706:	f102 32ff 	add.w	r2, r2, #4294967295
 800570a:	4629      	mov	r1, r5
 800570c:	dcf1      	bgt.n	80056f2 <__exponent+0x22>
 800570e:	3130      	adds	r1, #48	; 0x30
 8005710:	f1ac 0402 	sub.w	r4, ip, #2
 8005714:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005718:	1c41      	adds	r1, r0, #1
 800571a:	4622      	mov	r2, r4
 800571c:	42ba      	cmp	r2, r7
 800571e:	d30a      	bcc.n	8005736 <__exponent+0x66>
 8005720:	f10d 0209 	add.w	r2, sp, #9
 8005724:	eba2 020c 	sub.w	r2, r2, ip
 8005728:	42bc      	cmp	r4, r7
 800572a:	bf88      	it	hi
 800572c:	2200      	movhi	r2, #0
 800572e:	4413      	add	r3, r2
 8005730:	1a18      	subs	r0, r3, r0
 8005732:	b003      	add	sp, #12
 8005734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005736:	f812 5b01 	ldrb.w	r5, [r2], #1
 800573a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800573e:	e7ed      	b.n	800571c <__exponent+0x4c>
 8005740:	2330      	movs	r3, #48	; 0x30
 8005742:	3130      	adds	r1, #48	; 0x30
 8005744:	7083      	strb	r3, [r0, #2]
 8005746:	70c1      	strb	r1, [r0, #3]
 8005748:	1d03      	adds	r3, r0, #4
 800574a:	e7f1      	b.n	8005730 <__exponent+0x60>

0800574c <_printf_float>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	ed2d 8b02 	vpush	{d8}
 8005754:	b08d      	sub	sp, #52	; 0x34
 8005756:	460c      	mov	r4, r1
 8005758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800575c:	4616      	mov	r6, r2
 800575e:	461f      	mov	r7, r3
 8005760:	4605      	mov	r5, r0
 8005762:	f000 fce7 	bl	8006134 <_localeconv_r>
 8005766:	f8d0 a000 	ldr.w	sl, [r0]
 800576a:	4650      	mov	r0, sl
 800576c:	f7fa fd80 	bl	8000270 <strlen>
 8005770:	2300      	movs	r3, #0
 8005772:	930a      	str	r3, [sp, #40]	; 0x28
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	9305      	str	r3, [sp, #20]
 8005778:	f8d8 3000 	ldr.w	r3, [r8]
 800577c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005780:	3307      	adds	r3, #7
 8005782:	f023 0307 	bic.w	r3, r3, #7
 8005786:	f103 0208 	add.w	r2, r3, #8
 800578a:	f8c8 2000 	str.w	r2, [r8]
 800578e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005796:	9307      	str	r3, [sp, #28]
 8005798:	f8cd 8018 	str.w	r8, [sp, #24]
 800579c:	ee08 0a10 	vmov	s16, r0
 80057a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80057a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a8:	4b9e      	ldr	r3, [pc, #632]	; (8005a24 <_printf_float+0x2d8>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	f7fb f9bd 	bl	8000b2c <__aeabi_dcmpun>
 80057b2:	bb88      	cbnz	r0, 8005818 <_printf_float+0xcc>
 80057b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b8:	4b9a      	ldr	r3, [pc, #616]	; (8005a24 <_printf_float+0x2d8>)
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295
 80057be:	f7fb f997 	bl	8000af0 <__aeabi_dcmple>
 80057c2:	bb48      	cbnz	r0, 8005818 <_printf_float+0xcc>
 80057c4:	2200      	movs	r2, #0
 80057c6:	2300      	movs	r3, #0
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fb f986 	bl	8000adc <__aeabi_dcmplt>
 80057d0:	b110      	cbz	r0, 80057d8 <_printf_float+0x8c>
 80057d2:	232d      	movs	r3, #45	; 0x2d
 80057d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d8:	4a93      	ldr	r2, [pc, #588]	; (8005a28 <_printf_float+0x2dc>)
 80057da:	4b94      	ldr	r3, [pc, #592]	; (8005a2c <_printf_float+0x2e0>)
 80057dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057e0:	bf94      	ite	ls
 80057e2:	4690      	movls	r8, r2
 80057e4:	4698      	movhi	r8, r3
 80057e6:	2303      	movs	r3, #3
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	9b05      	ldr	r3, [sp, #20]
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	9700      	str	r7, [sp, #0]
 80057f8:	4633      	mov	r3, r6
 80057fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f9da 	bl	8005bb8 <_printf_common>
 8005804:	3001      	adds	r0, #1
 8005806:	f040 8090 	bne.w	800592a <_printf_float+0x1de>
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	b00d      	add	sp, #52	; 0x34
 8005810:	ecbd 8b02 	vpop	{d8}
 8005814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fb f984 	bl	8000b2c <__aeabi_dcmpun>
 8005824:	b140      	cbz	r0, 8005838 <_printf_float+0xec>
 8005826:	464b      	mov	r3, r9
 8005828:	2b00      	cmp	r3, #0
 800582a:	bfbc      	itt	lt
 800582c:	232d      	movlt	r3, #45	; 0x2d
 800582e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005832:	4a7f      	ldr	r2, [pc, #508]	; (8005a30 <_printf_float+0x2e4>)
 8005834:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <_printf_float+0x2e8>)
 8005836:	e7d1      	b.n	80057dc <_printf_float+0x90>
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800583e:	9206      	str	r2, [sp, #24]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	d13f      	bne.n	80058c4 <_printf_float+0x178>
 8005844:	2306      	movs	r3, #6
 8005846:	6063      	str	r3, [r4, #4]
 8005848:	9b05      	ldr	r3, [sp, #20]
 800584a:	6861      	ldr	r1, [r4, #4]
 800584c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005850:	2300      	movs	r3, #0
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	ab0a      	add	r3, sp, #40	; 0x28
 8005856:	e9cd b301 	strd	fp, r3, [sp, #4]
 800585a:	ab09      	add	r3, sp, #36	; 0x24
 800585c:	ec49 8b10 	vmov	d0, r8, r9
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005868:	4628      	mov	r0, r5
 800586a:	f7ff fecf 	bl	800560c <__cvt>
 800586e:	9b06      	ldr	r3, [sp, #24]
 8005870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005872:	2b47      	cmp	r3, #71	; 0x47
 8005874:	4680      	mov	r8, r0
 8005876:	d108      	bne.n	800588a <_printf_float+0x13e>
 8005878:	1cc8      	adds	r0, r1, #3
 800587a:	db02      	blt.n	8005882 <_printf_float+0x136>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	4299      	cmp	r1, r3
 8005880:	dd41      	ble.n	8005906 <_printf_float+0x1ba>
 8005882:	f1ab 0302 	sub.w	r3, fp, #2
 8005886:	fa5f fb83 	uxtb.w	fp, r3
 800588a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800588e:	d820      	bhi.n	80058d2 <_printf_float+0x186>
 8005890:	3901      	subs	r1, #1
 8005892:	465a      	mov	r2, fp
 8005894:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005898:	9109      	str	r1, [sp, #36]	; 0x24
 800589a:	f7ff ff19 	bl	80056d0 <__exponent>
 800589e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058a0:	1813      	adds	r3, r2, r0
 80058a2:	2a01      	cmp	r2, #1
 80058a4:	4681      	mov	r9, r0
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	dc02      	bgt.n	80058b0 <_printf_float+0x164>
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	07d2      	lsls	r2, r2, #31
 80058ae:	d501      	bpl.n	80058b4 <_printf_float+0x168>
 80058b0:	3301      	adds	r3, #1
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d09c      	beq.n	80057f6 <_printf_float+0xaa>
 80058bc:	232d      	movs	r3, #45	; 0x2d
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c2:	e798      	b.n	80057f6 <_printf_float+0xaa>
 80058c4:	9a06      	ldr	r2, [sp, #24]
 80058c6:	2a47      	cmp	r2, #71	; 0x47
 80058c8:	d1be      	bne.n	8005848 <_printf_float+0xfc>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1bc      	bne.n	8005848 <_printf_float+0xfc>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e7b9      	b.n	8005846 <_printf_float+0xfa>
 80058d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058d6:	d118      	bne.n	800590a <_printf_float+0x1be>
 80058d8:	2900      	cmp	r1, #0
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	dd0b      	ble.n	80058f6 <_printf_float+0x1aa>
 80058de:	6121      	str	r1, [r4, #16]
 80058e0:	b913      	cbnz	r3, 80058e8 <_printf_float+0x19c>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	07d0      	lsls	r0, r2, #31
 80058e6:	d502      	bpl.n	80058ee <_printf_float+0x1a2>
 80058e8:	3301      	adds	r3, #1
 80058ea:	440b      	add	r3, r1
 80058ec:	6123      	str	r3, [r4, #16]
 80058ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80058f0:	f04f 0900 	mov.w	r9, #0
 80058f4:	e7de      	b.n	80058b4 <_printf_float+0x168>
 80058f6:	b913      	cbnz	r3, 80058fe <_printf_float+0x1b2>
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	07d2      	lsls	r2, r2, #31
 80058fc:	d501      	bpl.n	8005902 <_printf_float+0x1b6>
 80058fe:	3302      	adds	r3, #2
 8005900:	e7f4      	b.n	80058ec <_printf_float+0x1a0>
 8005902:	2301      	movs	r3, #1
 8005904:	e7f2      	b.n	80058ec <_printf_float+0x1a0>
 8005906:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800590a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590c:	4299      	cmp	r1, r3
 800590e:	db05      	blt.n	800591c <_printf_float+0x1d0>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	6121      	str	r1, [r4, #16]
 8005914:	07d8      	lsls	r0, r3, #31
 8005916:	d5ea      	bpl.n	80058ee <_printf_float+0x1a2>
 8005918:	1c4b      	adds	r3, r1, #1
 800591a:	e7e7      	b.n	80058ec <_printf_float+0x1a0>
 800591c:	2900      	cmp	r1, #0
 800591e:	bfd4      	ite	le
 8005920:	f1c1 0202 	rsble	r2, r1, #2
 8005924:	2201      	movgt	r2, #1
 8005926:	4413      	add	r3, r2
 8005928:	e7e0      	b.n	80058ec <_printf_float+0x1a0>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	055a      	lsls	r2, r3, #21
 800592e:	d407      	bmi.n	8005940 <_printf_float+0x1f4>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	4642      	mov	r2, r8
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	d12c      	bne.n	8005998 <_printf_float+0x24c>
 800593e:	e764      	b.n	800580a <_printf_float+0xbe>
 8005940:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005944:	f240 80e0 	bls.w	8005b08 <_printf_float+0x3bc>
 8005948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800594c:	2200      	movs	r2, #0
 800594e:	2300      	movs	r3, #0
 8005950:	f7fb f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005954:	2800      	cmp	r0, #0
 8005956:	d034      	beq.n	80059c2 <_printf_float+0x276>
 8005958:	4a37      	ldr	r2, [pc, #220]	; (8005a38 <_printf_float+0x2ec>)
 800595a:	2301      	movs	r3, #1
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f af51 	beq.w	800580a <_printf_float+0xbe>
 8005968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800596c:	429a      	cmp	r2, r3
 800596e:	db02      	blt.n	8005976 <_printf_float+0x22a>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	07d8      	lsls	r0, r3, #31
 8005974:	d510      	bpl.n	8005998 <_printf_float+0x24c>
 8005976:	ee18 3a10 	vmov	r3, s16
 800597a:	4652      	mov	r2, sl
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af41 	beq.w	800580a <_printf_float+0xbe>
 8005988:	f04f 0800 	mov.w	r8, #0
 800598c:	f104 091a 	add.w	r9, r4, #26
 8005990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005992:	3b01      	subs	r3, #1
 8005994:	4543      	cmp	r3, r8
 8005996:	dc09      	bgt.n	80059ac <_printf_float+0x260>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	f100 8107 	bmi.w	8005bae <_printf_float+0x462>
 80059a0:	68e0      	ldr	r0, [r4, #12]
 80059a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a4:	4298      	cmp	r0, r3
 80059a6:	bfb8      	it	lt
 80059a8:	4618      	movlt	r0, r3
 80059aa:	e730      	b.n	800580e <_printf_float+0xc2>
 80059ac:	2301      	movs	r3, #1
 80059ae:	464a      	mov	r2, r9
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f af27 	beq.w	800580a <_printf_float+0xbe>
 80059bc:	f108 0801 	add.w	r8, r8, #1
 80059c0:	e7e6      	b.n	8005990 <_printf_float+0x244>
 80059c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc39      	bgt.n	8005a3c <_printf_float+0x2f0>
 80059c8:	4a1b      	ldr	r2, [pc, #108]	; (8005a38 <_printf_float+0x2ec>)
 80059ca:	2301      	movs	r3, #1
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af19 	beq.w	800580a <_printf_float+0xbe>
 80059d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059dc:	4313      	orrs	r3, r2
 80059de:	d102      	bne.n	80059e6 <_printf_float+0x29a>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	07d9      	lsls	r1, r3, #31
 80059e4:	d5d8      	bpl.n	8005998 <_printf_float+0x24c>
 80059e6:	ee18 3a10 	vmov	r3, s16
 80059ea:	4652      	mov	r2, sl
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f af09 	beq.w	800580a <_printf_float+0xbe>
 80059f8:	f04f 0900 	mov.w	r9, #0
 80059fc:	f104 0a1a 	add.w	sl, r4, #26
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	425b      	negs	r3, r3
 8005a04:	454b      	cmp	r3, r9
 8005a06:	dc01      	bgt.n	8005a0c <_printf_float+0x2c0>
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	e792      	b.n	8005932 <_printf_float+0x1e6>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4652      	mov	r2, sl
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f aef7 	beq.w	800580a <_printf_float+0xbe>
 8005a1c:	f109 0901 	add.w	r9, r9, #1
 8005a20:	e7ee      	b.n	8005a00 <_printf_float+0x2b4>
 8005a22:	bf00      	nop
 8005a24:	7fefffff 	.word	0x7fefffff
 8005a28:	08008684 	.word	0x08008684
 8005a2c:	08008688 	.word	0x08008688
 8005a30:	0800868c 	.word	0x0800868c
 8005a34:	08008690 	.word	0x08008690
 8005a38:	08008694 	.word	0x08008694
 8005a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bfa8      	it	ge
 8005a44:	461a      	movge	r2, r3
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	4691      	mov	r9, r2
 8005a4a:	dc37      	bgt.n	8005abc <_printf_float+0x370>
 8005a4c:	f04f 0b00 	mov.w	fp, #0
 8005a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a54:	f104 021a 	add.w	r2, r4, #26
 8005a58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	eba3 0309 	sub.w	r3, r3, r9
 8005a60:	455b      	cmp	r3, fp
 8005a62:	dc33      	bgt.n	8005acc <_printf_float+0x380>
 8005a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	db3b      	blt.n	8005ae4 <_printf_float+0x398>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	07da      	lsls	r2, r3, #31
 8005a70:	d438      	bmi.n	8005ae4 <_printf_float+0x398>
 8005a72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a76:	eba2 0903 	sub.w	r9, r2, r3
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	1ad2      	subs	r2, r2, r3
 8005a7e:	4591      	cmp	r9, r2
 8005a80:	bfa8      	it	ge
 8005a82:	4691      	movge	r9, r2
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	dc35      	bgt.n	8005af6 <_printf_float+0x3aa>
 8005a8a:	f04f 0800 	mov.w	r8, #0
 8005a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a92:	f104 0a1a 	add.w	sl, r4, #26
 8005a96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	eba3 0309 	sub.w	r3, r3, r9
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	f77f af79 	ble.w	8005998 <_printf_float+0x24c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f aeaa 	beq.w	800580a <_printf_float+0xbe>
 8005ab6:	f108 0801 	add.w	r8, r8, #1
 8005aba:	e7ec      	b.n	8005a96 <_printf_float+0x34a>
 8005abc:	4613      	mov	r3, r2
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d1c0      	bne.n	8005a4c <_printf_float+0x300>
 8005aca:	e69e      	b.n	800580a <_printf_float+0xbe>
 8005acc:	2301      	movs	r3, #1
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	9205      	str	r2, [sp, #20]
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f ae97 	beq.w	800580a <_printf_float+0xbe>
 8005adc:	9a05      	ldr	r2, [sp, #20]
 8005ade:	f10b 0b01 	add.w	fp, fp, #1
 8005ae2:	e7b9      	b.n	8005a58 <_printf_float+0x30c>
 8005ae4:	ee18 3a10 	vmov	r3, s16
 8005ae8:	4652      	mov	r2, sl
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1be      	bne.n	8005a72 <_printf_float+0x326>
 8005af4:	e689      	b.n	800580a <_printf_float+0xbe>
 8005af6:	9a05      	ldr	r2, [sp, #20]
 8005af8:	464b      	mov	r3, r9
 8005afa:	4442      	add	r2, r8
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	d1c1      	bne.n	8005a8a <_printf_float+0x33e>
 8005b06:	e680      	b.n	800580a <_printf_float+0xbe>
 8005b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b0a:	2a01      	cmp	r2, #1
 8005b0c:	dc01      	bgt.n	8005b12 <_printf_float+0x3c6>
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d53a      	bpl.n	8005b88 <_printf_float+0x43c>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4642      	mov	r2, r8
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f ae74 	beq.w	800580a <_printf_float+0xbe>
 8005b22:	ee18 3a10 	vmov	r3, s16
 8005b26:	4652      	mov	r2, sl
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f ae6b 	beq.w	800580a <_printf_float+0xbe>
 8005b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b40:	f7fa ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b44:	b9d8      	cbnz	r0, 8005b7e <_printf_float+0x432>
 8005b46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b4a:	f108 0201 	add.w	r2, r8, #1
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	d10e      	bne.n	8005b76 <_printf_float+0x42a>
 8005b58:	e657      	b.n	800580a <_printf_float+0xbe>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f ae50 	beq.w	800580a <_printf_float+0xbe>
 8005b6a:	f108 0801 	add.w	r8, r8, #1
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	3b01      	subs	r3, #1
 8005b72:	4543      	cmp	r3, r8
 8005b74:	dcf1      	bgt.n	8005b5a <_printf_float+0x40e>
 8005b76:	464b      	mov	r3, r9
 8005b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b7c:	e6da      	b.n	8005934 <_printf_float+0x1e8>
 8005b7e:	f04f 0800 	mov.w	r8, #0
 8005b82:	f104 0a1a 	add.w	sl, r4, #26
 8005b86:	e7f2      	b.n	8005b6e <_printf_float+0x422>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	e7df      	b.n	8005b4e <_printf_float+0x402>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	464a      	mov	r2, r9
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae36 	beq.w	800580a <_printf_float+0xbe>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ba6:	1a5b      	subs	r3, r3, r1
 8005ba8:	4543      	cmp	r3, r8
 8005baa:	dcf0      	bgt.n	8005b8e <_printf_float+0x442>
 8005bac:	e6f8      	b.n	80059a0 <_printf_float+0x254>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	f104 0919 	add.w	r9, r4, #25
 8005bb6:	e7f4      	b.n	8005ba2 <_printf_float+0x456>

08005bb8 <_printf_common>:
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	4699      	mov	r9, r3
 8005bc0:	688a      	ldr	r2, [r1, #8]
 8005bc2:	690b      	ldr	r3, [r1, #16]
 8005bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	bfb8      	it	lt
 8005bcc:	4613      	movlt	r3, r2
 8005bce:	6033      	str	r3, [r6, #0]
 8005bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b10a      	cbz	r2, 8005bde <_printf_common+0x26>
 8005bda:	3301      	adds	r3, #1
 8005bdc:	6033      	str	r3, [r6, #0]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0699      	lsls	r1, r3, #26
 8005be2:	bf42      	ittt	mi
 8005be4:	6833      	ldrmi	r3, [r6, #0]
 8005be6:	3302      	addmi	r3, #2
 8005be8:	6033      	strmi	r3, [r6, #0]
 8005bea:	6825      	ldr	r5, [r4, #0]
 8005bec:	f015 0506 	ands.w	r5, r5, #6
 8005bf0:	d106      	bne.n	8005c00 <_printf_common+0x48>
 8005bf2:	f104 0a19 	add.w	sl, r4, #25
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	6832      	ldr	r2, [r6, #0]
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dc26      	bgt.n	8005c4e <_printf_common+0x96>
 8005c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c04:	1e13      	subs	r3, r2, #0
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	bf18      	it	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	0692      	lsls	r2, r2, #26
 8005c0e:	d42b      	bmi.n	8005c68 <_printf_common+0xb0>
 8005c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c14:	4649      	mov	r1, r9
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d01e      	beq.n	8005c5c <_printf_common+0xa4>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	f003 0306 	and.w	r3, r3, #6
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	bf02      	ittt	eq
 8005c2a:	68e5      	ldreq	r5, [r4, #12]
 8005c2c:	6833      	ldreq	r3, [r6, #0]
 8005c2e:	1aed      	subeq	r5, r5, r3
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	bf0c      	ite	eq
 8005c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c38:	2500      	movne	r5, #0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	bfc4      	itt	gt
 8005c3e:	1a9b      	subgt	r3, r3, r2
 8005c40:	18ed      	addgt	r5, r5, r3
 8005c42:	2600      	movs	r6, #0
 8005c44:	341a      	adds	r4, #26
 8005c46:	42b5      	cmp	r5, r6
 8005c48:	d11a      	bne.n	8005c80 <_printf_common+0xc8>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e008      	b.n	8005c60 <_printf_common+0xa8>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	4649      	mov	r1, r9
 8005c54:	4638      	mov	r0, r7
 8005c56:	47c0      	blx	r8
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d103      	bne.n	8005c64 <_printf_common+0xac>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	3501      	adds	r5, #1
 8005c66:	e7c6      	b.n	8005bf6 <_printf_common+0x3e>
 8005c68:	18e1      	adds	r1, r4, r3
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	2030      	movs	r0, #48	; 0x30
 8005c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c72:	4422      	add	r2, r4
 8005c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	e7c7      	b.n	8005c10 <_printf_common+0x58>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4622      	mov	r2, r4
 8005c84:	4649      	mov	r1, r9
 8005c86:	4638      	mov	r0, r7
 8005c88:	47c0      	blx	r8
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d0e6      	beq.n	8005c5c <_printf_common+0xa4>
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7d9      	b.n	8005c46 <_printf_common+0x8e>
	...

08005c94 <_printf_i>:
 8005c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	7e0f      	ldrb	r7, [r1, #24]
 8005c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c9c:	2f78      	cmp	r7, #120	; 0x78
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005caa:	d807      	bhi.n	8005cbc <_printf_i+0x28>
 8005cac:	2f62      	cmp	r7, #98	; 0x62
 8005cae:	d80a      	bhi.n	8005cc6 <_printf_i+0x32>
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	f000 80d4 	beq.w	8005e5e <_printf_i+0x1ca>
 8005cb6:	2f58      	cmp	r7, #88	; 0x58
 8005cb8:	f000 80c0 	beq.w	8005e3c <_printf_i+0x1a8>
 8005cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cc4:	e03a      	b.n	8005d3c <_printf_i+0xa8>
 8005cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cca:	2b15      	cmp	r3, #21
 8005ccc:	d8f6      	bhi.n	8005cbc <_printf_i+0x28>
 8005cce:	a101      	add	r1, pc, #4	; (adr r1, 8005cd4 <_printf_i+0x40>)
 8005cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005cbd 	.word	0x08005cbd
 8005ce0:	08005cbd 	.word	0x08005cbd
 8005ce4:	08005cbd 	.word	0x08005cbd
 8005ce8:	08005cbd 	.word	0x08005cbd
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005cbd 	.word	0x08005cbd
 8005cf4:	08005cbd 	.word	0x08005cbd
 8005cf8:	08005cbd 	.word	0x08005cbd
 8005cfc:	08005cbd 	.word	0x08005cbd
 8005d00:	08005e45 	.word	0x08005e45
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005dff 	.word	0x08005dff
 8005d0c:	08005cbd 	.word	0x08005cbd
 8005d10:	08005cbd 	.word	0x08005cbd
 8005d14:	08005e67 	.word	0x08005e67
 8005d18:	08005cbd 	.word	0x08005cbd
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005cbd 	.word	0x08005cbd
 8005d24:	08005cbd 	.word	0x08005cbd
 8005d28:	08005e07 	.word	0x08005e07
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e09f      	b.n	8005e80 <_printf_i+0x1ec>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	0607      	lsls	r7, r0, #24
 8005d46:	f103 0104 	add.w	r1, r3, #4
 8005d4a:	6029      	str	r1, [r5, #0]
 8005d4c:	d501      	bpl.n	8005d52 <_printf_i+0xbe>
 8005d4e:	681e      	ldr	r6, [r3, #0]
 8005d50:	e003      	b.n	8005d5a <_printf_i+0xc6>
 8005d52:	0646      	lsls	r6, r0, #25
 8005d54:	d5fb      	bpl.n	8005d4e <_printf_i+0xba>
 8005d56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	da03      	bge.n	8005d66 <_printf_i+0xd2>
 8005d5e:	232d      	movs	r3, #45	; 0x2d
 8005d60:	4276      	negs	r6, r6
 8005d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d66:	485a      	ldr	r0, [pc, #360]	; (8005ed0 <_printf_i+0x23c>)
 8005d68:	230a      	movs	r3, #10
 8005d6a:	e012      	b.n	8005d92 <_printf_i+0xfe>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	1d19      	adds	r1, r3, #4
 8005d72:	6029      	str	r1, [r5, #0]
 8005d74:	0605      	lsls	r5, r0, #24
 8005d76:	d501      	bpl.n	8005d7c <_printf_i+0xe8>
 8005d78:	681e      	ldr	r6, [r3, #0]
 8005d7a:	e002      	b.n	8005d82 <_printf_i+0xee>
 8005d7c:	0641      	lsls	r1, r0, #25
 8005d7e:	d5fb      	bpl.n	8005d78 <_printf_i+0xe4>
 8005d80:	881e      	ldrh	r6, [r3, #0]
 8005d82:	4853      	ldr	r0, [pc, #332]	; (8005ed0 <_printf_i+0x23c>)
 8005d84:	2f6f      	cmp	r7, #111	; 0x6f
 8005d86:	bf0c      	ite	eq
 8005d88:	2308      	moveq	r3, #8
 8005d8a:	230a      	movne	r3, #10
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d92:	6865      	ldr	r5, [r4, #4]
 8005d94:	60a5      	str	r5, [r4, #8]
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	bfa2      	ittt	ge
 8005d9a:	6821      	ldrge	r1, [r4, #0]
 8005d9c:	f021 0104 	bicge.w	r1, r1, #4
 8005da0:	6021      	strge	r1, [r4, #0]
 8005da2:	b90e      	cbnz	r6, 8005da8 <_printf_i+0x114>
 8005da4:	2d00      	cmp	r5, #0
 8005da6:	d04b      	beq.n	8005e40 <_printf_i+0x1ac>
 8005da8:	4615      	mov	r5, r2
 8005daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dae:	fb03 6711 	mls	r7, r3, r1, r6
 8005db2:	5dc7      	ldrb	r7, [r0, r7]
 8005db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005db8:	4637      	mov	r7, r6
 8005dba:	42bb      	cmp	r3, r7
 8005dbc:	460e      	mov	r6, r1
 8005dbe:	d9f4      	bls.n	8005daa <_printf_i+0x116>
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d10b      	bne.n	8005ddc <_printf_i+0x148>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07de      	lsls	r6, r3, #31
 8005dc8:	d508      	bpl.n	8005ddc <_printf_i+0x148>
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	6861      	ldr	r1, [r4, #4]
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	bfde      	ittt	le
 8005dd2:	2330      	movle	r3, #48	; 0x30
 8005dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ddc:	1b52      	subs	r2, r2, r5
 8005dde:	6122      	str	r2, [r4, #16]
 8005de0:	f8cd a000 	str.w	sl, [sp]
 8005de4:	464b      	mov	r3, r9
 8005de6:	aa03      	add	r2, sp, #12
 8005de8:	4621      	mov	r1, r4
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7ff fee4 	bl	8005bb8 <_printf_common>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d14a      	bne.n	8005e8a <_printf_i+0x1f6>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	b004      	add	sp, #16
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	4833      	ldr	r0, [pc, #204]	; (8005ed4 <_printf_i+0x240>)
 8005e08:	2778      	movs	r7, #120	; 0x78
 8005e0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	6829      	ldr	r1, [r5, #0]
 8005e12:	061f      	lsls	r7, r3, #24
 8005e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0x18c>
 8005e1a:	065f      	lsls	r7, r3, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2b6      	uxthmi	r6, r6
 8005e20:	07df      	lsls	r7, r3, #31
 8005e22:	bf48      	it	mi
 8005e24:	f043 0320 	orrmi.w	r3, r3, #32
 8005e28:	6029      	str	r1, [r5, #0]
 8005e2a:	bf48      	it	mi
 8005e2c:	6023      	strmi	r3, [r4, #0]
 8005e2e:	b91e      	cbnz	r6, 8005e38 <_printf_i+0x1a4>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	2310      	movs	r3, #16
 8005e3a:	e7a7      	b.n	8005d8c <_printf_i+0xf8>
 8005e3c:	4824      	ldr	r0, [pc, #144]	; (8005ed0 <_printf_i+0x23c>)
 8005e3e:	e7e4      	b.n	8005e0a <_printf_i+0x176>
 8005e40:	4615      	mov	r5, r2
 8005e42:	e7bd      	b.n	8005dc0 <_printf_i+0x12c>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	6826      	ldr	r6, [r4, #0]
 8005e48:	6961      	ldr	r1, [r4, #20]
 8005e4a:	1d18      	adds	r0, r3, #4
 8005e4c:	6028      	str	r0, [r5, #0]
 8005e4e:	0635      	lsls	r5, r6, #24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0x1c4>
 8005e54:	6019      	str	r1, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <_printf_i+0x1ca>
 8005e58:	0670      	lsls	r0, r6, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0x1c0>
 8005e5c:	8019      	strh	r1, [r3, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	4615      	mov	r5, r2
 8005e64:	e7bc      	b.n	8005de0 <_printf_i+0x14c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f7fa f9ac 	bl	80001d0 <memchr>
 8005e78:	b108      	cbz	r0, 8005e7e <_printf_i+0x1ea>
 8005e7a:	1b40      	subs	r0, r0, r5
 8005e7c:	6060      	str	r0, [r4, #4]
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	2300      	movs	r3, #0
 8005e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e88:	e7aa      	b.n	8005de0 <_printf_i+0x14c>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	4649      	mov	r1, r9
 8005e90:	4640      	mov	r0, r8
 8005e92:	47d0      	blx	sl
 8005e94:	3001      	adds	r0, #1
 8005e96:	d0ad      	beq.n	8005df4 <_printf_i+0x160>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	079b      	lsls	r3, r3, #30
 8005e9c:	d413      	bmi.n	8005ec6 <_printf_i+0x232>
 8005e9e:	68e0      	ldr	r0, [r4, #12]
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	bfb8      	it	lt
 8005ea6:	4618      	movlt	r0, r3
 8005ea8:	e7a6      	b.n	8005df8 <_printf_i+0x164>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4632      	mov	r2, r6
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d09d      	beq.n	8005df4 <_printf_i+0x160>
 8005eb8:	3501      	adds	r5, #1
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	9903      	ldr	r1, [sp, #12]
 8005ebe:	1a5b      	subs	r3, r3, r1
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dcf2      	bgt.n	8005eaa <_printf_i+0x216>
 8005ec4:	e7eb      	b.n	8005e9e <_printf_i+0x20a>
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	f104 0619 	add.w	r6, r4, #25
 8005ecc:	e7f5      	b.n	8005eba <_printf_i+0x226>
 8005ece:	bf00      	nop
 8005ed0:	08008696 	.word	0x08008696
 8005ed4:	080086a7 	.word	0x080086a7

08005ed8 <std>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b510      	push	{r4, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	e9c0 3300 	strd	r3, r3, [r0]
 8005ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ee6:	6083      	str	r3, [r0, #8]
 8005ee8:	8181      	strh	r1, [r0, #12]
 8005eea:	6643      	str	r3, [r0, #100]	; 0x64
 8005eec:	81c2      	strh	r2, [r0, #14]
 8005eee:	6183      	str	r3, [r0, #24]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	305c      	adds	r0, #92	; 0x5c
 8005ef6:	f000 f914 	bl	8006122 <memset>
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <std+0x58>)
 8005efc:	6263      	str	r3, [r4, #36]	; 0x24
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <std+0x5c>)
 8005f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <std+0x60>)
 8005f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f06:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <std+0x64>)
 8005f08:	6323      	str	r3, [r4, #48]	; 0x30
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <std+0x68>)
 8005f0c:	6224      	str	r4, [r4, #32]
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d006      	beq.n	8005f20 <std+0x48>
 8005f12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f16:	4294      	cmp	r4, r2
 8005f18:	d002      	beq.n	8005f20 <std+0x48>
 8005f1a:	33d0      	adds	r3, #208	; 0xd0
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d105      	bne.n	8005f2c <std+0x54>
 8005f20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f000 b978 	b.w	800621c <__retarget_lock_init_recursive>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	bf00      	nop
 8005f30:	0800609d 	.word	0x0800609d
 8005f34:	080060bf 	.word	0x080060bf
 8005f38:	080060f7 	.word	0x080060f7
 8005f3c:	0800611b 	.word	0x0800611b
 8005f40:	2000427c 	.word	0x2000427c

08005f44 <stdio_exit_handler>:
 8005f44:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <stdio_exit_handler+0xc>)
 8005f46:	4903      	ldr	r1, [pc, #12]	; (8005f54 <stdio_exit_handler+0x10>)
 8005f48:	4803      	ldr	r0, [pc, #12]	; (8005f58 <stdio_exit_handler+0x14>)
 8005f4a:	f000 b869 	b.w	8006020 <_fwalk_sglue>
 8005f4e:	bf00      	nop
 8005f50:	20000010 	.word	0x20000010
 8005f54:	08007be9 	.word	0x08007be9
 8005f58:	2000001c 	.word	0x2000001c

08005f5c <cleanup_stdio>:
 8005f5c:	6841      	ldr	r1, [r0, #4]
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <cleanup_stdio+0x34>)
 8005f60:	4299      	cmp	r1, r3
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
 8005f66:	d001      	beq.n	8005f6c <cleanup_stdio+0x10>
 8005f68:	f001 fe3e 	bl	8007be8 <_fflush_r>
 8005f6c:	68a1      	ldr	r1, [r4, #8]
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <cleanup_stdio+0x38>)
 8005f70:	4299      	cmp	r1, r3
 8005f72:	d002      	beq.n	8005f7a <cleanup_stdio+0x1e>
 8005f74:	4620      	mov	r0, r4
 8005f76:	f001 fe37 	bl	8007be8 <_fflush_r>
 8005f7a:	68e1      	ldr	r1, [r4, #12]
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <cleanup_stdio+0x3c>)
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	d004      	beq.n	8005f8c <cleanup_stdio+0x30>
 8005f82:	4620      	mov	r0, r4
 8005f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f88:	f001 be2e 	b.w	8007be8 <_fflush_r>
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000427c 	.word	0x2000427c
 8005f94:	200042e4 	.word	0x200042e4
 8005f98:	2000434c 	.word	0x2000434c

08005f9c <global_stdio_init.part.0>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <global_stdio_init.part.0+0x30>)
 8005fa0:	4c0b      	ldr	r4, [pc, #44]	; (8005fd0 <global_stdio_init.part.0+0x34>)
 8005fa2:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <global_stdio_init.part.0+0x38>)
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2104      	movs	r1, #4
 8005fac:	f7ff ff94 	bl	8005ed8 <std>
 8005fb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	2109      	movs	r1, #9
 8005fb8:	f7ff ff8e 	bl	8005ed8 <std>
 8005fbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc6:	2112      	movs	r1, #18
 8005fc8:	f7ff bf86 	b.w	8005ed8 <std>
 8005fcc:	200043b4 	.word	0x200043b4
 8005fd0:	2000427c 	.word	0x2000427c
 8005fd4:	08005f45 	.word	0x08005f45

08005fd8 <__sfp_lock_acquire>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	; (8005fe0 <__sfp_lock_acquire+0x8>)
 8005fda:	f000 b920 	b.w	800621e <__retarget_lock_acquire_recursive>
 8005fde:	bf00      	nop
 8005fe0:	200043bd 	.word	0x200043bd

08005fe4 <__sfp_lock_release>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <__sfp_lock_release+0x8>)
 8005fe6:	f000 b91b 	b.w	8006220 <__retarget_lock_release_recursive>
 8005fea:	bf00      	nop
 8005fec:	200043bd 	.word	0x200043bd

08005ff0 <__sinit>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	f7ff fff0 	bl	8005fd8 <__sfp_lock_acquire>
 8005ff8:	6a23      	ldr	r3, [r4, #32]
 8005ffa:	b11b      	cbz	r3, 8006004 <__sinit+0x14>
 8005ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006000:	f7ff bff0 	b.w	8005fe4 <__sfp_lock_release>
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <__sinit+0x28>)
 8006006:	6223      	str	r3, [r4, #32]
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <__sinit+0x2c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f5      	bne.n	8005ffc <__sinit+0xc>
 8006010:	f7ff ffc4 	bl	8005f9c <global_stdio_init.part.0>
 8006014:	e7f2      	b.n	8005ffc <__sinit+0xc>
 8006016:	bf00      	nop
 8006018:	08005f5d 	.word	0x08005f5d
 800601c:	200043b4 	.word	0x200043b4

08006020 <_fwalk_sglue>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	4607      	mov	r7, r0
 8006026:	4688      	mov	r8, r1
 8006028:	4614      	mov	r4, r2
 800602a:	2600      	movs	r6, #0
 800602c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006030:	f1b9 0901 	subs.w	r9, r9, #1
 8006034:	d505      	bpl.n	8006042 <_fwalk_sglue+0x22>
 8006036:	6824      	ldr	r4, [r4, #0]
 8006038:	2c00      	cmp	r4, #0
 800603a:	d1f7      	bne.n	800602c <_fwalk_sglue+0xc>
 800603c:	4630      	mov	r0, r6
 800603e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d907      	bls.n	8006058 <_fwalk_sglue+0x38>
 8006048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800604c:	3301      	adds	r3, #1
 800604e:	d003      	beq.n	8006058 <_fwalk_sglue+0x38>
 8006050:	4629      	mov	r1, r5
 8006052:	4638      	mov	r0, r7
 8006054:	47c0      	blx	r8
 8006056:	4306      	orrs	r6, r0
 8006058:	3568      	adds	r5, #104	; 0x68
 800605a:	e7e9      	b.n	8006030 <_fwalk_sglue+0x10>

0800605c <siprintf>:
 800605c:	b40e      	push	{r1, r2, r3}
 800605e:	b500      	push	{lr}
 8006060:	b09c      	sub	sp, #112	; 0x70
 8006062:	ab1d      	add	r3, sp, #116	; 0x74
 8006064:	9002      	str	r0, [sp, #8]
 8006066:	9006      	str	r0, [sp, #24]
 8006068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800606c:	4809      	ldr	r0, [pc, #36]	; (8006094 <siprintf+0x38>)
 800606e:	9107      	str	r1, [sp, #28]
 8006070:	9104      	str	r1, [sp, #16]
 8006072:	4909      	ldr	r1, [pc, #36]	; (8006098 <siprintf+0x3c>)
 8006074:	f853 2b04 	ldr.w	r2, [r3], #4
 8006078:	9105      	str	r1, [sp, #20]
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	a902      	add	r1, sp, #8
 8006080:	f001 fc2e 	bl	80078e0 <_svfiprintf_r>
 8006084:	9b02      	ldr	r3, [sp, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	b01c      	add	sp, #112	; 0x70
 800608c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006090:	b003      	add	sp, #12
 8006092:	4770      	bx	lr
 8006094:	20000068 	.word	0x20000068
 8006098:	ffff0208 	.word	0xffff0208

0800609c <__sread>:
 800609c:	b510      	push	{r4, lr}
 800609e:	460c      	mov	r4, r1
 80060a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a4:	f000 f86c 	bl	8006180 <_read_r>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	bfab      	itete	ge
 80060ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ae:	89a3      	ldrhlt	r3, [r4, #12]
 80060b0:	181b      	addge	r3, r3, r0
 80060b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060b6:	bfac      	ite	ge
 80060b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ba:	81a3      	strhlt	r3, [r4, #12]
 80060bc:	bd10      	pop	{r4, pc}

080060be <__swrite>:
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	461f      	mov	r7, r3
 80060c4:	898b      	ldrh	r3, [r1, #12]
 80060c6:	05db      	lsls	r3, r3, #23
 80060c8:	4605      	mov	r5, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	4616      	mov	r6, r2
 80060ce:	d505      	bpl.n	80060dc <__swrite+0x1e>
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	2302      	movs	r3, #2
 80060d6:	2200      	movs	r2, #0
 80060d8:	f000 f840 	bl	800615c <_lseek_r>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	4628      	mov	r0, r5
 80060ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	f000 b857 	b.w	80061a4 <_write_r>

080060f6 <__sseek>:
 80060f6:	b510      	push	{r4, lr}
 80060f8:	460c      	mov	r4, r1
 80060fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fe:	f000 f82d 	bl	800615c <_lseek_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	bf15      	itete	ne
 8006108:	6560      	strne	r0, [r4, #84]	; 0x54
 800610a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800610e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006112:	81a3      	strheq	r3, [r4, #12]
 8006114:	bf18      	it	ne
 8006116:	81a3      	strhne	r3, [r4, #12]
 8006118:	bd10      	pop	{r4, pc}

0800611a <__sclose>:
 800611a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611e:	f000 b80d 	b.w	800613c <_close_r>

08006122 <memset>:
 8006122:	4402      	add	r2, r0
 8006124:	4603      	mov	r3, r0
 8006126:	4293      	cmp	r3, r2
 8006128:	d100      	bne.n	800612c <memset+0xa>
 800612a:	4770      	bx	lr
 800612c:	f803 1b01 	strb.w	r1, [r3], #1
 8006130:	e7f9      	b.n	8006126 <memset+0x4>
	...

08006134 <_localeconv_r>:
 8006134:	4800      	ldr	r0, [pc, #0]	; (8006138 <_localeconv_r+0x4>)
 8006136:	4770      	bx	lr
 8006138:	2000015c 	.word	0x2000015c

0800613c <_close_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	; (8006158 <_close_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb fc3e 	bl	80019c8 <_close>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_close_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_close_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200043b8 	.word	0x200043b8

0800615c <_lseek_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d07      	ldr	r5, [pc, #28]	; (800617c <_lseek_r+0x20>)
 8006160:	4604      	mov	r4, r0
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	2200      	movs	r2, #0
 8006168:	602a      	str	r2, [r5, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fb fc53 	bl	8001a16 <_lseek>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_lseek_r+0x1e>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_lseek_r+0x1e>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	200043b8 	.word	0x200043b8

08006180 <_read_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d07      	ldr	r5, [pc, #28]	; (80061a0 <_read_r+0x20>)
 8006184:	4604      	mov	r4, r0
 8006186:	4608      	mov	r0, r1
 8006188:	4611      	mov	r1, r2
 800618a:	2200      	movs	r2, #0
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fb fbe1 	bl	8001956 <_read>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_read_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_read_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	200043b8 	.word	0x200043b8

080061a4 <_write_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d07      	ldr	r5, [pc, #28]	; (80061c4 <_write_r+0x20>)
 80061a8:	4604      	mov	r4, r0
 80061aa:	4608      	mov	r0, r1
 80061ac:	4611      	mov	r1, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	602a      	str	r2, [r5, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f7fb fbec 	bl	8001990 <_write>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_write_r+0x1e>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_write_r+0x1e>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	200043b8 	.word	0x200043b8

080061c8 <__errno>:
 80061c8:	4b01      	ldr	r3, [pc, #4]	; (80061d0 <__errno+0x8>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000068 	.word	0x20000068

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4d0d      	ldr	r5, [pc, #52]	; (800620c <__libc_init_array+0x38>)
 80061d8:	4c0d      	ldr	r4, [pc, #52]	; (8006210 <__libc_init_array+0x3c>)
 80061da:	1b64      	subs	r4, r4, r5
 80061dc:	10a4      	asrs	r4, r4, #2
 80061de:	2600      	movs	r6, #0
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	4d0b      	ldr	r5, [pc, #44]	; (8006214 <__libc_init_array+0x40>)
 80061e6:	4c0c      	ldr	r4, [pc, #48]	; (8006218 <__libc_init_array+0x44>)
 80061e8:	f002 fa12 	bl	8008610 <_init>
 80061ec:	1b64      	subs	r4, r4, r5
 80061ee:	10a4      	asrs	r4, r4, #2
 80061f0:	2600      	movs	r6, #0
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	4798      	blx	r3
 80061fe:	3601      	adds	r6, #1
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	4798      	blx	r3
 8006208:	3601      	adds	r6, #1
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	08008a34 	.word	0x08008a34
 8006210:	08008a34 	.word	0x08008a34
 8006214:	08008a34 	.word	0x08008a34
 8006218:	08008a38 	.word	0x08008a38

0800621c <__retarget_lock_init_recursive>:
 800621c:	4770      	bx	lr

0800621e <__retarget_lock_acquire_recursive>:
 800621e:	4770      	bx	lr

08006220 <__retarget_lock_release_recursive>:
 8006220:	4770      	bx	lr

08006222 <memcpy>:
 8006222:	440a      	add	r2, r1
 8006224:	4291      	cmp	r1, r2
 8006226:	f100 33ff 	add.w	r3, r0, #4294967295
 800622a:	d100      	bne.n	800622e <memcpy+0xc>
 800622c:	4770      	bx	lr
 800622e:	b510      	push	{r4, lr}
 8006230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006238:	4291      	cmp	r1, r2
 800623a:	d1f9      	bne.n	8006230 <memcpy+0xe>
 800623c:	bd10      	pop	{r4, pc}

0800623e <quorem>:
 800623e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006242:	6903      	ldr	r3, [r0, #16]
 8006244:	690c      	ldr	r4, [r1, #16]
 8006246:	42a3      	cmp	r3, r4
 8006248:	4607      	mov	r7, r0
 800624a:	db7e      	blt.n	800634a <quorem+0x10c>
 800624c:	3c01      	subs	r4, #1
 800624e:	f101 0814 	add.w	r8, r1, #20
 8006252:	f100 0514 	add.w	r5, r0, #20
 8006256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006264:	3301      	adds	r3, #1
 8006266:	429a      	cmp	r2, r3
 8006268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800626c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006270:	fbb2 f6f3 	udiv	r6, r2, r3
 8006274:	d331      	bcc.n	80062da <quorem+0x9c>
 8006276:	f04f 0e00 	mov.w	lr, #0
 800627a:	4640      	mov	r0, r8
 800627c:	46ac      	mov	ip, r5
 800627e:	46f2      	mov	sl, lr
 8006280:	f850 2b04 	ldr.w	r2, [r0], #4
 8006284:	b293      	uxth	r3, r2
 8006286:	fb06 e303 	mla	r3, r6, r3, lr
 800628a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800628e:	0c1a      	lsrs	r2, r3, #16
 8006290:	b29b      	uxth	r3, r3
 8006292:	ebaa 0303 	sub.w	r3, sl, r3
 8006296:	f8dc a000 	ldr.w	sl, [ip]
 800629a:	fa13 f38a 	uxtah	r3, r3, sl
 800629e:	fb06 220e 	mla	r2, r6, lr, r2
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062aa:	b292      	uxth	r2, r2
 80062ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80062b8:	4581      	cmp	r9, r0
 80062ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062be:	f84c 3b04 	str.w	r3, [ip], #4
 80062c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062c6:	d2db      	bcs.n	8006280 <quorem+0x42>
 80062c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80062cc:	b92b      	cbnz	r3, 80062da <quorem+0x9c>
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	429d      	cmp	r5, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	d32c      	bcc.n	8006332 <quorem+0xf4>
 80062d8:	613c      	str	r4, [r7, #16]
 80062da:	4638      	mov	r0, r7
 80062dc:	f001 f9a6 	bl	800762c <__mcmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	db22      	blt.n	800632a <quorem+0xec>
 80062e4:	3601      	adds	r6, #1
 80062e6:	4629      	mov	r1, r5
 80062e8:	2000      	movs	r0, #0
 80062ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80062ee:	f8d1 c000 	ldr.w	ip, [r1]
 80062f2:	b293      	uxth	r3, r2
 80062f4:	1ac3      	subs	r3, r0, r3
 80062f6:	0c12      	lsrs	r2, r2, #16
 80062f8:	fa13 f38c 	uxtah	r3, r3, ip
 80062fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006304:	b29b      	uxth	r3, r3
 8006306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800630a:	45c1      	cmp	r9, r8
 800630c:	f841 3b04 	str.w	r3, [r1], #4
 8006310:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006314:	d2e9      	bcs.n	80062ea <quorem+0xac>
 8006316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800631a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800631e:	b922      	cbnz	r2, 800632a <quorem+0xec>
 8006320:	3b04      	subs	r3, #4
 8006322:	429d      	cmp	r5, r3
 8006324:	461a      	mov	r2, r3
 8006326:	d30a      	bcc.n	800633e <quorem+0x100>
 8006328:	613c      	str	r4, [r7, #16]
 800632a:	4630      	mov	r0, r6
 800632c:	b003      	add	sp, #12
 800632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	3b04      	subs	r3, #4
 8006336:	2a00      	cmp	r2, #0
 8006338:	d1ce      	bne.n	80062d8 <quorem+0x9a>
 800633a:	3c01      	subs	r4, #1
 800633c:	e7c9      	b.n	80062d2 <quorem+0x94>
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	3b04      	subs	r3, #4
 8006342:	2a00      	cmp	r2, #0
 8006344:	d1f0      	bne.n	8006328 <quorem+0xea>
 8006346:	3c01      	subs	r4, #1
 8006348:	e7eb      	b.n	8006322 <quorem+0xe4>
 800634a:	2000      	movs	r0, #0
 800634c:	e7ee      	b.n	800632c <quorem+0xee>
	...

08006350 <_dtoa_r>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b04 	vpush	{d8-d9}
 8006358:	69c5      	ldr	r5, [r0, #28]
 800635a:	b093      	sub	sp, #76	; 0x4c
 800635c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006360:	ec57 6b10 	vmov	r6, r7, d0
 8006364:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006368:	9107      	str	r1, [sp, #28]
 800636a:	4604      	mov	r4, r0
 800636c:	920a      	str	r2, [sp, #40]	; 0x28
 800636e:	930d      	str	r3, [sp, #52]	; 0x34
 8006370:	b975      	cbnz	r5, 8006390 <_dtoa_r+0x40>
 8006372:	2010      	movs	r0, #16
 8006374:	f000 fe2a 	bl	8006fcc <malloc>
 8006378:	4602      	mov	r2, r0
 800637a:	61e0      	str	r0, [r4, #28]
 800637c:	b920      	cbnz	r0, 8006388 <_dtoa_r+0x38>
 800637e:	4bae      	ldr	r3, [pc, #696]	; (8006638 <_dtoa_r+0x2e8>)
 8006380:	21ef      	movs	r1, #239	; 0xef
 8006382:	48ae      	ldr	r0, [pc, #696]	; (800663c <_dtoa_r+0x2ec>)
 8006384:	f001 fc82 	bl	8007c8c <__assert_func>
 8006388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800638c:	6005      	str	r5, [r0, #0]
 800638e:	60c5      	str	r5, [r0, #12]
 8006390:	69e3      	ldr	r3, [r4, #28]
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	b151      	cbz	r1, 80063ac <_dtoa_r+0x5c>
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	604a      	str	r2, [r1, #4]
 800639a:	2301      	movs	r3, #1
 800639c:	4093      	lsls	r3, r2
 800639e:	608b      	str	r3, [r1, #8]
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 ff07 	bl	80071b4 <_Bfree>
 80063a6:	69e3      	ldr	r3, [r4, #28]
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	1e3b      	subs	r3, r7, #0
 80063ae:	bfbb      	ittet	lt
 80063b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	9303      	strlt	r3, [sp, #12]
 80063b6:	2300      	movge	r3, #0
 80063b8:	2201      	movlt	r2, #1
 80063ba:	bfac      	ite	ge
 80063bc:	f8c8 3000 	strge.w	r3, [r8]
 80063c0:	f8c8 2000 	strlt.w	r2, [r8]
 80063c4:	4b9e      	ldr	r3, [pc, #632]	; (8006640 <_dtoa_r+0x2f0>)
 80063c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063ca:	ea33 0308 	bics.w	r3, r3, r8
 80063ce:	d11b      	bne.n	8006408 <_dtoa_r+0xb8>
 80063d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063dc:	4333      	orrs	r3, r6
 80063de:	f000 8593 	beq.w	8006f08 <_dtoa_r+0xbb8>
 80063e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e4:	b963      	cbnz	r3, 8006400 <_dtoa_r+0xb0>
 80063e6:	4b97      	ldr	r3, [pc, #604]	; (8006644 <_dtoa_r+0x2f4>)
 80063e8:	e027      	b.n	800643a <_dtoa_r+0xea>
 80063ea:	4b97      	ldr	r3, [pc, #604]	; (8006648 <_dtoa_r+0x2f8>)
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	b013      	add	sp, #76	; 0x4c
 80063f8:	ecbd 8b04 	vpop	{d8-d9}
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006400:	4b90      	ldr	r3, [pc, #576]	; (8006644 <_dtoa_r+0x2f4>)
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	3303      	adds	r3, #3
 8006406:	e7f3      	b.n	80063f0 <_dtoa_r+0xa0>
 8006408:	ed9d 7b02 	vldr	d7, [sp, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	ec51 0b17 	vmov	r0, r1, d7
 8006412:	eeb0 8a47 	vmov.f32	s16, s14
 8006416:	eef0 8a67 	vmov.f32	s17, s15
 800641a:	2300      	movs	r3, #0
 800641c:	f7fa fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006420:	4681      	mov	r9, r0
 8006422:	b160      	cbz	r0, 800643e <_dtoa_r+0xee>
 8006424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006426:	2301      	movs	r3, #1
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8568 	beq.w	8006f02 <_dtoa_r+0xbb2>
 8006432:	4b86      	ldr	r3, [pc, #536]	; (800664c <_dtoa_r+0x2fc>)
 8006434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	3b01      	subs	r3, #1
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	e7da      	b.n	80063f4 <_dtoa_r+0xa4>
 800643e:	aa10      	add	r2, sp, #64	; 0x40
 8006440:	a911      	add	r1, sp, #68	; 0x44
 8006442:	4620      	mov	r0, r4
 8006444:	eeb0 0a48 	vmov.f32	s0, s16
 8006448:	eef0 0a68 	vmov.f32	s1, s17
 800644c:	f001 f994 	bl	8007778 <__d2b>
 8006450:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006454:	4682      	mov	sl, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	d07f      	beq.n	800655a <_dtoa_r+0x20a>
 800645a:	ee18 3a90 	vmov	r3, s17
 800645e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006462:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006466:	ec51 0b18 	vmov	r0, r1, d8
 800646a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800646e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006472:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006476:	4619      	mov	r1, r3
 8006478:	2200      	movs	r2, #0
 800647a:	4b75      	ldr	r3, [pc, #468]	; (8006650 <_dtoa_r+0x300>)
 800647c:	f7f9 ff04 	bl	8000288 <__aeabi_dsub>
 8006480:	a367      	add	r3, pc, #412	; (adr r3, 8006620 <_dtoa_r+0x2d0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	a367      	add	r3, pc, #412	; (adr r3, 8006628 <_dtoa_r+0x2d8>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7f9 fefc 	bl	800028c <__adddf3>
 8006494:	4606      	mov	r6, r0
 8006496:	4628      	mov	r0, r5
 8006498:	460f      	mov	r7, r1
 800649a:	f7fa f843 	bl	8000524 <__aeabi_i2d>
 800649e:	a364      	add	r3, pc, #400	; (adr r3, 8006630 <_dtoa_r+0x2e0>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7f9 feec 	bl	800028c <__adddf3>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	f7fa fb4e 	bl	8000b58 <__aeabi_d2iz>
 80064bc:	2200      	movs	r2, #0
 80064be:	4683      	mov	fp, r0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4630      	mov	r0, r6
 80064c4:	4639      	mov	r1, r7
 80064c6:	f7fa fb09 	bl	8000adc <__aeabi_dcmplt>
 80064ca:	b148      	cbz	r0, 80064e0 <_dtoa_r+0x190>
 80064cc:	4658      	mov	r0, fp
 80064ce:	f7fa f829 	bl	8000524 <__aeabi_i2d>
 80064d2:	4632      	mov	r2, r6
 80064d4:	463b      	mov	r3, r7
 80064d6:	f7fa faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80064da:	b908      	cbnz	r0, 80064e0 <_dtoa_r+0x190>
 80064dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064e0:	f1bb 0f16 	cmp.w	fp, #22
 80064e4:	d857      	bhi.n	8006596 <_dtoa_r+0x246>
 80064e6:	4b5b      	ldr	r3, [pc, #364]	; (8006654 <_dtoa_r+0x304>)
 80064e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	ec51 0b18 	vmov	r0, r1, d8
 80064f4:	f7fa faf2 	bl	8000adc <__aeabi_dcmplt>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d04e      	beq.n	800659a <_dtoa_r+0x24a>
 80064fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006500:	2300      	movs	r3, #0
 8006502:	930c      	str	r3, [sp, #48]	; 0x30
 8006504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006506:	1b5b      	subs	r3, r3, r5
 8006508:	1e5a      	subs	r2, r3, #1
 800650a:	bf45      	ittet	mi
 800650c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006510:	9305      	strmi	r3, [sp, #20]
 8006512:	2300      	movpl	r3, #0
 8006514:	2300      	movmi	r3, #0
 8006516:	9206      	str	r2, [sp, #24]
 8006518:	bf54      	ite	pl
 800651a:	9305      	strpl	r3, [sp, #20]
 800651c:	9306      	strmi	r3, [sp, #24]
 800651e:	f1bb 0f00 	cmp.w	fp, #0
 8006522:	db3c      	blt.n	800659e <_dtoa_r+0x24e>
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800652a:	445b      	add	r3, fp
 800652c:	9306      	str	r3, [sp, #24]
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d868      	bhi.n	800660a <_dtoa_r+0x2ba>
 8006538:	2b05      	cmp	r3, #5
 800653a:	bfc4      	itt	gt
 800653c:	3b04      	subgt	r3, #4
 800653e:	9307      	strgt	r3, [sp, #28]
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	f1a3 0302 	sub.w	r3, r3, #2
 8006546:	bfcc      	ite	gt
 8006548:	2500      	movgt	r5, #0
 800654a:	2501      	movle	r5, #1
 800654c:	2b03      	cmp	r3, #3
 800654e:	f200 8085 	bhi.w	800665c <_dtoa_r+0x30c>
 8006552:	e8df f003 	tbb	[pc, r3]
 8006556:	3b2e      	.short	0x3b2e
 8006558:	5839      	.short	0x5839
 800655a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800655e:	441d      	add	r5, r3
 8006560:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006564:	2b20      	cmp	r3, #32
 8006566:	bfc1      	itttt	gt
 8006568:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800656c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006570:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006574:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006578:	bfd6      	itet	le
 800657a:	f1c3 0320 	rsble	r3, r3, #32
 800657e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006582:	fa06 f003 	lslle.w	r0, r6, r3
 8006586:	f7f9 ffbd 	bl	8000504 <__aeabi_ui2d>
 800658a:	2201      	movs	r2, #1
 800658c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006590:	3d01      	subs	r5, #1
 8006592:	920e      	str	r2, [sp, #56]	; 0x38
 8006594:	e76f      	b.n	8006476 <_dtoa_r+0x126>
 8006596:	2301      	movs	r3, #1
 8006598:	e7b3      	b.n	8006502 <_dtoa_r+0x1b2>
 800659a:	900c      	str	r0, [sp, #48]	; 0x30
 800659c:	e7b2      	b.n	8006504 <_dtoa_r+0x1b4>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	eba3 030b 	sub.w	r3, r3, fp
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	f1cb 0300 	rsb	r3, fp, #0
 80065aa:	9308      	str	r3, [sp, #32]
 80065ac:	2300      	movs	r3, #0
 80065ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b0:	e7bf      	b.n	8006532 <_dtoa_r+0x1e2>
 80065b2:	2300      	movs	r3, #0
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dc52      	bgt.n	8006662 <_dtoa_r+0x312>
 80065bc:	2301      	movs	r3, #1
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	461a      	mov	r2, r3
 80065c4:	920a      	str	r2, [sp, #40]	; 0x28
 80065c6:	e00b      	b.n	80065e0 <_dtoa_r+0x290>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7f3      	b.n	80065b4 <_dtoa_r+0x264>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d2:	445b      	add	r3, fp
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	bfb8      	it	lt
 80065de:	2301      	movlt	r3, #1
 80065e0:	69e0      	ldr	r0, [r4, #28]
 80065e2:	2100      	movs	r1, #0
 80065e4:	2204      	movs	r2, #4
 80065e6:	f102 0614 	add.w	r6, r2, #20
 80065ea:	429e      	cmp	r6, r3
 80065ec:	d93d      	bls.n	800666a <_dtoa_r+0x31a>
 80065ee:	6041      	str	r1, [r0, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fd9f 	bl	8007134 <_Balloc>
 80065f6:	9000      	str	r0, [sp, #0]
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d139      	bne.n	8006670 <_dtoa_r+0x320>
 80065fc:	4b16      	ldr	r3, [pc, #88]	; (8006658 <_dtoa_r+0x308>)
 80065fe:	4602      	mov	r2, r0
 8006600:	f240 11af 	movw	r1, #431	; 0x1af
 8006604:	e6bd      	b.n	8006382 <_dtoa_r+0x32>
 8006606:	2301      	movs	r3, #1
 8006608:	e7e1      	b.n	80065ce <_dtoa_r+0x27e>
 800660a:	2501      	movs	r5, #1
 800660c:	2300      	movs	r3, #0
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	9509      	str	r5, [sp, #36]	; 0x24
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	2200      	movs	r2, #0
 800661c:	2312      	movs	r3, #18
 800661e:	e7d1      	b.n	80065c4 <_dtoa_r+0x274>
 8006620:	636f4361 	.word	0x636f4361
 8006624:	3fd287a7 	.word	0x3fd287a7
 8006628:	8b60c8b3 	.word	0x8b60c8b3
 800662c:	3fc68a28 	.word	0x3fc68a28
 8006630:	509f79fb 	.word	0x509f79fb
 8006634:	3fd34413 	.word	0x3fd34413
 8006638:	080086c5 	.word	0x080086c5
 800663c:	080086dc 	.word	0x080086dc
 8006640:	7ff00000 	.word	0x7ff00000
 8006644:	080086c1 	.word	0x080086c1
 8006648:	080086b8 	.word	0x080086b8
 800664c:	08008695 	.word	0x08008695
 8006650:	3ff80000 	.word	0x3ff80000
 8006654:	080087c8 	.word	0x080087c8
 8006658:	08008734 	.word	0x08008734
 800665c:	2301      	movs	r3, #1
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	e7d7      	b.n	8006612 <_dtoa_r+0x2c2>
 8006662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	e7ba      	b.n	80065e0 <_dtoa_r+0x290>
 800666a:	3101      	adds	r1, #1
 800666c:	0052      	lsls	r2, r2, #1
 800666e:	e7ba      	b.n	80065e6 <_dtoa_r+0x296>
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	9a00      	ldr	r2, [sp, #0]
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	2b0e      	cmp	r3, #14
 800667a:	f200 80a8 	bhi.w	80067ce <_dtoa_r+0x47e>
 800667e:	2d00      	cmp	r5, #0
 8006680:	f000 80a5 	beq.w	80067ce <_dtoa_r+0x47e>
 8006684:	f1bb 0f00 	cmp.w	fp, #0
 8006688:	dd38      	ble.n	80066fc <_dtoa_r+0x3ac>
 800668a:	4bc0      	ldr	r3, [pc, #768]	; (800698c <_dtoa_r+0x63c>)
 800668c:	f00b 020f 	and.w	r2, fp, #15
 8006690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006694:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006698:	e9d3 6700 	ldrd	r6, r7, [r3]
 800669c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80066a0:	d019      	beq.n	80066d6 <_dtoa_r+0x386>
 80066a2:	4bbb      	ldr	r3, [pc, #748]	; (8006990 <_dtoa_r+0x640>)
 80066a4:	ec51 0b18 	vmov	r0, r1, d8
 80066a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066ac:	f7fa f8ce 	bl	800084c <__aeabi_ddiv>
 80066b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b4:	f008 080f 	and.w	r8, r8, #15
 80066b8:	2503      	movs	r5, #3
 80066ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006990 <_dtoa_r+0x640>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d10a      	bne.n	80066da <_dtoa_r+0x38a>
 80066c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c8:	4632      	mov	r2, r6
 80066ca:	463b      	mov	r3, r7
 80066cc:	f7fa f8be 	bl	800084c <__aeabi_ddiv>
 80066d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d4:	e02b      	b.n	800672e <_dtoa_r+0x3de>
 80066d6:	2502      	movs	r5, #2
 80066d8:	e7ef      	b.n	80066ba <_dtoa_r+0x36a>
 80066da:	f018 0f01 	tst.w	r8, #1
 80066de:	d008      	beq.n	80066f2 <_dtoa_r+0x3a2>
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	3501      	adds	r5, #1
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066f6:	f109 0908 	add.w	r9, r9, #8
 80066fa:	e7e0      	b.n	80066be <_dtoa_r+0x36e>
 80066fc:	f000 809f 	beq.w	800683e <_dtoa_r+0x4ee>
 8006700:	f1cb 0600 	rsb	r6, fp, #0
 8006704:	4ba1      	ldr	r3, [pc, #644]	; (800698c <_dtoa_r+0x63c>)
 8006706:	4fa2      	ldr	r7, [pc, #648]	; (8006990 <_dtoa_r+0x640>)
 8006708:	f006 020f 	and.w	r2, r6, #15
 800670c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	ec51 0b18 	vmov	r0, r1, d8
 8006718:	f7f9 ff6e 	bl	80005f8 <__aeabi_dmul>
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	1136      	asrs	r6, r6, #4
 8006722:	2300      	movs	r3, #0
 8006724:	2502      	movs	r5, #2
 8006726:	2e00      	cmp	r6, #0
 8006728:	d17e      	bne.n	8006828 <_dtoa_r+0x4d8>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1d0      	bne.n	80066d0 <_dtoa_r+0x380>
 800672e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006730:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8084 	beq.w	8006842 <_dtoa_r+0x4f2>
 800673a:	4b96      	ldr	r3, [pc, #600]	; (8006994 <_dtoa_r+0x644>)
 800673c:	2200      	movs	r2, #0
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7fa f9cb 	bl	8000adc <__aeabi_dcmplt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d07b      	beq.n	8006842 <_dtoa_r+0x4f2>
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d078      	beq.n	8006842 <_dtoa_r+0x4f2>
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd39      	ble.n	80067ca <_dtoa_r+0x47a>
 8006756:	4b90      	ldr	r3, [pc, #576]	; (8006998 <_dtoa_r+0x648>)
 8006758:	2200      	movs	r2, #0
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006766:	9e01      	ldr	r6, [sp, #4]
 8006768:	f10b 37ff 	add.w	r7, fp, #4294967295
 800676c:	3501      	adds	r5, #1
 800676e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006772:	4628      	mov	r0, r5
 8006774:	f7f9 fed6 	bl	8000524 <__aeabi_i2d>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	4b86      	ldr	r3, [pc, #536]	; (800699c <_dtoa_r+0x64c>)
 8006782:	2200      	movs	r2, #0
 8006784:	f7f9 fd82 	bl	800028c <__adddf3>
 8006788:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	2e00      	cmp	r6, #0
 8006794:	d158      	bne.n	8006848 <_dtoa_r+0x4f8>
 8006796:	4b82      	ldr	r3, [pc, #520]	; (80069a0 <_dtoa_r+0x650>)
 8006798:	2200      	movs	r2, #0
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fd73 	bl	8000288 <__aeabi_dsub>
 80067a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a6:	4680      	mov	r8, r0
 80067a8:	4689      	mov	r9, r1
 80067aa:	f7fa f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f040 8296 	bne.w	8006ce0 <_dtoa_r+0x990>
 80067b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80067b8:	4640      	mov	r0, r8
 80067ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067be:	4649      	mov	r1, r9
 80067c0:	f7fa f98c 	bl	8000adc <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 8289 	bne.w	8006cdc <_dtoa_r+0x98c>
 80067ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80067ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f2c0 814e 	blt.w	8006a72 <_dtoa_r+0x722>
 80067d6:	f1bb 0f0e 	cmp.w	fp, #14
 80067da:	f300 814a 	bgt.w	8006a72 <_dtoa_r+0x722>
 80067de:	4b6b      	ldr	r3, [pc, #428]	; (800698c <_dtoa_r+0x63c>)
 80067e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f280 80dc 	bge.w	80069a8 <_dtoa_r+0x658>
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f300 80d8 	bgt.w	80069a8 <_dtoa_r+0x658>
 80067f8:	f040 826f 	bne.w	8006cda <_dtoa_r+0x98a>
 80067fc:	4b68      	ldr	r3, [pc, #416]	; (80069a0 <_dtoa_r+0x650>)
 80067fe:	2200      	movs	r2, #0
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800680c:	f7fa f97a 	bl	8000b04 <__aeabi_dcmpge>
 8006810:	9e04      	ldr	r6, [sp, #16]
 8006812:	4637      	mov	r7, r6
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 8245 	bne.w	8006ca4 <_dtoa_r+0x954>
 800681a:	9d00      	ldr	r5, [sp, #0]
 800681c:	2331      	movs	r3, #49	; 0x31
 800681e:	f805 3b01 	strb.w	r3, [r5], #1
 8006822:	f10b 0b01 	add.w	fp, fp, #1
 8006826:	e241      	b.n	8006cac <_dtoa_r+0x95c>
 8006828:	07f2      	lsls	r2, r6, #31
 800682a:	d505      	bpl.n	8006838 <_dtoa_r+0x4e8>
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	3501      	adds	r5, #1
 8006836:	2301      	movs	r3, #1
 8006838:	1076      	asrs	r6, r6, #1
 800683a:	3708      	adds	r7, #8
 800683c:	e773      	b.n	8006726 <_dtoa_r+0x3d6>
 800683e:	2502      	movs	r5, #2
 8006840:	e775      	b.n	800672e <_dtoa_r+0x3de>
 8006842:	9e04      	ldr	r6, [sp, #16]
 8006844:	465f      	mov	r7, fp
 8006846:	e792      	b.n	800676e <_dtoa_r+0x41e>
 8006848:	9900      	ldr	r1, [sp, #0]
 800684a:	4b50      	ldr	r3, [pc, #320]	; (800698c <_dtoa_r+0x63c>)
 800684c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006850:	4431      	add	r1, r6
 8006852:	9102      	str	r1, [sp, #8]
 8006854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006856:	eeb0 9a47 	vmov.f32	s18, s14
 800685a:	eef0 9a67 	vmov.f32	s19, s15
 800685e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006862:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006866:	2900      	cmp	r1, #0
 8006868:	d044      	beq.n	80068f4 <_dtoa_r+0x5a4>
 800686a:	494e      	ldr	r1, [pc, #312]	; (80069a4 <_dtoa_r+0x654>)
 800686c:	2000      	movs	r0, #0
 800686e:	f7f9 ffed 	bl	800084c <__aeabi_ddiv>
 8006872:	ec53 2b19 	vmov	r2, r3, d9
 8006876:	f7f9 fd07 	bl	8000288 <__aeabi_dsub>
 800687a:	9d00      	ldr	r5, [sp, #0]
 800687c:	ec41 0b19 	vmov	d9, r0, r1
 8006880:	4649      	mov	r1, r9
 8006882:	4640      	mov	r0, r8
 8006884:	f7fa f968 	bl	8000b58 <__aeabi_d2iz>
 8006888:	4606      	mov	r6, r0
 800688a:	f7f9 fe4b 	bl	8000524 <__aeabi_i2d>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	3630      	adds	r6, #48	; 0x30
 800689c:	f805 6b01 	strb.w	r6, [r5], #1
 80068a0:	ec53 2b19 	vmov	r2, r3, d9
 80068a4:	4680      	mov	r8, r0
 80068a6:	4689      	mov	r9, r1
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d164      	bne.n	800697a <_dtoa_r+0x62a>
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	4937      	ldr	r1, [pc, #220]	; (8006994 <_dtoa_r+0x644>)
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7f9 fce6 	bl	8000288 <__aeabi_dsub>
 80068bc:	ec53 2b19 	vmov	r2, r3, d9
 80068c0:	f7fa f90c 	bl	8000adc <__aeabi_dcmplt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	f040 80b6 	bne.w	8006a36 <_dtoa_r+0x6e6>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	429d      	cmp	r5, r3
 80068ce:	f43f af7c 	beq.w	80067ca <_dtoa_r+0x47a>
 80068d2:	4b31      	ldr	r3, [pc, #196]	; (8006998 <_dtoa_r+0x648>)
 80068d4:	ec51 0b19 	vmov	r0, r1, d9
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fe8d 	bl	80005f8 <__aeabi_dmul>
 80068de:	4b2e      	ldr	r3, [pc, #184]	; (8006998 <_dtoa_r+0x648>)
 80068e0:	ec41 0b19 	vmov	d9, r0, r1
 80068e4:	2200      	movs	r2, #0
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7f9 fe85 	bl	80005f8 <__aeabi_dmul>
 80068ee:	4680      	mov	r8, r0
 80068f0:	4689      	mov	r9, r1
 80068f2:	e7c5      	b.n	8006880 <_dtoa_r+0x530>
 80068f4:	ec51 0b17 	vmov	r0, r1, d7
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	9d00      	ldr	r5, [sp, #0]
 8006900:	930f      	str	r3, [sp, #60]	; 0x3c
 8006902:	ec41 0b19 	vmov	d9, r0, r1
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	f7fa f925 	bl	8000b58 <__aeabi_d2iz>
 800690e:	4606      	mov	r6, r0
 8006910:	f7f9 fe08 	bl	8000524 <__aeabi_i2d>
 8006914:	3630      	adds	r6, #48	; 0x30
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	f805 6b01 	strb.w	r6, [r5], #1
 8006926:	9b02      	ldr	r3, [sp, #8]
 8006928:	429d      	cmp	r5, r3
 800692a:	4680      	mov	r8, r0
 800692c:	4689      	mov	r9, r1
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	d124      	bne.n	800697e <_dtoa_r+0x62e>
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <_dtoa_r+0x654>)
 8006936:	ec51 0b19 	vmov	r0, r1, d9
 800693a:	f7f9 fca7 	bl	800028c <__adddf3>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7fa f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800694a:	2800      	cmp	r0, #0
 800694c:	d173      	bne.n	8006a36 <_dtoa_r+0x6e6>
 800694e:	ec53 2b19 	vmov	r2, r3, d9
 8006952:	4914      	ldr	r1, [pc, #80]	; (80069a4 <_dtoa_r+0x654>)
 8006954:	2000      	movs	r0, #0
 8006956:	f7f9 fc97 	bl	8000288 <__aeabi_dsub>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8bb 	bl	8000adc <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	f43f af2f 	beq.w	80067ca <_dtoa_r+0x47a>
 800696c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800696e:	1e6b      	subs	r3, r5, #1
 8006970:	930f      	str	r3, [sp, #60]	; 0x3c
 8006972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d0f8      	beq.n	800696c <_dtoa_r+0x61c>
 800697a:	46bb      	mov	fp, r7
 800697c:	e04a      	b.n	8006a14 <_dtoa_r+0x6c4>
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <_dtoa_r+0x648>)
 8006980:	f7f9 fe3a 	bl	80005f8 <__aeabi_dmul>
 8006984:	4680      	mov	r8, r0
 8006986:	4689      	mov	r9, r1
 8006988:	e7bd      	b.n	8006906 <_dtoa_r+0x5b6>
 800698a:	bf00      	nop
 800698c:	080087c8 	.word	0x080087c8
 8006990:	080087a0 	.word	0x080087a0
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	40240000 	.word	0x40240000
 800699c:	401c0000 	.word	0x401c0000
 80069a0:	40140000 	.word	0x40140000
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069ac:	9d00      	ldr	r5, [sp, #0]
 80069ae:	4642      	mov	r2, r8
 80069b0:	464b      	mov	r3, r9
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7f9 ff49 	bl	800084c <__aeabi_ddiv>
 80069ba:	f7fa f8cd 	bl	8000b58 <__aeabi_d2iz>
 80069be:	9001      	str	r0, [sp, #4]
 80069c0:	f7f9 fdb0 	bl	8000524 <__aeabi_i2d>
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	f7f9 fe16 	bl	80005f8 <__aeabi_dmul>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	9e01      	ldr	r6, [sp, #4]
 80069da:	9f04      	ldr	r7, [sp, #16]
 80069dc:	3630      	adds	r6, #48	; 0x30
 80069de:	f805 6b01 	strb.w	r6, [r5], #1
 80069e2:	9e00      	ldr	r6, [sp, #0]
 80069e4:	1bae      	subs	r6, r5, r6
 80069e6:	42b7      	cmp	r7, r6
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	d134      	bne.n	8006a58 <_dtoa_r+0x708>
 80069ee:	f7f9 fc4d 	bl	800028c <__adddf3>
 80069f2:	4642      	mov	r2, r8
 80069f4:	464b      	mov	r3, r9
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	f7fa f88d 	bl	8000b18 <__aeabi_dcmpgt>
 80069fe:	b9c8      	cbnz	r0, 8006a34 <_dtoa_r+0x6e4>
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	4630      	mov	r0, r6
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7fa f85e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0c:	b110      	cbz	r0, 8006a14 <_dtoa_r+0x6c4>
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	07db      	lsls	r3, r3, #31
 8006a12:	d40f      	bmi.n	8006a34 <_dtoa_r+0x6e4>
 8006a14:	4651      	mov	r1, sl
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fbcc 	bl	80071b4 <_Bfree>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a20:	702b      	strb	r3, [r5, #0]
 8006a22:	f10b 0301 	add.w	r3, fp, #1
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f43f ace2 	beq.w	80063f4 <_dtoa_r+0xa4>
 8006a30:	601d      	str	r5, [r3, #0]
 8006a32:	e4df      	b.n	80063f4 <_dtoa_r+0xa4>
 8006a34:	465f      	mov	r7, fp
 8006a36:	462b      	mov	r3, r5
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3e:	2a39      	cmp	r2, #57	; 0x39
 8006a40:	d106      	bne.n	8006a50 <_dtoa_r+0x700>
 8006a42:	9a00      	ldr	r2, [sp, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1f7      	bne.n	8006a38 <_dtoa_r+0x6e8>
 8006a48:	9900      	ldr	r1, [sp, #0]
 8006a4a:	2230      	movs	r2, #48	; 0x30
 8006a4c:	3701      	adds	r7, #1
 8006a4e:	700a      	strb	r2, [r1, #0]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e790      	b.n	800697a <_dtoa_r+0x62a>
 8006a58:	4ba3      	ldr	r3, [pc, #652]	; (8006ce8 <_dtoa_r+0x998>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4606      	mov	r6, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	f7fa f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d09e      	beq.n	80069ae <_dtoa_r+0x65e>
 8006a70:	e7d0      	b.n	8006a14 <_dtoa_r+0x6c4>
 8006a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	f000 80ca 	beq.w	8006c0e <_dtoa_r+0x8be>
 8006a7a:	9a07      	ldr	r2, [sp, #28]
 8006a7c:	2a01      	cmp	r2, #1
 8006a7e:	f300 80ad 	bgt.w	8006bdc <_dtoa_r+0x88c>
 8006a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	f000 80a5 	beq.w	8006bd4 <_dtoa_r+0x884>
 8006a8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a8e:	9e08      	ldr	r6, [sp, #32]
 8006a90:	9d05      	ldr	r5, [sp, #20]
 8006a92:	9a05      	ldr	r2, [sp, #20]
 8006a94:	441a      	add	r2, r3
 8006a96:	9205      	str	r2, [sp, #20]
 8006a98:	9a06      	ldr	r2, [sp, #24]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	441a      	add	r2, r3
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	9206      	str	r2, [sp, #24]
 8006aa2:	f000 fc3d 	bl	8007320 <__i2b>
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	b165      	cbz	r5, 8006ac4 <_dtoa_r+0x774>
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd09      	ble.n	8006ac4 <_dtoa_r+0x774>
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	9a05      	ldr	r2, [sp, #20]
 8006ab4:	bfa8      	it	ge
 8006ab6:	462b      	movge	r3, r5
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	9205      	str	r2, [sp, #20]
 8006abc:	9a06      	ldr	r2, [sp, #24]
 8006abe:	1aed      	subs	r5, r5, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	9306      	str	r3, [sp, #24]
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	b1f3      	cbz	r3, 8006b06 <_dtoa_r+0x7b6>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80a3 	beq.w	8006c16 <_dtoa_r+0x8c6>
 8006ad0:	2e00      	cmp	r6, #0
 8006ad2:	dd10      	ble.n	8006af6 <_dtoa_r+0x7a6>
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fce1 	bl	80074a0 <__pow5mult>
 8006ade:	4652      	mov	r2, sl
 8006ae0:	4601      	mov	r1, r0
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fc31 	bl	800734c <__multiply>
 8006aea:	4651      	mov	r1, sl
 8006aec:	4680      	mov	r8, r0
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 fb60 	bl	80071b4 <_Bfree>
 8006af4:	46c2      	mov	sl, r8
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	1b9a      	subs	r2, r3, r6
 8006afa:	d004      	beq.n	8006b06 <_dtoa_r+0x7b6>
 8006afc:	4651      	mov	r1, sl
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fcce 	bl	80074a0 <__pow5mult>
 8006b04:	4682      	mov	sl, r0
 8006b06:	2101      	movs	r1, #1
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fc09 	bl	8007320 <__i2b>
 8006b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	4606      	mov	r6, r0
 8006b14:	f340 8081 	ble.w	8006c1a <_dtoa_r+0x8ca>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 fcbf 	bl	80074a0 <__pow5mult>
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	4606      	mov	r6, r0
 8006b28:	dd7a      	ble.n	8006c20 <_dtoa_r+0x8d0>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	6933      	ldr	r3, [r6, #16]
 8006b30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b34:	6918      	ldr	r0, [r3, #16]
 8006b36:	f000 fba5 	bl	8007284 <__hi0bits>
 8006b3a:	f1c0 0020 	rsb	r0, r0, #32
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	4418      	add	r0, r3
 8006b42:	f010 001f 	ands.w	r0, r0, #31
 8006b46:	f000 8094 	beq.w	8006c72 <_dtoa_r+0x922>
 8006b4a:	f1c0 0320 	rsb	r3, r0, #32
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	f340 8085 	ble.w	8006c5e <_dtoa_r+0x90e>
 8006b54:	9b05      	ldr	r3, [sp, #20]
 8006b56:	f1c0 001c 	rsb	r0, r0, #28
 8006b5a:	4403      	add	r3, r0
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	4403      	add	r3, r0
 8006b62:	4405      	add	r5, r0
 8006b64:	9306      	str	r3, [sp, #24]
 8006b66:	9b05      	ldr	r3, [sp, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dd05      	ble.n	8006b78 <_dtoa_r+0x828>
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fcef 	bl	8007554 <__lshift>
 8006b76:	4682      	mov	sl, r0
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd05      	ble.n	8006b8a <_dtoa_r+0x83a>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	461a      	mov	r2, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fce6 	bl	8007554 <__lshift>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d072      	beq.n	8006c76 <_dtoa_r+0x926>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4650      	mov	r0, sl
 8006b94:	f000 fd4a 	bl	800762c <__mcmp>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	da6c      	bge.n	8006c76 <_dtoa_r+0x926>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4651      	mov	r1, sl
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fb28 	bl	80071f8 <__multadd>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bae:	4682      	mov	sl, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 81b0 	beq.w	8006f16 <_dtoa_r+0xbc6>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4639      	mov	r1, r7
 8006bba:	220a      	movs	r2, #10
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fb1b 	bl	80071f8 <__multadd>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	f300 8096 	bgt.w	8006cf8 <_dtoa_r+0x9a8>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dc59      	bgt.n	8006c86 <_dtoa_r+0x936>
 8006bd2:	e091      	b.n	8006cf8 <_dtoa_r+0x9a8>
 8006bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bda:	e758      	b.n	8006a8e <_dtoa_r+0x73e>
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	1e5e      	subs	r6, r3, #1
 8006be0:	9b08      	ldr	r3, [sp, #32]
 8006be2:	42b3      	cmp	r3, r6
 8006be4:	bfbf      	itttt	lt
 8006be6:	9b08      	ldrlt	r3, [sp, #32]
 8006be8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006bea:	9608      	strlt	r6, [sp, #32]
 8006bec:	1af3      	sublt	r3, r6, r3
 8006bee:	bfb4      	ite	lt
 8006bf0:	18d2      	addlt	r2, r2, r3
 8006bf2:	1b9e      	subge	r6, r3, r6
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	bfbc      	itt	lt
 8006bf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006bfa:	2600      	movlt	r6, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bfb7      	itett	lt
 8006c00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006c04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006c08:	1a9d      	sublt	r5, r3, r2
 8006c0a:	2300      	movlt	r3, #0
 8006c0c:	e741      	b.n	8006a92 <_dtoa_r+0x742>
 8006c0e:	9e08      	ldr	r6, [sp, #32]
 8006c10:	9d05      	ldr	r5, [sp, #20]
 8006c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c14:	e748      	b.n	8006aa8 <_dtoa_r+0x758>
 8006c16:	9a08      	ldr	r2, [sp, #32]
 8006c18:	e770      	b.n	8006afc <_dtoa_r+0x7ac>
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	dc19      	bgt.n	8006c54 <_dtoa_r+0x904>
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	b9bb      	cbnz	r3, 8006c54 <_dtoa_r+0x904>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2a:	b99b      	cbnz	r3, 8006c54 <_dtoa_r+0x904>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	0d1b      	lsrs	r3, r3, #20
 8006c34:	051b      	lsls	r3, r3, #20
 8006c36:	b183      	cbz	r3, 8006c5a <_dtoa_r+0x90a>
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	3301      	adds	r3, #1
 8006c42:	9306      	str	r3, [sp, #24]
 8006c44:	f04f 0801 	mov.w	r8, #1
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f47f af6f 	bne.w	8006b2e <_dtoa_r+0x7de>
 8006c50:	2001      	movs	r0, #1
 8006c52:	e774      	b.n	8006b3e <_dtoa_r+0x7ee>
 8006c54:	f04f 0800 	mov.w	r8, #0
 8006c58:	e7f6      	b.n	8006c48 <_dtoa_r+0x8f8>
 8006c5a:	4698      	mov	r8, r3
 8006c5c:	e7f4      	b.n	8006c48 <_dtoa_r+0x8f8>
 8006c5e:	d082      	beq.n	8006b66 <_dtoa_r+0x816>
 8006c60:	9a05      	ldr	r2, [sp, #20]
 8006c62:	331c      	adds	r3, #28
 8006c64:	441a      	add	r2, r3
 8006c66:	9205      	str	r2, [sp, #20]
 8006c68:	9a06      	ldr	r2, [sp, #24]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	441d      	add	r5, r3
 8006c6e:	9206      	str	r2, [sp, #24]
 8006c70:	e779      	b.n	8006b66 <_dtoa_r+0x816>
 8006c72:	4603      	mov	r3, r0
 8006c74:	e7f4      	b.n	8006c60 <_dtoa_r+0x910>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc37      	bgt.n	8006cec <_dtoa_r+0x99c>
 8006c7c:	9b07      	ldr	r3, [sp, #28]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	dd34      	ble.n	8006cec <_dtoa_r+0x99c>
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	b963      	cbnz	r3, 8006ca4 <_dtoa_r+0x954>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fab2 	bl	80071f8 <__multadd>
 8006c94:	4601      	mov	r1, r0
 8006c96:	4606      	mov	r6, r0
 8006c98:	4650      	mov	r0, sl
 8006c9a:	f000 fcc7 	bl	800762c <__mcmp>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f73f adbb 	bgt.w	800681a <_dtoa_r+0x4ca>
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	9d00      	ldr	r5, [sp, #0]
 8006ca8:	ea6f 0b03 	mvn.w	fp, r3
 8006cac:	f04f 0800 	mov.w	r8, #0
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fa7e 	bl	80071b4 <_Bfree>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f43f aeab 	beq.w	8006a14 <_dtoa_r+0x6c4>
 8006cbe:	f1b8 0f00 	cmp.w	r8, #0
 8006cc2:	d005      	beq.n	8006cd0 <_dtoa_r+0x980>
 8006cc4:	45b8      	cmp	r8, r7
 8006cc6:	d003      	beq.n	8006cd0 <_dtoa_r+0x980>
 8006cc8:	4641      	mov	r1, r8
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fa72 	bl	80071b4 <_Bfree>
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fa6e 	bl	80071b4 <_Bfree>
 8006cd8:	e69c      	b.n	8006a14 <_dtoa_r+0x6c4>
 8006cda:	2600      	movs	r6, #0
 8006cdc:	4637      	mov	r7, r6
 8006cde:	e7e1      	b.n	8006ca4 <_dtoa_r+0x954>
 8006ce0:	46bb      	mov	fp, r7
 8006ce2:	4637      	mov	r7, r6
 8006ce4:	e599      	b.n	800681a <_dtoa_r+0x4ca>
 8006ce6:	bf00      	nop
 8006ce8:	40240000 	.word	0x40240000
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80c8 	beq.w	8006e84 <_dtoa_r+0xb34>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	dd05      	ble.n	8006d08 <_dtoa_r+0x9b8>
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 fc27 	bl	8007554 <__lshift>
 8006d06:	4607      	mov	r7, r0
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	d05b      	beq.n	8006dc6 <_dtoa_r+0xa76>
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fa0f 	bl	8007134 <_Balloc>
 8006d16:	4605      	mov	r5, r0
 8006d18:	b928      	cbnz	r0, 8006d26 <_dtoa_r+0x9d6>
 8006d1a:	4b83      	ldr	r3, [pc, #524]	; (8006f28 <_dtoa_r+0xbd8>)
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d22:	f7ff bb2e 	b.w	8006382 <_dtoa_r+0x32>
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	3202      	adds	r2, #2
 8006d2a:	0092      	lsls	r2, r2, #2
 8006d2c:	f107 010c 	add.w	r1, r7, #12
 8006d30:	300c      	adds	r0, #12
 8006d32:	f7ff fa76 	bl	8006222 <memcpy>
 8006d36:	2201      	movs	r2, #1
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fc0a 	bl	8007554 <__lshift>
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	9308      	str	r3, [sp, #32]
 8006d4e:	9b02      	ldr	r3, [sp, #8]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	46b8      	mov	r8, r7
 8006d56:	9306      	str	r3, [sp, #24]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4650      	mov	r0, sl
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f7ff fa6b 	bl	800623e <quorem>
 8006d68:	4641      	mov	r1, r8
 8006d6a:	9002      	str	r0, [sp, #8]
 8006d6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d70:	4650      	mov	r0, sl
 8006d72:	f000 fc5b 	bl	800762c <__mcmp>
 8006d76:	463a      	mov	r2, r7
 8006d78:	9005      	str	r0, [sp, #20]
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fc71 	bl	8007664 <__mdiff>
 8006d82:	68c2      	ldr	r2, [r0, #12]
 8006d84:	4605      	mov	r5, r0
 8006d86:	bb02      	cbnz	r2, 8006dca <_dtoa_r+0xa7a>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	f000 fc4e 	bl	800762c <__mcmp>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4629      	mov	r1, r5
 8006d94:	4620      	mov	r0, r4
 8006d96:	9209      	str	r2, [sp, #36]	; 0x24
 8006d98:	f000 fa0c 	bl	80071b4 <_Bfree>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	9d04      	ldr	r5, [sp, #16]
 8006da2:	ea43 0102 	orr.w	r1, r3, r2
 8006da6:	9b06      	ldr	r3, [sp, #24]
 8006da8:	4319      	orrs	r1, r3
 8006daa:	d110      	bne.n	8006dce <_dtoa_r+0xa7e>
 8006dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006db0:	d029      	beq.n	8006e06 <_dtoa_r+0xab6>
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd02      	ble.n	8006dbe <_dtoa_r+0xa6e>
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	f883 9000 	strb.w	r9, [r3]
 8006dc4:	e774      	b.n	8006cb0 <_dtoa_r+0x960>
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	e7ba      	b.n	8006d40 <_dtoa_r+0x9f0>
 8006dca:	2201      	movs	r2, #1
 8006dcc:	e7e1      	b.n	8006d92 <_dtoa_r+0xa42>
 8006dce:	9b05      	ldr	r3, [sp, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db04      	blt.n	8006dde <_dtoa_r+0xa8e>
 8006dd4:	9907      	ldr	r1, [sp, #28]
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	9906      	ldr	r1, [sp, #24]
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	d120      	bne.n	8006e20 <_dtoa_r+0xad0>
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	dded      	ble.n	8006dbe <_dtoa_r+0xa6e>
 8006de2:	4651      	mov	r1, sl
 8006de4:	2201      	movs	r2, #1
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fbb4 	bl	8007554 <__lshift>
 8006dec:	4631      	mov	r1, r6
 8006dee:	4682      	mov	sl, r0
 8006df0:	f000 fc1c 	bl	800762c <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc03      	bgt.n	8006e00 <_dtoa_r+0xab0>
 8006df8:	d1e1      	bne.n	8006dbe <_dtoa_r+0xa6e>
 8006dfa:	f019 0f01 	tst.w	r9, #1
 8006dfe:	d0de      	beq.n	8006dbe <_dtoa_r+0xa6e>
 8006e00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e04:	d1d8      	bne.n	8006db8 <_dtoa_r+0xa68>
 8006e06:	9a01      	ldr	r2, [sp, #4]
 8006e08:	2339      	movs	r3, #57	; 0x39
 8006e0a:	7013      	strb	r3, [r2, #0]
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	461d      	mov	r5, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e16:	2a39      	cmp	r2, #57	; 0x39
 8006e18:	d06c      	beq.n	8006ef4 <_dtoa_r+0xba4>
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e747      	b.n	8006cb0 <_dtoa_r+0x960>
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	dd07      	ble.n	8006e34 <_dtoa_r+0xae4>
 8006e24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e28:	d0ed      	beq.n	8006e06 <_dtoa_r+0xab6>
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	f109 0301 	add.w	r3, r9, #1
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	e73d      	b.n	8006cb0 <_dtoa_r+0x960>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	9a08      	ldr	r2, [sp, #32]
 8006e38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d043      	beq.n	8006ec8 <_dtoa_r+0xb78>
 8006e40:	4651      	mov	r1, sl
 8006e42:	2300      	movs	r3, #0
 8006e44:	220a      	movs	r2, #10
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f9d6 	bl	80071f8 <__multadd>
 8006e4c:	45b8      	cmp	r8, r7
 8006e4e:	4682      	mov	sl, r0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	f04f 020a 	mov.w	r2, #10
 8006e58:	4641      	mov	r1, r8
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	d107      	bne.n	8006e6e <_dtoa_r+0xb1e>
 8006e5e:	f000 f9cb 	bl	80071f8 <__multadd>
 8006e62:	4680      	mov	r8, r0
 8006e64:	4607      	mov	r7, r0
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	e775      	b.n	8006d5a <_dtoa_r+0xa0a>
 8006e6e:	f000 f9c3 	bl	80071f8 <__multadd>
 8006e72:	4639      	mov	r1, r7
 8006e74:	4680      	mov	r8, r0
 8006e76:	2300      	movs	r3, #0
 8006e78:	220a      	movs	r2, #10
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 f9bc 	bl	80071f8 <__multadd>
 8006e80:	4607      	mov	r7, r0
 8006e82:	e7f0      	b.n	8006e66 <_dtoa_r+0xb16>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	9d00      	ldr	r5, [sp, #0]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f7ff f9d6 	bl	800623e <quorem>
 8006e92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	f805 9b01 	strb.w	r9, [r5], #1
 8006e9c:	1aea      	subs	r2, r5, r3
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	dd07      	ble.n	8006eb4 <_dtoa_r+0xb64>
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f9a4 	bl	80071f8 <__multadd>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	e7ea      	b.n	8006e8a <_dtoa_r+0xb3a>
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfc8      	it	gt
 8006eba:	461d      	movgt	r5, r3
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	bfd8      	it	le
 8006ec0:	2501      	movle	r5, #1
 8006ec2:	441d      	add	r5, r3
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	4651      	mov	r1, sl
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fb41 	bl	8007554 <__lshift>
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	f000 fba9 	bl	800762c <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	dc96      	bgt.n	8006e0c <_dtoa_r+0xabc>
 8006ede:	d102      	bne.n	8006ee6 <_dtoa_r+0xb96>
 8006ee0:	f019 0f01 	tst.w	r9, #1
 8006ee4:	d192      	bne.n	8006e0c <_dtoa_r+0xabc>
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	461d      	mov	r5, r3
 8006eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eee:	2a30      	cmp	r2, #48	; 0x30
 8006ef0:	d0fa      	beq.n	8006ee8 <_dtoa_r+0xb98>
 8006ef2:	e6dd      	b.n	8006cb0 <_dtoa_r+0x960>
 8006ef4:	9a00      	ldr	r2, [sp, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d189      	bne.n	8006e0e <_dtoa_r+0xabe>
 8006efa:	f10b 0b01 	add.w	fp, fp, #1
 8006efe:	2331      	movs	r3, #49	; 0x31
 8006f00:	e796      	b.n	8006e30 <_dtoa_r+0xae0>
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <_dtoa_r+0xbdc>)
 8006f04:	f7ff ba99 	b.w	800643a <_dtoa_r+0xea>
 8006f08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f47f aa6d 	bne.w	80063ea <_dtoa_r+0x9a>
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <_dtoa_r+0xbe0>)
 8006f12:	f7ff ba92 	b.w	800643a <_dtoa_r+0xea>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dcb5      	bgt.n	8006e88 <_dtoa_r+0xb38>
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	f73f aeb1 	bgt.w	8006c86 <_dtoa_r+0x936>
 8006f24:	e7b0      	b.n	8006e88 <_dtoa_r+0xb38>
 8006f26:	bf00      	nop
 8006f28:	08008734 	.word	0x08008734
 8006f2c:	08008694 	.word	0x08008694
 8006f30:	080086b8 	.word	0x080086b8

08006f34 <_free_r>:
 8006f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d044      	beq.n	8006fc4 <_free_r+0x90>
 8006f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f1a1 0404 	sub.w	r4, r1, #4
 8006f46:	bfb8      	it	lt
 8006f48:	18e4      	addlt	r4, r4, r3
 8006f4a:	f000 f8e7 	bl	800711c <__malloc_lock>
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <_free_r+0x94>)
 8006f50:	9801      	ldr	r0, [sp, #4]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x30>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	b003      	add	sp, #12
 8006f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f60:	f000 b8e2 	b.w	8007128 <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x46>
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	1961      	adds	r1, r4, r5
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1949      	addeq	r1, r1, r5
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x22>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x50>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x46>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1855      	adds	r5, r2, r1
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x70>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	4421      	add	r1, r4
 8006f90:	1854      	adds	r4, r2, r1
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x26>
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	440c      	add	r4, r1
 8006fa0:	6014      	str	r4, [r2, #0]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x26>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x78>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x26>
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1961      	adds	r1, r4, r5
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1949      	addeq	r1, r1, r5
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7ca      	b.n	8006f5a <_free_r+0x26>
 8006fc4:	b003      	add	sp, #12
 8006fc6:	bd30      	pop	{r4, r5, pc}
 8006fc8:	200043c0 	.word	0x200043c0

08006fcc <malloc>:
 8006fcc:	4b02      	ldr	r3, [pc, #8]	; (8006fd8 <malloc+0xc>)
 8006fce:	4601      	mov	r1, r0
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f000 b823 	b.w	800701c <_malloc_r>
 8006fd6:	bf00      	nop
 8006fd8:	20000068 	.word	0x20000068

08006fdc <sbrk_aligned>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4e0e      	ldr	r6, [pc, #56]	; (8007018 <sbrk_aligned+0x3c>)
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	6831      	ldr	r1, [r6, #0]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	b911      	cbnz	r1, 8006fee <sbrk_aligned+0x12>
 8006fe8:	f000 fe40 	bl	8007c6c <_sbrk_r>
 8006fec:	6030      	str	r0, [r6, #0]
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 fe3b 	bl	8007c6c <_sbrk_r>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d00a      	beq.n	8007010 <sbrk_aligned+0x34>
 8006ffa:	1cc4      	adds	r4, r0, #3
 8006ffc:	f024 0403 	bic.w	r4, r4, #3
 8007000:	42a0      	cmp	r0, r4
 8007002:	d007      	beq.n	8007014 <sbrk_aligned+0x38>
 8007004:	1a21      	subs	r1, r4, r0
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fe30 	bl	8007c6c <_sbrk_r>
 800700c:	3001      	adds	r0, #1
 800700e:	d101      	bne.n	8007014 <sbrk_aligned+0x38>
 8007010:	f04f 34ff 	mov.w	r4, #4294967295
 8007014:	4620      	mov	r0, r4
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	200043c4 	.word	0x200043c4

0800701c <_malloc_r>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	1ccd      	adds	r5, r1, #3
 8007022:	f025 0503 	bic.w	r5, r5, #3
 8007026:	3508      	adds	r5, #8
 8007028:	2d0c      	cmp	r5, #12
 800702a:	bf38      	it	cc
 800702c:	250c      	movcc	r5, #12
 800702e:	2d00      	cmp	r5, #0
 8007030:	4607      	mov	r7, r0
 8007032:	db01      	blt.n	8007038 <_malloc_r+0x1c>
 8007034:	42a9      	cmp	r1, r5
 8007036:	d905      	bls.n	8007044 <_malloc_r+0x28>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	2600      	movs	r6, #0
 800703e:	4630      	mov	r0, r6
 8007040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007118 <_malloc_r+0xfc>
 8007048:	f000 f868 	bl	800711c <__malloc_lock>
 800704c:	f8d8 3000 	ldr.w	r3, [r8]
 8007050:	461c      	mov	r4, r3
 8007052:	bb5c      	cbnz	r4, 80070ac <_malloc_r+0x90>
 8007054:	4629      	mov	r1, r5
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ffc0 	bl	8006fdc <sbrk_aligned>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	4604      	mov	r4, r0
 8007060:	d155      	bne.n	800710e <_malloc_r+0xf2>
 8007062:	f8d8 4000 	ldr.w	r4, [r8]
 8007066:	4626      	mov	r6, r4
 8007068:	2e00      	cmp	r6, #0
 800706a:	d145      	bne.n	80070f8 <_malloc_r+0xdc>
 800706c:	2c00      	cmp	r4, #0
 800706e:	d048      	beq.n	8007102 <_malloc_r+0xe6>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	4631      	mov	r1, r6
 8007074:	4638      	mov	r0, r7
 8007076:	eb04 0903 	add.w	r9, r4, r3
 800707a:	f000 fdf7 	bl	8007c6c <_sbrk_r>
 800707e:	4581      	cmp	r9, r0
 8007080:	d13f      	bne.n	8007102 <_malloc_r+0xe6>
 8007082:	6821      	ldr	r1, [r4, #0]
 8007084:	1a6d      	subs	r5, r5, r1
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff ffa7 	bl	8006fdc <sbrk_aligned>
 800708e:	3001      	adds	r0, #1
 8007090:	d037      	beq.n	8007102 <_malloc_r+0xe6>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	442b      	add	r3, r5
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	f8d8 3000 	ldr.w	r3, [r8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d038      	beq.n	8007112 <_malloc_r+0xf6>
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	42a2      	cmp	r2, r4
 80070a4:	d12b      	bne.n	80070fe <_malloc_r+0xe2>
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	e00f      	b.n	80070cc <_malloc_r+0xb0>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	1b52      	subs	r2, r2, r5
 80070b0:	d41f      	bmi.n	80070f2 <_malloc_r+0xd6>
 80070b2:	2a0b      	cmp	r2, #11
 80070b4:	d917      	bls.n	80070e6 <_malloc_r+0xca>
 80070b6:	1961      	adds	r1, r4, r5
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	6025      	str	r5, [r4, #0]
 80070bc:	bf18      	it	ne
 80070be:	6059      	strne	r1, [r3, #4]
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	bf08      	it	eq
 80070c4:	f8c8 1000 	streq.w	r1, [r8]
 80070c8:	5162      	str	r2, [r4, r5]
 80070ca:	604b      	str	r3, [r1, #4]
 80070cc:	4638      	mov	r0, r7
 80070ce:	f104 060b 	add.w	r6, r4, #11
 80070d2:	f000 f829 	bl	8007128 <__malloc_unlock>
 80070d6:	f026 0607 	bic.w	r6, r6, #7
 80070da:	1d23      	adds	r3, r4, #4
 80070dc:	1af2      	subs	r2, r6, r3
 80070de:	d0ae      	beq.n	800703e <_malloc_r+0x22>
 80070e0:	1b9b      	subs	r3, r3, r6
 80070e2:	50a3      	str	r3, [r4, r2]
 80070e4:	e7ab      	b.n	800703e <_malloc_r+0x22>
 80070e6:	42a3      	cmp	r3, r4
 80070e8:	6862      	ldr	r2, [r4, #4]
 80070ea:	d1dd      	bne.n	80070a8 <_malloc_r+0x8c>
 80070ec:	f8c8 2000 	str.w	r2, [r8]
 80070f0:	e7ec      	b.n	80070cc <_malloc_r+0xb0>
 80070f2:	4623      	mov	r3, r4
 80070f4:	6864      	ldr	r4, [r4, #4]
 80070f6:	e7ac      	b.n	8007052 <_malloc_r+0x36>
 80070f8:	4634      	mov	r4, r6
 80070fa:	6876      	ldr	r6, [r6, #4]
 80070fc:	e7b4      	b.n	8007068 <_malloc_r+0x4c>
 80070fe:	4613      	mov	r3, r2
 8007100:	e7cc      	b.n	800709c <_malloc_r+0x80>
 8007102:	230c      	movs	r3, #12
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	4638      	mov	r0, r7
 8007108:	f000 f80e 	bl	8007128 <__malloc_unlock>
 800710c:	e797      	b.n	800703e <_malloc_r+0x22>
 800710e:	6025      	str	r5, [r4, #0]
 8007110:	e7dc      	b.n	80070cc <_malloc_r+0xb0>
 8007112:	605b      	str	r3, [r3, #4]
 8007114:	deff      	udf	#255	; 0xff
 8007116:	bf00      	nop
 8007118:	200043c0 	.word	0x200043c0

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__malloc_lock+0x8>)
 800711e:	f7ff b87e 	b.w	800621e <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	200043bc 	.word	0x200043bc

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__malloc_unlock+0x8>)
 800712a:	f7ff b879 	b.w	8006220 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	200043bc 	.word	0x200043bc

08007134 <_Balloc>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	69c6      	ldr	r6, [r0, #28]
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	b976      	cbnz	r6, 800715c <_Balloc+0x28>
 800713e:	2010      	movs	r0, #16
 8007140:	f7ff ff44 	bl	8006fcc <malloc>
 8007144:	4602      	mov	r2, r0
 8007146:	61e0      	str	r0, [r4, #28]
 8007148:	b920      	cbnz	r0, 8007154 <_Balloc+0x20>
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <_Balloc+0x78>)
 800714c:	4818      	ldr	r0, [pc, #96]	; (80071b0 <_Balloc+0x7c>)
 800714e:	216b      	movs	r1, #107	; 0x6b
 8007150:	f000 fd9c 	bl	8007c8c <__assert_func>
 8007154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007158:	6006      	str	r6, [r0, #0]
 800715a:	60c6      	str	r6, [r0, #12]
 800715c:	69e6      	ldr	r6, [r4, #28]
 800715e:	68f3      	ldr	r3, [r6, #12]
 8007160:	b183      	cbz	r3, 8007184 <_Balloc+0x50>
 8007162:	69e3      	ldr	r3, [r4, #28]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800716a:	b9b8      	cbnz	r0, 800719c <_Balloc+0x68>
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f605 	lsl.w	r6, r1, r5
 8007172:	1d72      	adds	r2, r6, #5
 8007174:	0092      	lsls	r2, r2, #2
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fda6 	bl	8007cc8 <_calloc_r>
 800717c:	b160      	cbz	r0, 8007198 <_Balloc+0x64>
 800717e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007182:	e00e      	b.n	80071a2 <_Balloc+0x6e>
 8007184:	2221      	movs	r2, #33	; 0x21
 8007186:	2104      	movs	r1, #4
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fd9d 	bl	8007cc8 <_calloc_r>
 800718e:	69e3      	ldr	r3, [r4, #28]
 8007190:	60f0      	str	r0, [r6, #12]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e4      	bne.n	8007162 <_Balloc+0x2e>
 8007198:	2000      	movs	r0, #0
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	6802      	ldr	r2, [r0, #0]
 800719e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071a2:	2300      	movs	r3, #0
 80071a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071a8:	e7f7      	b.n	800719a <_Balloc+0x66>
 80071aa:	bf00      	nop
 80071ac:	080086c5 	.word	0x080086c5
 80071b0:	08008745 	.word	0x08008745

080071b4 <_Bfree>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	69c6      	ldr	r6, [r0, #28]
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b976      	cbnz	r6, 80071dc <_Bfree+0x28>
 80071be:	2010      	movs	r0, #16
 80071c0:	f7ff ff04 	bl	8006fcc <malloc>
 80071c4:	4602      	mov	r2, r0
 80071c6:	61e8      	str	r0, [r5, #28]
 80071c8:	b920      	cbnz	r0, 80071d4 <_Bfree+0x20>
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <_Bfree+0x3c>)
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <_Bfree+0x40>)
 80071ce:	218f      	movs	r1, #143	; 0x8f
 80071d0:	f000 fd5c 	bl	8007c8c <__assert_func>
 80071d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d8:	6006      	str	r6, [r0, #0]
 80071da:	60c6      	str	r6, [r0, #12]
 80071dc:	b13c      	cbz	r4, 80071ee <_Bfree+0x3a>
 80071de:	69eb      	ldr	r3, [r5, #28]
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e8:	6021      	str	r1, [r4, #0]
 80071ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	080086c5 	.word	0x080086c5
 80071f4:	08008745 	.word	0x08008745

080071f8 <__multadd>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	690d      	ldr	r5, [r1, #16]
 80071fe:	4607      	mov	r7, r0
 8007200:	460c      	mov	r4, r1
 8007202:	461e      	mov	r6, r3
 8007204:	f101 0c14 	add.w	ip, r1, #20
 8007208:	2000      	movs	r0, #0
 800720a:	f8dc 3000 	ldr.w	r3, [ip]
 800720e:	b299      	uxth	r1, r3
 8007210:	fb02 6101 	mla	r1, r2, r1, r6
 8007214:	0c1e      	lsrs	r6, r3, #16
 8007216:	0c0b      	lsrs	r3, r1, #16
 8007218:	fb02 3306 	mla	r3, r2, r6, r3
 800721c:	b289      	uxth	r1, r1
 800721e:	3001      	adds	r0, #1
 8007220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007224:	4285      	cmp	r5, r0
 8007226:	f84c 1b04 	str.w	r1, [ip], #4
 800722a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800722e:	dcec      	bgt.n	800720a <__multadd+0x12>
 8007230:	b30e      	cbz	r6, 8007276 <__multadd+0x7e>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc19      	bgt.n	800726c <__multadd+0x74>
 8007238:	6861      	ldr	r1, [r4, #4]
 800723a:	4638      	mov	r0, r7
 800723c:	3101      	adds	r1, #1
 800723e:	f7ff ff79 	bl	8007134 <_Balloc>
 8007242:	4680      	mov	r8, r0
 8007244:	b928      	cbnz	r0, 8007252 <__multadd+0x5a>
 8007246:	4602      	mov	r2, r0
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <__multadd+0x84>)
 800724a:	480d      	ldr	r0, [pc, #52]	; (8007280 <__multadd+0x88>)
 800724c:	21ba      	movs	r1, #186	; 0xba
 800724e:	f000 fd1d 	bl	8007c8c <__assert_func>
 8007252:	6922      	ldr	r2, [r4, #16]
 8007254:	3202      	adds	r2, #2
 8007256:	f104 010c 	add.w	r1, r4, #12
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	300c      	adds	r0, #12
 800725e:	f7fe ffe0 	bl	8006222 <memcpy>
 8007262:	4621      	mov	r1, r4
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff ffa5 	bl	80071b4 <_Bfree>
 800726a:	4644      	mov	r4, r8
 800726c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007270:	3501      	adds	r5, #1
 8007272:	615e      	str	r6, [r3, #20]
 8007274:	6125      	str	r5, [r4, #16]
 8007276:	4620      	mov	r0, r4
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	08008734 	.word	0x08008734
 8007280:	08008745 	.word	0x08008745

08007284 <__hi0bits>:
 8007284:	0c03      	lsrs	r3, r0, #16
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	b9d3      	cbnz	r3, 80072c0 <__hi0bits+0x3c>
 800728a:	0400      	lsls	r0, r0, #16
 800728c:	2310      	movs	r3, #16
 800728e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007292:	bf04      	itt	eq
 8007294:	0200      	lsleq	r0, r0, #8
 8007296:	3308      	addeq	r3, #8
 8007298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800729c:	bf04      	itt	eq
 800729e:	0100      	lsleq	r0, r0, #4
 80072a0:	3304      	addeq	r3, #4
 80072a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072a6:	bf04      	itt	eq
 80072a8:	0080      	lsleq	r0, r0, #2
 80072aa:	3302      	addeq	r3, #2
 80072ac:	2800      	cmp	r0, #0
 80072ae:	db05      	blt.n	80072bc <__hi0bits+0x38>
 80072b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072b4:	f103 0301 	add.w	r3, r3, #1
 80072b8:	bf08      	it	eq
 80072ba:	2320      	moveq	r3, #32
 80072bc:	4618      	mov	r0, r3
 80072be:	4770      	bx	lr
 80072c0:	2300      	movs	r3, #0
 80072c2:	e7e4      	b.n	800728e <__hi0bits+0xa>

080072c4 <__lo0bits>:
 80072c4:	6803      	ldr	r3, [r0, #0]
 80072c6:	f013 0207 	ands.w	r2, r3, #7
 80072ca:	d00c      	beq.n	80072e6 <__lo0bits+0x22>
 80072cc:	07d9      	lsls	r1, r3, #31
 80072ce:	d422      	bmi.n	8007316 <__lo0bits+0x52>
 80072d0:	079a      	lsls	r2, r3, #30
 80072d2:	bf49      	itett	mi
 80072d4:	085b      	lsrmi	r3, r3, #1
 80072d6:	089b      	lsrpl	r3, r3, #2
 80072d8:	6003      	strmi	r3, [r0, #0]
 80072da:	2201      	movmi	r2, #1
 80072dc:	bf5c      	itt	pl
 80072de:	6003      	strpl	r3, [r0, #0]
 80072e0:	2202      	movpl	r2, #2
 80072e2:	4610      	mov	r0, r2
 80072e4:	4770      	bx	lr
 80072e6:	b299      	uxth	r1, r3
 80072e8:	b909      	cbnz	r1, 80072ee <__lo0bits+0x2a>
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	2210      	movs	r2, #16
 80072ee:	b2d9      	uxtb	r1, r3
 80072f0:	b909      	cbnz	r1, 80072f6 <__lo0bits+0x32>
 80072f2:	3208      	adds	r2, #8
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	0719      	lsls	r1, r3, #28
 80072f8:	bf04      	itt	eq
 80072fa:	091b      	lsreq	r3, r3, #4
 80072fc:	3204      	addeq	r2, #4
 80072fe:	0799      	lsls	r1, r3, #30
 8007300:	bf04      	itt	eq
 8007302:	089b      	lsreq	r3, r3, #2
 8007304:	3202      	addeq	r2, #2
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	d403      	bmi.n	8007312 <__lo0bits+0x4e>
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	f102 0201 	add.w	r2, r2, #1
 8007310:	d003      	beq.n	800731a <__lo0bits+0x56>
 8007312:	6003      	str	r3, [r0, #0]
 8007314:	e7e5      	b.n	80072e2 <__lo0bits+0x1e>
 8007316:	2200      	movs	r2, #0
 8007318:	e7e3      	b.n	80072e2 <__lo0bits+0x1e>
 800731a:	2220      	movs	r2, #32
 800731c:	e7e1      	b.n	80072e2 <__lo0bits+0x1e>
	...

08007320 <__i2b>:
 8007320:	b510      	push	{r4, lr}
 8007322:	460c      	mov	r4, r1
 8007324:	2101      	movs	r1, #1
 8007326:	f7ff ff05 	bl	8007134 <_Balloc>
 800732a:	4602      	mov	r2, r0
 800732c:	b928      	cbnz	r0, 800733a <__i2b+0x1a>
 800732e:	4b05      	ldr	r3, [pc, #20]	; (8007344 <__i2b+0x24>)
 8007330:	4805      	ldr	r0, [pc, #20]	; (8007348 <__i2b+0x28>)
 8007332:	f240 1145 	movw	r1, #325	; 0x145
 8007336:	f000 fca9 	bl	8007c8c <__assert_func>
 800733a:	2301      	movs	r3, #1
 800733c:	6144      	str	r4, [r0, #20]
 800733e:	6103      	str	r3, [r0, #16]
 8007340:	bd10      	pop	{r4, pc}
 8007342:	bf00      	nop
 8007344:	08008734 	.word	0x08008734
 8007348:	08008745 	.word	0x08008745

0800734c <__multiply>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	4691      	mov	r9, r2
 8007352:	690a      	ldr	r2, [r1, #16]
 8007354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007358:	429a      	cmp	r2, r3
 800735a:	bfb8      	it	lt
 800735c:	460b      	movlt	r3, r1
 800735e:	460c      	mov	r4, r1
 8007360:	bfbc      	itt	lt
 8007362:	464c      	movlt	r4, r9
 8007364:	4699      	movlt	r9, r3
 8007366:	6927      	ldr	r7, [r4, #16]
 8007368:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	6861      	ldr	r1, [r4, #4]
 8007370:	eb07 060a 	add.w	r6, r7, sl
 8007374:	42b3      	cmp	r3, r6
 8007376:	b085      	sub	sp, #20
 8007378:	bfb8      	it	lt
 800737a:	3101      	addlt	r1, #1
 800737c:	f7ff feda 	bl	8007134 <_Balloc>
 8007380:	b930      	cbnz	r0, 8007390 <__multiply+0x44>
 8007382:	4602      	mov	r2, r0
 8007384:	4b44      	ldr	r3, [pc, #272]	; (8007498 <__multiply+0x14c>)
 8007386:	4845      	ldr	r0, [pc, #276]	; (800749c <__multiply+0x150>)
 8007388:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800738c:	f000 fc7e 	bl	8007c8c <__assert_func>
 8007390:	f100 0514 	add.w	r5, r0, #20
 8007394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007398:	462b      	mov	r3, r5
 800739a:	2200      	movs	r2, #0
 800739c:	4543      	cmp	r3, r8
 800739e:	d321      	bcc.n	80073e4 <__multiply+0x98>
 80073a0:	f104 0314 	add.w	r3, r4, #20
 80073a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073a8:	f109 0314 	add.w	r3, r9, #20
 80073ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073b0:	9202      	str	r2, [sp, #8]
 80073b2:	1b3a      	subs	r2, r7, r4
 80073b4:	3a15      	subs	r2, #21
 80073b6:	f022 0203 	bic.w	r2, r2, #3
 80073ba:	3204      	adds	r2, #4
 80073bc:	f104 0115 	add.w	r1, r4, #21
 80073c0:	428f      	cmp	r7, r1
 80073c2:	bf38      	it	cc
 80073c4:	2204      	movcc	r2, #4
 80073c6:	9201      	str	r2, [sp, #4]
 80073c8:	9a02      	ldr	r2, [sp, #8]
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d80c      	bhi.n	80073ea <__multiply+0x9e>
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	dd03      	ble.n	80073dc <__multiply+0x90>
 80073d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d05b      	beq.n	8007494 <__multiply+0x148>
 80073dc:	6106      	str	r6, [r0, #16]
 80073de:	b005      	add	sp, #20
 80073e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e4:	f843 2b04 	str.w	r2, [r3], #4
 80073e8:	e7d8      	b.n	800739c <__multiply+0x50>
 80073ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ee:	f1ba 0f00 	cmp.w	sl, #0
 80073f2:	d024      	beq.n	800743e <__multiply+0xf2>
 80073f4:	f104 0e14 	add.w	lr, r4, #20
 80073f8:	46a9      	mov	r9, r5
 80073fa:	f04f 0c00 	mov.w	ip, #0
 80073fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007402:	f8d9 1000 	ldr.w	r1, [r9]
 8007406:	fa1f fb82 	uxth.w	fp, r2
 800740a:	b289      	uxth	r1, r1
 800740c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007410:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007414:	f8d9 2000 	ldr.w	r2, [r9]
 8007418:	4461      	add	r1, ip
 800741a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800741e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007426:	b289      	uxth	r1, r1
 8007428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800742c:	4577      	cmp	r7, lr
 800742e:	f849 1b04 	str.w	r1, [r9], #4
 8007432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007436:	d8e2      	bhi.n	80073fe <__multiply+0xb2>
 8007438:	9a01      	ldr	r2, [sp, #4]
 800743a:	f845 c002 	str.w	ip, [r5, r2]
 800743e:	9a03      	ldr	r2, [sp, #12]
 8007440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007444:	3304      	adds	r3, #4
 8007446:	f1b9 0f00 	cmp.w	r9, #0
 800744a:	d021      	beq.n	8007490 <__multiply+0x144>
 800744c:	6829      	ldr	r1, [r5, #0]
 800744e:	f104 0c14 	add.w	ip, r4, #20
 8007452:	46ae      	mov	lr, r5
 8007454:	f04f 0a00 	mov.w	sl, #0
 8007458:	f8bc b000 	ldrh.w	fp, [ip]
 800745c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007460:	fb09 220b 	mla	r2, r9, fp, r2
 8007464:	4452      	add	r2, sl
 8007466:	b289      	uxth	r1, r1
 8007468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800746c:	f84e 1b04 	str.w	r1, [lr], #4
 8007470:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007474:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007478:	f8be 1000 	ldrh.w	r1, [lr]
 800747c:	fb09 110a 	mla	r1, r9, sl, r1
 8007480:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007484:	4567      	cmp	r7, ip
 8007486:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800748a:	d8e5      	bhi.n	8007458 <__multiply+0x10c>
 800748c:	9a01      	ldr	r2, [sp, #4]
 800748e:	50a9      	str	r1, [r5, r2]
 8007490:	3504      	adds	r5, #4
 8007492:	e799      	b.n	80073c8 <__multiply+0x7c>
 8007494:	3e01      	subs	r6, #1
 8007496:	e79b      	b.n	80073d0 <__multiply+0x84>
 8007498:	08008734 	.word	0x08008734
 800749c:	08008745 	.word	0x08008745

080074a0 <__pow5mult>:
 80074a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a4:	4615      	mov	r5, r2
 80074a6:	f012 0203 	ands.w	r2, r2, #3
 80074aa:	4606      	mov	r6, r0
 80074ac:	460f      	mov	r7, r1
 80074ae:	d007      	beq.n	80074c0 <__pow5mult+0x20>
 80074b0:	4c25      	ldr	r4, [pc, #148]	; (8007548 <__pow5mult+0xa8>)
 80074b2:	3a01      	subs	r2, #1
 80074b4:	2300      	movs	r3, #0
 80074b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ba:	f7ff fe9d 	bl	80071f8 <__multadd>
 80074be:	4607      	mov	r7, r0
 80074c0:	10ad      	asrs	r5, r5, #2
 80074c2:	d03d      	beq.n	8007540 <__pow5mult+0xa0>
 80074c4:	69f4      	ldr	r4, [r6, #28]
 80074c6:	b97c      	cbnz	r4, 80074e8 <__pow5mult+0x48>
 80074c8:	2010      	movs	r0, #16
 80074ca:	f7ff fd7f 	bl	8006fcc <malloc>
 80074ce:	4602      	mov	r2, r0
 80074d0:	61f0      	str	r0, [r6, #28]
 80074d2:	b928      	cbnz	r0, 80074e0 <__pow5mult+0x40>
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <__pow5mult+0xac>)
 80074d6:	481e      	ldr	r0, [pc, #120]	; (8007550 <__pow5mult+0xb0>)
 80074d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074dc:	f000 fbd6 	bl	8007c8c <__assert_func>
 80074e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074e4:	6004      	str	r4, [r0, #0]
 80074e6:	60c4      	str	r4, [r0, #12]
 80074e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074f0:	b94c      	cbnz	r4, 8007506 <__pow5mult+0x66>
 80074f2:	f240 2171 	movw	r1, #625	; 0x271
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7ff ff12 	bl	8007320 <__i2b>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007502:	4604      	mov	r4, r0
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	f04f 0900 	mov.w	r9, #0
 800750a:	07eb      	lsls	r3, r5, #31
 800750c:	d50a      	bpl.n	8007524 <__pow5mult+0x84>
 800750e:	4639      	mov	r1, r7
 8007510:	4622      	mov	r2, r4
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff ff1a 	bl	800734c <__multiply>
 8007518:	4639      	mov	r1, r7
 800751a:	4680      	mov	r8, r0
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fe49 	bl	80071b4 <_Bfree>
 8007522:	4647      	mov	r7, r8
 8007524:	106d      	asrs	r5, r5, #1
 8007526:	d00b      	beq.n	8007540 <__pow5mult+0xa0>
 8007528:	6820      	ldr	r0, [r4, #0]
 800752a:	b938      	cbnz	r0, 800753c <__pow5mult+0x9c>
 800752c:	4622      	mov	r2, r4
 800752e:	4621      	mov	r1, r4
 8007530:	4630      	mov	r0, r6
 8007532:	f7ff ff0b 	bl	800734c <__multiply>
 8007536:	6020      	str	r0, [r4, #0]
 8007538:	f8c0 9000 	str.w	r9, [r0]
 800753c:	4604      	mov	r4, r0
 800753e:	e7e4      	b.n	800750a <__pow5mult+0x6a>
 8007540:	4638      	mov	r0, r7
 8007542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007546:	bf00      	nop
 8007548:	08008890 	.word	0x08008890
 800754c:	080086c5 	.word	0x080086c5
 8007550:	08008745 	.word	0x08008745

08007554 <__lshift>:
 8007554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007558:	460c      	mov	r4, r1
 800755a:	6849      	ldr	r1, [r1, #4]
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	4607      	mov	r7, r0
 8007566:	4691      	mov	r9, r2
 8007568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800756c:	f108 0601 	add.w	r6, r8, #1
 8007570:	42b3      	cmp	r3, r6
 8007572:	db0b      	blt.n	800758c <__lshift+0x38>
 8007574:	4638      	mov	r0, r7
 8007576:	f7ff fddd 	bl	8007134 <_Balloc>
 800757a:	4605      	mov	r5, r0
 800757c:	b948      	cbnz	r0, 8007592 <__lshift+0x3e>
 800757e:	4602      	mov	r2, r0
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <__lshift+0xd0>)
 8007582:	4829      	ldr	r0, [pc, #164]	; (8007628 <__lshift+0xd4>)
 8007584:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007588:	f000 fb80 	bl	8007c8c <__assert_func>
 800758c:	3101      	adds	r1, #1
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	e7ee      	b.n	8007570 <__lshift+0x1c>
 8007592:	2300      	movs	r3, #0
 8007594:	f100 0114 	add.w	r1, r0, #20
 8007598:	f100 0210 	add.w	r2, r0, #16
 800759c:	4618      	mov	r0, r3
 800759e:	4553      	cmp	r3, sl
 80075a0:	db33      	blt.n	800760a <__lshift+0xb6>
 80075a2:	6920      	ldr	r0, [r4, #16]
 80075a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075a8:	f104 0314 	add.w	r3, r4, #20
 80075ac:	f019 091f 	ands.w	r9, r9, #31
 80075b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075b8:	d02b      	beq.n	8007612 <__lshift+0xbe>
 80075ba:	f1c9 0e20 	rsb	lr, r9, #32
 80075be:	468a      	mov	sl, r1
 80075c0:	2200      	movs	r2, #0
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	fa00 f009 	lsl.w	r0, r0, r9
 80075c8:	4310      	orrs	r0, r2
 80075ca:	f84a 0b04 	str.w	r0, [sl], #4
 80075ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d2:	459c      	cmp	ip, r3
 80075d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80075d8:	d8f3      	bhi.n	80075c2 <__lshift+0x6e>
 80075da:	ebac 0304 	sub.w	r3, ip, r4
 80075de:	3b15      	subs	r3, #21
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	3304      	adds	r3, #4
 80075e6:	f104 0015 	add.w	r0, r4, #21
 80075ea:	4584      	cmp	ip, r0
 80075ec:	bf38      	it	cc
 80075ee:	2304      	movcc	r3, #4
 80075f0:	50ca      	str	r2, [r1, r3]
 80075f2:	b10a      	cbz	r2, 80075f8 <__lshift+0xa4>
 80075f4:	f108 0602 	add.w	r6, r8, #2
 80075f8:	3e01      	subs	r6, #1
 80075fa:	4638      	mov	r0, r7
 80075fc:	612e      	str	r6, [r5, #16]
 80075fe:	4621      	mov	r1, r4
 8007600:	f7ff fdd8 	bl	80071b4 <_Bfree>
 8007604:	4628      	mov	r0, r5
 8007606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760a:	f842 0f04 	str.w	r0, [r2, #4]!
 800760e:	3301      	adds	r3, #1
 8007610:	e7c5      	b.n	800759e <__lshift+0x4a>
 8007612:	3904      	subs	r1, #4
 8007614:	f853 2b04 	ldr.w	r2, [r3], #4
 8007618:	f841 2f04 	str.w	r2, [r1, #4]!
 800761c:	459c      	cmp	ip, r3
 800761e:	d8f9      	bhi.n	8007614 <__lshift+0xc0>
 8007620:	e7ea      	b.n	80075f8 <__lshift+0xa4>
 8007622:	bf00      	nop
 8007624:	08008734 	.word	0x08008734
 8007628:	08008745 	.word	0x08008745

0800762c <__mcmp>:
 800762c:	b530      	push	{r4, r5, lr}
 800762e:	6902      	ldr	r2, [r0, #16]
 8007630:	690c      	ldr	r4, [r1, #16]
 8007632:	1b12      	subs	r2, r2, r4
 8007634:	d10e      	bne.n	8007654 <__mcmp+0x28>
 8007636:	f100 0314 	add.w	r3, r0, #20
 800763a:	3114      	adds	r1, #20
 800763c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800764c:	42a5      	cmp	r5, r4
 800764e:	d003      	beq.n	8007658 <__mcmp+0x2c>
 8007650:	d305      	bcc.n	800765e <__mcmp+0x32>
 8007652:	2201      	movs	r2, #1
 8007654:	4610      	mov	r0, r2
 8007656:	bd30      	pop	{r4, r5, pc}
 8007658:	4283      	cmp	r3, r0
 800765a:	d3f3      	bcc.n	8007644 <__mcmp+0x18>
 800765c:	e7fa      	b.n	8007654 <__mcmp+0x28>
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	e7f7      	b.n	8007654 <__mcmp+0x28>

08007664 <__mdiff>:
 8007664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	4606      	mov	r6, r0
 800766c:	4611      	mov	r1, r2
 800766e:	4620      	mov	r0, r4
 8007670:	4690      	mov	r8, r2
 8007672:	f7ff ffdb 	bl	800762c <__mcmp>
 8007676:	1e05      	subs	r5, r0, #0
 8007678:	d110      	bne.n	800769c <__mdiff+0x38>
 800767a:	4629      	mov	r1, r5
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff fd59 	bl	8007134 <_Balloc>
 8007682:	b930      	cbnz	r0, 8007692 <__mdiff+0x2e>
 8007684:	4b3a      	ldr	r3, [pc, #232]	; (8007770 <__mdiff+0x10c>)
 8007686:	4602      	mov	r2, r0
 8007688:	f240 2137 	movw	r1, #567	; 0x237
 800768c:	4839      	ldr	r0, [pc, #228]	; (8007774 <__mdiff+0x110>)
 800768e:	f000 fafd 	bl	8007c8c <__assert_func>
 8007692:	2301      	movs	r3, #1
 8007694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	bfa4      	itt	ge
 800769e:	4643      	movge	r3, r8
 80076a0:	46a0      	movge	r8, r4
 80076a2:	4630      	mov	r0, r6
 80076a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076a8:	bfa6      	itte	ge
 80076aa:	461c      	movge	r4, r3
 80076ac:	2500      	movge	r5, #0
 80076ae:	2501      	movlt	r5, #1
 80076b0:	f7ff fd40 	bl	8007134 <_Balloc>
 80076b4:	b920      	cbnz	r0, 80076c0 <__mdiff+0x5c>
 80076b6:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <__mdiff+0x10c>)
 80076b8:	4602      	mov	r2, r0
 80076ba:	f240 2145 	movw	r1, #581	; 0x245
 80076be:	e7e5      	b.n	800768c <__mdiff+0x28>
 80076c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076c4:	6926      	ldr	r6, [r4, #16]
 80076c6:	60c5      	str	r5, [r0, #12]
 80076c8:	f104 0914 	add.w	r9, r4, #20
 80076cc:	f108 0514 	add.w	r5, r8, #20
 80076d0:	f100 0e14 	add.w	lr, r0, #20
 80076d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076dc:	f108 0210 	add.w	r2, r8, #16
 80076e0:	46f2      	mov	sl, lr
 80076e2:	2100      	movs	r1, #0
 80076e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076ec:	fa11 f88b 	uxtah	r8, r1, fp
 80076f0:	b299      	uxth	r1, r3
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	eba8 0801 	sub.w	r8, r8, r1
 80076f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007700:	fa1f f888 	uxth.w	r8, r8
 8007704:	1419      	asrs	r1, r3, #16
 8007706:	454e      	cmp	r6, r9
 8007708:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800770c:	f84a 3b04 	str.w	r3, [sl], #4
 8007710:	d8e8      	bhi.n	80076e4 <__mdiff+0x80>
 8007712:	1b33      	subs	r3, r6, r4
 8007714:	3b15      	subs	r3, #21
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	3304      	adds	r3, #4
 800771c:	3415      	adds	r4, #21
 800771e:	42a6      	cmp	r6, r4
 8007720:	bf38      	it	cc
 8007722:	2304      	movcc	r3, #4
 8007724:	441d      	add	r5, r3
 8007726:	4473      	add	r3, lr
 8007728:	469e      	mov	lr, r3
 800772a:	462e      	mov	r6, r5
 800772c:	4566      	cmp	r6, ip
 800772e:	d30e      	bcc.n	800774e <__mdiff+0xea>
 8007730:	f10c 0203 	add.w	r2, ip, #3
 8007734:	1b52      	subs	r2, r2, r5
 8007736:	f022 0203 	bic.w	r2, r2, #3
 800773a:	3d03      	subs	r5, #3
 800773c:	45ac      	cmp	ip, r5
 800773e:	bf38      	it	cc
 8007740:	2200      	movcc	r2, #0
 8007742:	4413      	add	r3, r2
 8007744:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007748:	b17a      	cbz	r2, 800776a <__mdiff+0x106>
 800774a:	6107      	str	r7, [r0, #16]
 800774c:	e7a4      	b.n	8007698 <__mdiff+0x34>
 800774e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007752:	fa11 f288 	uxtah	r2, r1, r8
 8007756:	1414      	asrs	r4, r2, #16
 8007758:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800775c:	b292      	uxth	r2, r2
 800775e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007762:	f84e 2b04 	str.w	r2, [lr], #4
 8007766:	1421      	asrs	r1, r4, #16
 8007768:	e7e0      	b.n	800772c <__mdiff+0xc8>
 800776a:	3f01      	subs	r7, #1
 800776c:	e7ea      	b.n	8007744 <__mdiff+0xe0>
 800776e:	bf00      	nop
 8007770:	08008734 	.word	0x08008734
 8007774:	08008745 	.word	0x08008745

08007778 <__d2b>:
 8007778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800777c:	460f      	mov	r7, r1
 800777e:	2101      	movs	r1, #1
 8007780:	ec59 8b10 	vmov	r8, r9, d0
 8007784:	4616      	mov	r6, r2
 8007786:	f7ff fcd5 	bl	8007134 <_Balloc>
 800778a:	4604      	mov	r4, r0
 800778c:	b930      	cbnz	r0, 800779c <__d2b+0x24>
 800778e:	4602      	mov	r2, r0
 8007790:	4b24      	ldr	r3, [pc, #144]	; (8007824 <__d2b+0xac>)
 8007792:	4825      	ldr	r0, [pc, #148]	; (8007828 <__d2b+0xb0>)
 8007794:	f240 310f 	movw	r1, #783	; 0x30f
 8007798:	f000 fa78 	bl	8007c8c <__assert_func>
 800779c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077a4:	bb2d      	cbnz	r5, 80077f2 <__d2b+0x7a>
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	f1b8 0300 	subs.w	r3, r8, #0
 80077ac:	d026      	beq.n	80077fc <__d2b+0x84>
 80077ae:	4668      	mov	r0, sp
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	f7ff fd87 	bl	80072c4 <__lo0bits>
 80077b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ba:	b1e8      	cbz	r0, 80077f8 <__d2b+0x80>
 80077bc:	f1c0 0320 	rsb	r3, r0, #32
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	430b      	orrs	r3, r1
 80077c6:	40c2      	lsrs	r2, r0
 80077c8:	6163      	str	r3, [r4, #20]
 80077ca:	9201      	str	r2, [sp, #4]
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	61a3      	str	r3, [r4, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf14      	ite	ne
 80077d4:	2202      	movne	r2, #2
 80077d6:	2201      	moveq	r2, #1
 80077d8:	6122      	str	r2, [r4, #16]
 80077da:	b1bd      	cbz	r5, 800780c <__d2b+0x94>
 80077dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077e0:	4405      	add	r5, r0
 80077e2:	603d      	str	r5, [r7, #0]
 80077e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077e8:	6030      	str	r0, [r6, #0]
 80077ea:	4620      	mov	r0, r4
 80077ec:	b003      	add	sp, #12
 80077ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f6:	e7d6      	b.n	80077a6 <__d2b+0x2e>
 80077f8:	6161      	str	r1, [r4, #20]
 80077fa:	e7e7      	b.n	80077cc <__d2b+0x54>
 80077fc:	a801      	add	r0, sp, #4
 80077fe:	f7ff fd61 	bl	80072c4 <__lo0bits>
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	6163      	str	r3, [r4, #20]
 8007806:	3020      	adds	r0, #32
 8007808:	2201      	movs	r2, #1
 800780a:	e7e5      	b.n	80077d8 <__d2b+0x60>
 800780c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007814:	6038      	str	r0, [r7, #0]
 8007816:	6918      	ldr	r0, [r3, #16]
 8007818:	f7ff fd34 	bl	8007284 <__hi0bits>
 800781c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007820:	e7e2      	b.n	80077e8 <__d2b+0x70>
 8007822:	bf00      	nop
 8007824:	08008734 	.word	0x08008734
 8007828:	08008745 	.word	0x08008745

0800782c <__ssputs_r>:
 800782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	688e      	ldr	r6, [r1, #8]
 8007832:	461f      	mov	r7, r3
 8007834:	42be      	cmp	r6, r7
 8007836:	680b      	ldr	r3, [r1, #0]
 8007838:	4682      	mov	sl, r0
 800783a:	460c      	mov	r4, r1
 800783c:	4690      	mov	r8, r2
 800783e:	d82c      	bhi.n	800789a <__ssputs_r+0x6e>
 8007840:	898a      	ldrh	r2, [r1, #12]
 8007842:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007846:	d026      	beq.n	8007896 <__ssputs_r+0x6a>
 8007848:	6965      	ldr	r5, [r4, #20]
 800784a:	6909      	ldr	r1, [r1, #16]
 800784c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007850:	eba3 0901 	sub.w	r9, r3, r1
 8007854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007858:	1c7b      	adds	r3, r7, #1
 800785a:	444b      	add	r3, r9
 800785c:	106d      	asrs	r5, r5, #1
 800785e:	429d      	cmp	r5, r3
 8007860:	bf38      	it	cc
 8007862:	461d      	movcc	r5, r3
 8007864:	0553      	lsls	r3, r2, #21
 8007866:	d527      	bpl.n	80078b8 <__ssputs_r+0x8c>
 8007868:	4629      	mov	r1, r5
 800786a:	f7ff fbd7 	bl	800701c <_malloc_r>
 800786e:	4606      	mov	r6, r0
 8007870:	b360      	cbz	r0, 80078cc <__ssputs_r+0xa0>
 8007872:	6921      	ldr	r1, [r4, #16]
 8007874:	464a      	mov	r2, r9
 8007876:	f7fe fcd4 	bl	8006222 <memcpy>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	6126      	str	r6, [r4, #16]
 8007888:	6165      	str	r5, [r4, #20]
 800788a:	444e      	add	r6, r9
 800788c:	eba5 0509 	sub.w	r5, r5, r9
 8007890:	6026      	str	r6, [r4, #0]
 8007892:	60a5      	str	r5, [r4, #8]
 8007894:	463e      	mov	r6, r7
 8007896:	42be      	cmp	r6, r7
 8007898:	d900      	bls.n	800789c <__ssputs_r+0x70>
 800789a:	463e      	mov	r6, r7
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	4632      	mov	r2, r6
 80078a0:	4641      	mov	r1, r8
 80078a2:	f000 f9c9 	bl	8007c38 <memmove>
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	1b9b      	subs	r3, r3, r6
 80078aa:	60a3      	str	r3, [r4, #8]
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	4433      	add	r3, r6
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	2000      	movs	r0, #0
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	462a      	mov	r2, r5
 80078ba:	f000 fa2d 	bl	8007d18 <_realloc_r>
 80078be:	4606      	mov	r6, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1e0      	bne.n	8007886 <__ssputs_r+0x5a>
 80078c4:	6921      	ldr	r1, [r4, #16]
 80078c6:	4650      	mov	r0, sl
 80078c8:	f7ff fb34 	bl	8006f34 <_free_r>
 80078cc:	230c      	movs	r3, #12
 80078ce:	f8ca 3000 	str.w	r3, [sl]
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	e7e9      	b.n	80078b4 <__ssputs_r+0x88>

080078e0 <_svfiprintf_r>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	4698      	mov	r8, r3
 80078e6:	898b      	ldrh	r3, [r1, #12]
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	b09d      	sub	sp, #116	; 0x74
 80078ec:	4607      	mov	r7, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	4614      	mov	r4, r2
 80078f2:	d50e      	bpl.n	8007912 <_svfiprintf_r+0x32>
 80078f4:	690b      	ldr	r3, [r1, #16]
 80078f6:	b963      	cbnz	r3, 8007912 <_svfiprintf_r+0x32>
 80078f8:	2140      	movs	r1, #64	; 0x40
 80078fa:	f7ff fb8f 	bl	800701c <_malloc_r>
 80078fe:	6028      	str	r0, [r5, #0]
 8007900:	6128      	str	r0, [r5, #16]
 8007902:	b920      	cbnz	r0, 800790e <_svfiprintf_r+0x2e>
 8007904:	230c      	movs	r3, #12
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e0d0      	b.n	8007ab0 <_svfiprintf_r+0x1d0>
 800790e:	2340      	movs	r3, #64	; 0x40
 8007910:	616b      	str	r3, [r5, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	2320      	movs	r3, #32
 8007918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800791c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007920:	2330      	movs	r3, #48	; 0x30
 8007922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ac8 <_svfiprintf_r+0x1e8>
 8007926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800792a:	f04f 0901 	mov.w	r9, #1
 800792e:	4623      	mov	r3, r4
 8007930:	469a      	mov	sl, r3
 8007932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007936:	b10a      	cbz	r2, 800793c <_svfiprintf_r+0x5c>
 8007938:	2a25      	cmp	r2, #37	; 0x25
 800793a:	d1f9      	bne.n	8007930 <_svfiprintf_r+0x50>
 800793c:	ebba 0b04 	subs.w	fp, sl, r4
 8007940:	d00b      	beq.n	800795a <_svfiprintf_r+0x7a>
 8007942:	465b      	mov	r3, fp
 8007944:	4622      	mov	r2, r4
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ff6f 	bl	800782c <__ssputs_r>
 800794e:	3001      	adds	r0, #1
 8007950:	f000 80a9 	beq.w	8007aa6 <_svfiprintf_r+0x1c6>
 8007954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007956:	445a      	add	r2, fp
 8007958:	9209      	str	r2, [sp, #36]	; 0x24
 800795a:	f89a 3000 	ldrb.w	r3, [sl]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80a1 	beq.w	8007aa6 <_svfiprintf_r+0x1c6>
 8007964:	2300      	movs	r3, #0
 8007966:	f04f 32ff 	mov.w	r2, #4294967295
 800796a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800796e:	f10a 0a01 	add.w	sl, sl, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800797a:	931a      	str	r3, [sp, #104]	; 0x68
 800797c:	4654      	mov	r4, sl
 800797e:	2205      	movs	r2, #5
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	4850      	ldr	r0, [pc, #320]	; (8007ac8 <_svfiprintf_r+0x1e8>)
 8007986:	f7f8 fc23 	bl	80001d0 <memchr>
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	b9d8      	cbnz	r0, 80079c6 <_svfiprintf_r+0xe6>
 800798e:	06d0      	lsls	r0, r2, #27
 8007990:	bf44      	itt	mi
 8007992:	2320      	movmi	r3, #32
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007998:	0711      	lsls	r1, r2, #28
 800799a:	bf44      	itt	mi
 800799c:	232b      	movmi	r3, #43	; 0x2b
 800799e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b2a      	cmp	r3, #42	; 0x2a
 80079a8:	d015      	beq.n	80079d6 <_svfiprintf_r+0xf6>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	4654      	mov	r4, sl
 80079ae:	2000      	movs	r0, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4621      	mov	r1, r4
 80079b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ba:	3b30      	subs	r3, #48	; 0x30
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d94d      	bls.n	8007a5c <_svfiprintf_r+0x17c>
 80079c0:	b1b0      	cbz	r0, 80079f0 <_svfiprintf_r+0x110>
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	e014      	b.n	80079f0 <_svfiprintf_r+0x110>
 80079c6:	eba0 0308 	sub.w	r3, r0, r8
 80079ca:	fa09 f303 	lsl.w	r3, r9, r3
 80079ce:	4313      	orrs	r3, r2
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	46a2      	mov	sl, r4
 80079d4:	e7d2      	b.n	800797c <_svfiprintf_r+0x9c>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbb      	ittet	lt
 80079e2:	425b      	neglt	r3, r3
 80079e4:	f042 0202 	orrlt.w	r2, r2, #2
 80079e8:	9307      	strge	r3, [sp, #28]
 80079ea:	9307      	strlt	r3, [sp, #28]
 80079ec:	bfb8      	it	lt
 80079ee:	9204      	strlt	r2, [sp, #16]
 80079f0:	7823      	ldrb	r3, [r4, #0]
 80079f2:	2b2e      	cmp	r3, #46	; 0x2e
 80079f4:	d10c      	bne.n	8007a10 <_svfiprintf_r+0x130>
 80079f6:	7863      	ldrb	r3, [r4, #1]
 80079f8:	2b2a      	cmp	r3, #42	; 0x2a
 80079fa:	d134      	bne.n	8007a66 <_svfiprintf_r+0x186>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	9203      	str	r2, [sp, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfb8      	it	lt
 8007a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a0c:	3402      	adds	r4, #2
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ad8 <_svfiprintf_r+0x1f8>
 8007a14:	7821      	ldrb	r1, [r4, #0]
 8007a16:	2203      	movs	r2, #3
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f7f8 fbd9 	bl	80001d0 <memchr>
 8007a1e:	b138      	cbz	r0, 8007a30 <_svfiprintf_r+0x150>
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	eba0 000a 	sub.w	r0, r0, sl
 8007a26:	2240      	movs	r2, #64	; 0x40
 8007a28:	4082      	lsls	r2, r0
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	3401      	adds	r4, #1
 8007a2e:	9304      	str	r3, [sp, #16]
 8007a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a34:	4825      	ldr	r0, [pc, #148]	; (8007acc <_svfiprintf_r+0x1ec>)
 8007a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	f7f8 fbc8 	bl	80001d0 <memchr>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d038      	beq.n	8007ab6 <_svfiprintf_r+0x1d6>
 8007a44:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <_svfiprintf_r+0x1f0>)
 8007a46:	bb1b      	cbnz	r3, 8007a90 <_svfiprintf_r+0x1b0>
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	3307      	adds	r3, #7
 8007a4c:	f023 0307 	bic.w	r3, r3, #7
 8007a50:	3308      	adds	r3, #8
 8007a52:	9303      	str	r3, [sp, #12]
 8007a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a56:	4433      	add	r3, r6
 8007a58:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5a:	e768      	b.n	800792e <_svfiprintf_r+0x4e>
 8007a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a60:	460c      	mov	r4, r1
 8007a62:	2001      	movs	r0, #1
 8007a64:	e7a6      	b.n	80079b4 <_svfiprintf_r+0xd4>
 8007a66:	2300      	movs	r3, #0
 8007a68:	3401      	adds	r4, #1
 8007a6a:	9305      	str	r3, [sp, #20]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f04f 0c0a 	mov.w	ip, #10
 8007a72:	4620      	mov	r0, r4
 8007a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a78:	3a30      	subs	r2, #48	; 0x30
 8007a7a:	2a09      	cmp	r2, #9
 8007a7c:	d903      	bls.n	8007a86 <_svfiprintf_r+0x1a6>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0c6      	beq.n	8007a10 <_svfiprintf_r+0x130>
 8007a82:	9105      	str	r1, [sp, #20]
 8007a84:	e7c4      	b.n	8007a10 <_svfiprintf_r+0x130>
 8007a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e7f0      	b.n	8007a72 <_svfiprintf_r+0x192>
 8007a90:	ab03      	add	r3, sp, #12
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	462a      	mov	r2, r5
 8007a96:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <_svfiprintf_r+0x1f4>)
 8007a98:	a904      	add	r1, sp, #16
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7fd fe56 	bl	800574c <_printf_float>
 8007aa0:	1c42      	adds	r2, r0, #1
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	d1d6      	bne.n	8007a54 <_svfiprintf_r+0x174>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	065b      	lsls	r3, r3, #25
 8007aaa:	f53f af2d 	bmi.w	8007908 <_svfiprintf_r+0x28>
 8007aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab0:	b01d      	add	sp, #116	; 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	ab03      	add	r3, sp, #12
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	462a      	mov	r2, r5
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <_svfiprintf_r+0x1f4>)
 8007abe:	a904      	add	r1, sp, #16
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7fe f8e7 	bl	8005c94 <_printf_i>
 8007ac6:	e7eb      	b.n	8007aa0 <_svfiprintf_r+0x1c0>
 8007ac8:	0800889c 	.word	0x0800889c
 8007acc:	080088a6 	.word	0x080088a6
 8007ad0:	0800574d 	.word	0x0800574d
 8007ad4:	0800782d 	.word	0x0800782d
 8007ad8:	080088a2 	.word	0x080088a2

08007adc <__sflush_r>:
 8007adc:	898a      	ldrh	r2, [r1, #12]
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	0710      	lsls	r0, r2, #28
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	d458      	bmi.n	8007b9c <__sflush_r+0xc0>
 8007aea:	684b      	ldr	r3, [r1, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc05      	bgt.n	8007afc <__sflush_r+0x20>
 8007af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc02      	bgt.n	8007afc <__sflush_r+0x20>
 8007af6:	2000      	movs	r0, #0
 8007af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d0f9      	beq.n	8007af6 <__sflush_r+0x1a>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b08:	682f      	ldr	r7, [r5, #0]
 8007b0a:	6a21      	ldr	r1, [r4, #32]
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	d032      	beq.n	8007b76 <__sflush_r+0x9a>
 8007b10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	075a      	lsls	r2, r3, #29
 8007b16:	d505      	bpl.n	8007b24 <__sflush_r+0x48>
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	1ac0      	subs	r0, r0, r3
 8007b1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b1e:	b10b      	cbz	r3, 8007b24 <__sflush_r+0x48>
 8007b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b22:	1ac0      	subs	r0, r0, r3
 8007b24:	2300      	movs	r3, #0
 8007b26:	4602      	mov	r2, r0
 8007b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b2a:	6a21      	ldr	r1, [r4, #32]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b0      	blx	r6
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	d106      	bne.n	8007b44 <__sflush_r+0x68>
 8007b36:	6829      	ldr	r1, [r5, #0]
 8007b38:	291d      	cmp	r1, #29
 8007b3a:	d82b      	bhi.n	8007b94 <__sflush_r+0xb8>
 8007b3c:	4a29      	ldr	r2, [pc, #164]	; (8007be4 <__sflush_r+0x108>)
 8007b3e:	410a      	asrs	r2, r1
 8007b40:	07d6      	lsls	r6, r2, #31
 8007b42:	d427      	bmi.n	8007b94 <__sflush_r+0xb8>
 8007b44:	2200      	movs	r2, #0
 8007b46:	6062      	str	r2, [r4, #4]
 8007b48:	04d9      	lsls	r1, r3, #19
 8007b4a:	6922      	ldr	r2, [r4, #16]
 8007b4c:	6022      	str	r2, [r4, #0]
 8007b4e:	d504      	bpl.n	8007b5a <__sflush_r+0x7e>
 8007b50:	1c42      	adds	r2, r0, #1
 8007b52:	d101      	bne.n	8007b58 <__sflush_r+0x7c>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b903      	cbnz	r3, 8007b5a <__sflush_r+0x7e>
 8007b58:	6560      	str	r0, [r4, #84]	; 0x54
 8007b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b5c:	602f      	str	r7, [r5, #0]
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d0c9      	beq.n	8007af6 <__sflush_r+0x1a>
 8007b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b66:	4299      	cmp	r1, r3
 8007b68:	d002      	beq.n	8007b70 <__sflush_r+0x94>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff f9e2 	bl	8006f34 <_free_r>
 8007b70:	2000      	movs	r0, #0
 8007b72:	6360      	str	r0, [r4, #52]	; 0x34
 8007b74:	e7c0      	b.n	8007af8 <__sflush_r+0x1c>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b0      	blx	r6
 8007b7c:	1c41      	adds	r1, r0, #1
 8007b7e:	d1c8      	bne.n	8007b12 <__sflush_r+0x36>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c5      	beq.n	8007b12 <__sflush_r+0x36>
 8007b86:	2b1d      	cmp	r3, #29
 8007b88:	d001      	beq.n	8007b8e <__sflush_r+0xb2>
 8007b8a:	2b16      	cmp	r3, #22
 8007b8c:	d101      	bne.n	8007b92 <__sflush_r+0xb6>
 8007b8e:	602f      	str	r7, [r5, #0]
 8007b90:	e7b1      	b.n	8007af6 <__sflush_r+0x1a>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	e7ad      	b.n	8007af8 <__sflush_r+0x1c>
 8007b9c:	690f      	ldr	r7, [r1, #16]
 8007b9e:	2f00      	cmp	r7, #0
 8007ba0:	d0a9      	beq.n	8007af6 <__sflush_r+0x1a>
 8007ba2:	0793      	lsls	r3, r2, #30
 8007ba4:	680e      	ldr	r6, [r1, #0]
 8007ba6:	bf08      	it	eq
 8007ba8:	694b      	ldreq	r3, [r1, #20]
 8007baa:	600f      	str	r7, [r1, #0]
 8007bac:	bf18      	it	ne
 8007bae:	2300      	movne	r3, #0
 8007bb0:	eba6 0807 	sub.w	r8, r6, r7
 8007bb4:	608b      	str	r3, [r1, #8]
 8007bb6:	f1b8 0f00 	cmp.w	r8, #0
 8007bba:	dd9c      	ble.n	8007af6 <__sflush_r+0x1a>
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bc0:	4643      	mov	r3, r8
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b0      	blx	r6
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dc06      	bgt.n	8007bda <__sflush_r+0xfe>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	e78e      	b.n	8007af8 <__sflush_r+0x1c>
 8007bda:	4407      	add	r7, r0
 8007bdc:	eba8 0800 	sub.w	r8, r8, r0
 8007be0:	e7e9      	b.n	8007bb6 <__sflush_r+0xda>
 8007be2:	bf00      	nop
 8007be4:	dfbffffe 	.word	0xdfbffffe

08007be8 <_fflush_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	690b      	ldr	r3, [r1, #16]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b913      	cbnz	r3, 8007bf8 <_fflush_r+0x10>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	b118      	cbz	r0, 8007c02 <_fflush_r+0x1a>
 8007bfa:	6a03      	ldr	r3, [r0, #32]
 8007bfc:	b90b      	cbnz	r3, 8007c02 <_fflush_r+0x1a>
 8007bfe:	f7fe f9f7 	bl	8005ff0 <__sinit>
 8007c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f3      	beq.n	8007bf2 <_fflush_r+0xa>
 8007c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c0c:	07d0      	lsls	r0, r2, #31
 8007c0e:	d404      	bmi.n	8007c1a <_fflush_r+0x32>
 8007c10:	0599      	lsls	r1, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_fflush_r+0x32>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f7fe fb02 	bl	800621e <__retarget_lock_acquire_recursive>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7ff ff5d 	bl	8007adc <__sflush_r>
 8007c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	4605      	mov	r5, r0
 8007c28:	d4e4      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	059b      	lsls	r3, r3, #22
 8007c2e:	d4e1      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c32:	f7fe faf5 	bl	8006220 <__retarget_lock_release_recursive>
 8007c36:	e7dd      	b.n	8007bf4 <_fflush_r+0xc>

08007c38 <memmove>:
 8007c38:	4288      	cmp	r0, r1
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	eb01 0402 	add.w	r4, r1, r2
 8007c40:	d902      	bls.n	8007c48 <memmove+0x10>
 8007c42:	4284      	cmp	r4, r0
 8007c44:	4623      	mov	r3, r4
 8007c46:	d807      	bhi.n	8007c58 <memmove+0x20>
 8007c48:	1e43      	subs	r3, r0, #1
 8007c4a:	42a1      	cmp	r1, r4
 8007c4c:	d008      	beq.n	8007c60 <memmove+0x28>
 8007c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c56:	e7f8      	b.n	8007c4a <memmove+0x12>
 8007c58:	4402      	add	r2, r0
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	428a      	cmp	r2, r1
 8007c5e:	d100      	bne.n	8007c62 <memmove+0x2a>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c6a:	e7f7      	b.n	8007c5c <memmove+0x24>

08007c6c <_sbrk_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d06      	ldr	r5, [pc, #24]	; (8007c88 <_sbrk_r+0x1c>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	f7f9 feda 	bl	8001a30 <_sbrk>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_sbrk_r+0x1a>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_sbrk_r+0x1a>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	200043b8 	.word	0x200043b8

08007c8c <__assert_func>:
 8007c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c8e:	4614      	mov	r4, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <__assert_func+0x2c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4605      	mov	r5, r0
 8007c98:	68d8      	ldr	r0, [r3, #12]
 8007c9a:	b14c      	cbz	r4, 8007cb0 <__assert_func+0x24>
 8007c9c:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <__assert_func+0x30>)
 8007c9e:	9100      	str	r1, [sp, #0]
 8007ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ca4:	4906      	ldr	r1, [pc, #24]	; (8007cc0 <__assert_func+0x34>)
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f000 f872 	bl	8007d90 <fiprintf>
 8007cac:	f000 f882 	bl	8007db4 <abort>
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <__assert_func+0x38>)
 8007cb2:	461c      	mov	r4, r3
 8007cb4:	e7f3      	b.n	8007c9e <__assert_func+0x12>
 8007cb6:	bf00      	nop
 8007cb8:	20000068 	.word	0x20000068
 8007cbc:	080088b7 	.word	0x080088b7
 8007cc0:	080088c4 	.word	0x080088c4
 8007cc4:	080088f2 	.word	0x080088f2

08007cc8 <_calloc_r>:
 8007cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cca:	fba1 2402 	umull	r2, r4, r1, r2
 8007cce:	b94c      	cbnz	r4, 8007ce4 <_calloc_r+0x1c>
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	9201      	str	r2, [sp, #4]
 8007cd4:	f7ff f9a2 	bl	800701c <_malloc_r>
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b930      	cbnz	r0, 8007cec <_calloc_r+0x24>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	b003      	add	sp, #12
 8007ce2:	bd30      	pop	{r4, r5, pc}
 8007ce4:	220c      	movs	r2, #12
 8007ce6:	6002      	str	r2, [r0, #0]
 8007ce8:	2500      	movs	r5, #0
 8007cea:	e7f8      	b.n	8007cde <_calloc_r+0x16>
 8007cec:	4621      	mov	r1, r4
 8007cee:	f7fe fa18 	bl	8006122 <memset>
 8007cf2:	e7f4      	b.n	8007cde <_calloc_r+0x16>

08007cf4 <__ascii_mbtowc>:
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	b901      	cbnz	r1, 8007cfa <__ascii_mbtowc+0x6>
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	b142      	cbz	r2, 8007d0e <__ascii_mbtowc+0x1a>
 8007cfc:	b14b      	cbz	r3, 8007d12 <__ascii_mbtowc+0x1e>
 8007cfe:	7813      	ldrb	r3, [r2, #0]
 8007d00:	600b      	str	r3, [r1, #0]
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	1e10      	subs	r0, r2, #0
 8007d06:	bf18      	it	ne
 8007d08:	2001      	movne	r0, #1
 8007d0a:	b002      	add	sp, #8
 8007d0c:	4770      	bx	lr
 8007d0e:	4610      	mov	r0, r2
 8007d10:	e7fb      	b.n	8007d0a <__ascii_mbtowc+0x16>
 8007d12:	f06f 0001 	mvn.w	r0, #1
 8007d16:	e7f8      	b.n	8007d0a <__ascii_mbtowc+0x16>

08007d18 <_realloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4614      	mov	r4, r2
 8007d20:	460e      	mov	r6, r1
 8007d22:	b921      	cbnz	r1, 8007d2e <_realloc_r+0x16>
 8007d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	4611      	mov	r1, r2
 8007d2a:	f7ff b977 	b.w	800701c <_malloc_r>
 8007d2e:	b92a      	cbnz	r2, 8007d3c <_realloc_r+0x24>
 8007d30:	f7ff f900 	bl	8006f34 <_free_r>
 8007d34:	4625      	mov	r5, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	f000 f841 	bl	8007dc2 <_malloc_usable_size_r>
 8007d40:	4284      	cmp	r4, r0
 8007d42:	4607      	mov	r7, r0
 8007d44:	d802      	bhi.n	8007d4c <_realloc_r+0x34>
 8007d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d4a:	d812      	bhi.n	8007d72 <_realloc_r+0x5a>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff f964 	bl	800701c <_malloc_r>
 8007d54:	4605      	mov	r5, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0ed      	beq.n	8007d36 <_realloc_r+0x1e>
 8007d5a:	42bc      	cmp	r4, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4631      	mov	r1, r6
 8007d60:	bf28      	it	cs
 8007d62:	463a      	movcs	r2, r7
 8007d64:	f7fe fa5d 	bl	8006222 <memcpy>
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7ff f8e2 	bl	8006f34 <_free_r>
 8007d70:	e7e1      	b.n	8007d36 <_realloc_r+0x1e>
 8007d72:	4635      	mov	r5, r6
 8007d74:	e7df      	b.n	8007d36 <_realloc_r+0x1e>

08007d76 <__ascii_wctomb>:
 8007d76:	b149      	cbz	r1, 8007d8c <__ascii_wctomb+0x16>
 8007d78:	2aff      	cmp	r2, #255	; 0xff
 8007d7a:	bf85      	ittet	hi
 8007d7c:	238a      	movhi	r3, #138	; 0x8a
 8007d7e:	6003      	strhi	r3, [r0, #0]
 8007d80:	700a      	strbls	r2, [r1, #0]
 8007d82:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d86:	bf98      	it	ls
 8007d88:	2001      	movls	r0, #1
 8007d8a:	4770      	bx	lr
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4770      	bx	lr

08007d90 <fiprintf>:
 8007d90:	b40e      	push	{r1, r2, r3}
 8007d92:	b503      	push	{r0, r1, lr}
 8007d94:	4601      	mov	r1, r0
 8007d96:	ab03      	add	r3, sp, #12
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <fiprintf+0x20>)
 8007d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	f000 f83f 	bl	8007e24 <_vfiprintf_r>
 8007da6:	b002      	add	sp, #8
 8007da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dac:	b003      	add	sp, #12
 8007dae:	4770      	bx	lr
 8007db0:	20000068 	.word	0x20000068

08007db4 <abort>:
 8007db4:	b508      	push	{r3, lr}
 8007db6:	2006      	movs	r0, #6
 8007db8:	f000 fa0c 	bl	80081d4 <raise>
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	f7f9 fdc0 	bl	8001942 <_exit>

08007dc2 <_malloc_usable_size_r>:
 8007dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc6:	1f18      	subs	r0, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfbc      	itt	lt
 8007dcc:	580b      	ldrlt	r3, [r1, r0]
 8007dce:	18c0      	addlt	r0, r0, r3
 8007dd0:	4770      	bx	lr

08007dd2 <__sfputc_r>:
 8007dd2:	6893      	ldr	r3, [r2, #8]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	b410      	push	{r4}
 8007dda:	6093      	str	r3, [r2, #8]
 8007ddc:	da08      	bge.n	8007df0 <__sfputc_r+0x1e>
 8007dde:	6994      	ldr	r4, [r2, #24]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	db01      	blt.n	8007de8 <__sfputc_r+0x16>
 8007de4:	290a      	cmp	r1, #10
 8007de6:	d103      	bne.n	8007df0 <__sfputc_r+0x1e>
 8007de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dec:	f000 b934 	b.w	8008058 <__swbuf_r>
 8007df0:	6813      	ldr	r3, [r2, #0]
 8007df2:	1c58      	adds	r0, r3, #1
 8007df4:	6010      	str	r0, [r2, #0]
 8007df6:	7019      	strb	r1, [r3, #0]
 8007df8:	4608      	mov	r0, r1
 8007dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <__sfputs_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	4614      	mov	r4, r2
 8007e08:	18d5      	adds	r5, r2, r3
 8007e0a:	42ac      	cmp	r4, r5
 8007e0c:	d101      	bne.n	8007e12 <__sfputs_r+0x12>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e007      	b.n	8007e22 <__sfputs_r+0x22>
 8007e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e16:	463a      	mov	r2, r7
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff ffda 	bl	8007dd2 <__sfputc_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d1f3      	bne.n	8007e0a <__sfputs_r+0xa>
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e24 <_vfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4698      	mov	r8, r3
 8007e30:	4606      	mov	r6, r0
 8007e32:	b118      	cbz	r0, 8007e3c <_vfiprintf_r+0x18>
 8007e34:	6a03      	ldr	r3, [r0, #32]
 8007e36:	b90b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x18>
 8007e38:	f7fe f8da 	bl	8005ff0 <__sinit>
 8007e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3e:	07d9      	lsls	r1, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_vfiprintf_r+0x2a>
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	059a      	lsls	r2, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_vfiprintf_r+0x2a>
 8007e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4a:	f7fe f9e8 	bl	800621e <__retarget_lock_acquire_recursive>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	071b      	lsls	r3, r3, #28
 8007e52:	d501      	bpl.n	8007e58 <_vfiprintf_r+0x34>
 8007e54:	692b      	ldr	r3, [r5, #16]
 8007e56:	b99b      	cbnz	r3, 8007e80 <_vfiprintf_r+0x5c>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f93a 	bl	80080d4 <__swsetup_r>
 8007e60:	b170      	cbz	r0, 8007e80 <_vfiprintf_r+0x5c>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e64:	07dc      	lsls	r4, r3, #31
 8007e66:	d504      	bpl.n	8007e72 <_vfiprintf_r+0x4e>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	; 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	0598      	lsls	r0, r3, #22
 8007e76:	d4f7      	bmi.n	8007e68 <_vfiprintf_r+0x44>
 8007e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7a:	f7fe f9d1 	bl	8006220 <__retarget_lock_release_recursive>
 8007e7e:	e7f3      	b.n	8007e68 <_vfiprintf_r+0x44>
 8007e80:	2300      	movs	r3, #0
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
 8007e84:	2320      	movs	r3, #32
 8007e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8e:	2330      	movs	r3, #48	; 0x30
 8007e90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008044 <_vfiprintf_r+0x220>
 8007e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e98:	f04f 0901 	mov.w	r9, #1
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	469a      	mov	sl, r3
 8007ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea4:	b10a      	cbz	r2, 8007eaa <_vfiprintf_r+0x86>
 8007ea6:	2a25      	cmp	r2, #37	; 0x25
 8007ea8:	d1f9      	bne.n	8007e9e <_vfiprintf_r+0x7a>
 8007eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8007eae:	d00b      	beq.n	8007ec8 <_vfiprintf_r+0xa4>
 8007eb0:	465b      	mov	r3, fp
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ffa2 	bl	8007e00 <__sfputs_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f000 80a9 	beq.w	8008014 <_vfiprintf_r+0x1f0>
 8007ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec4:	445a      	add	r2, fp
 8007ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80a1 	beq.w	8008014 <_vfiprintf_r+0x1f0>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007edc:	f10a 0a01 	add.w	sl, sl, #1
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8007eea:	4654      	mov	r4, sl
 8007eec:	2205      	movs	r2, #5
 8007eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef2:	4854      	ldr	r0, [pc, #336]	; (8008044 <_vfiprintf_r+0x220>)
 8007ef4:	f7f8 f96c 	bl	80001d0 <memchr>
 8007ef8:	9a04      	ldr	r2, [sp, #16]
 8007efa:	b9d8      	cbnz	r0, 8007f34 <_vfiprintf_r+0x110>
 8007efc:	06d1      	lsls	r1, r2, #27
 8007efe:	bf44      	itt	mi
 8007f00:	2320      	movmi	r3, #32
 8007f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f06:	0713      	lsls	r3, r2, #28
 8007f08:	bf44      	itt	mi
 8007f0a:	232b      	movmi	r3, #43	; 0x2b
 8007f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f10:	f89a 3000 	ldrb.w	r3, [sl]
 8007f14:	2b2a      	cmp	r3, #42	; 0x2a
 8007f16:	d015      	beq.n	8007f44 <_vfiprintf_r+0x120>
 8007f18:	9a07      	ldr	r2, [sp, #28]
 8007f1a:	4654      	mov	r4, sl
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f04f 0c0a 	mov.w	ip, #10
 8007f22:	4621      	mov	r1, r4
 8007f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f28:	3b30      	subs	r3, #48	; 0x30
 8007f2a:	2b09      	cmp	r3, #9
 8007f2c:	d94d      	bls.n	8007fca <_vfiprintf_r+0x1a6>
 8007f2e:	b1b0      	cbz	r0, 8007f5e <_vfiprintf_r+0x13a>
 8007f30:	9207      	str	r2, [sp, #28]
 8007f32:	e014      	b.n	8007f5e <_vfiprintf_r+0x13a>
 8007f34:	eba0 0308 	sub.w	r3, r0, r8
 8007f38:	fa09 f303 	lsl.w	r3, r9, r3
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	46a2      	mov	sl, r4
 8007f42:	e7d2      	b.n	8007eea <_vfiprintf_r+0xc6>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1d19      	adds	r1, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	9103      	str	r1, [sp, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfbb      	ittet	lt
 8007f50:	425b      	neglt	r3, r3
 8007f52:	f042 0202 	orrlt.w	r2, r2, #2
 8007f56:	9307      	strge	r3, [sp, #28]
 8007f58:	9307      	strlt	r3, [sp, #28]
 8007f5a:	bfb8      	it	lt
 8007f5c:	9204      	strlt	r2, [sp, #16]
 8007f5e:	7823      	ldrb	r3, [r4, #0]
 8007f60:	2b2e      	cmp	r3, #46	; 0x2e
 8007f62:	d10c      	bne.n	8007f7e <_vfiprintf_r+0x15a>
 8007f64:	7863      	ldrb	r3, [r4, #1]
 8007f66:	2b2a      	cmp	r3, #42	; 0x2a
 8007f68:	d134      	bne.n	8007fd4 <_vfiprintf_r+0x1b0>
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	1d1a      	adds	r2, r3, #4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	9203      	str	r2, [sp, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfb8      	it	lt
 8007f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f7a:	3402      	adds	r4, #2
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008054 <_vfiprintf_r+0x230>
 8007f82:	7821      	ldrb	r1, [r4, #0]
 8007f84:	2203      	movs	r2, #3
 8007f86:	4650      	mov	r0, sl
 8007f88:	f7f8 f922 	bl	80001d0 <memchr>
 8007f8c:	b138      	cbz	r0, 8007f9e <_vfiprintf_r+0x17a>
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	eba0 000a 	sub.w	r0, r0, sl
 8007f94:	2240      	movs	r2, #64	; 0x40
 8007f96:	4082      	lsls	r2, r0
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	3401      	adds	r4, #1
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4829      	ldr	r0, [pc, #164]	; (8008048 <_vfiprintf_r+0x224>)
 8007fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fa8:	2206      	movs	r2, #6
 8007faa:	f7f8 f911 	bl	80001d0 <memchr>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d03f      	beq.n	8008032 <_vfiprintf_r+0x20e>
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <_vfiprintf_r+0x228>)
 8007fb4:	bb1b      	cbnz	r3, 8007ffe <_vfiprintf_r+0x1da>
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	3307      	adds	r3, #7
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	9303      	str	r3, [sp, #12]
 8007fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc4:	443b      	add	r3, r7
 8007fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc8:	e768      	b.n	8007e9c <_vfiprintf_r+0x78>
 8007fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fce:	460c      	mov	r4, r1
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	e7a6      	b.n	8007f22 <_vfiprintf_r+0xfe>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	3401      	adds	r4, #1
 8007fd8:	9305      	str	r3, [sp, #20]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe6:	3a30      	subs	r2, #48	; 0x30
 8007fe8:	2a09      	cmp	r2, #9
 8007fea:	d903      	bls.n	8007ff4 <_vfiprintf_r+0x1d0>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0c6      	beq.n	8007f7e <_vfiprintf_r+0x15a>
 8007ff0:	9105      	str	r1, [sp, #20]
 8007ff2:	e7c4      	b.n	8007f7e <_vfiprintf_r+0x15a>
 8007ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7f0      	b.n	8007fe0 <_vfiprintf_r+0x1bc>
 8007ffe:	ab03      	add	r3, sp, #12
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	462a      	mov	r2, r5
 8008004:	4b12      	ldr	r3, [pc, #72]	; (8008050 <_vfiprintf_r+0x22c>)
 8008006:	a904      	add	r1, sp, #16
 8008008:	4630      	mov	r0, r6
 800800a:	f7fd fb9f 	bl	800574c <_printf_float>
 800800e:	4607      	mov	r7, r0
 8008010:	1c78      	adds	r0, r7, #1
 8008012:	d1d6      	bne.n	8007fc2 <_vfiprintf_r+0x19e>
 8008014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008016:	07d9      	lsls	r1, r3, #31
 8008018:	d405      	bmi.n	8008026 <_vfiprintf_r+0x202>
 800801a:	89ab      	ldrh	r3, [r5, #12]
 800801c:	059a      	lsls	r2, r3, #22
 800801e:	d402      	bmi.n	8008026 <_vfiprintf_r+0x202>
 8008020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008022:	f7fe f8fd 	bl	8006220 <__retarget_lock_release_recursive>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	065b      	lsls	r3, r3, #25
 800802a:	f53f af1d 	bmi.w	8007e68 <_vfiprintf_r+0x44>
 800802e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008030:	e71c      	b.n	8007e6c <_vfiprintf_r+0x48>
 8008032:	ab03      	add	r3, sp, #12
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	462a      	mov	r2, r5
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <_vfiprintf_r+0x22c>)
 800803a:	a904      	add	r1, sp, #16
 800803c:	4630      	mov	r0, r6
 800803e:	f7fd fe29 	bl	8005c94 <_printf_i>
 8008042:	e7e4      	b.n	800800e <_vfiprintf_r+0x1ea>
 8008044:	0800889c 	.word	0x0800889c
 8008048:	080088a6 	.word	0x080088a6
 800804c:	0800574d 	.word	0x0800574d
 8008050:	08007e01 	.word	0x08007e01
 8008054:	080088a2 	.word	0x080088a2

08008058 <__swbuf_r>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	460e      	mov	r6, r1
 800805c:	4614      	mov	r4, r2
 800805e:	4605      	mov	r5, r0
 8008060:	b118      	cbz	r0, 800806a <__swbuf_r+0x12>
 8008062:	6a03      	ldr	r3, [r0, #32]
 8008064:	b90b      	cbnz	r3, 800806a <__swbuf_r+0x12>
 8008066:	f7fd ffc3 	bl	8005ff0 <__sinit>
 800806a:	69a3      	ldr	r3, [r4, #24]
 800806c:	60a3      	str	r3, [r4, #8]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	071a      	lsls	r2, r3, #28
 8008072:	d525      	bpl.n	80080c0 <__swbuf_r+0x68>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	b31b      	cbz	r3, 80080c0 <__swbuf_r+0x68>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	6922      	ldr	r2, [r4, #16]
 800807c:	1a98      	subs	r0, r3, r2
 800807e:	6963      	ldr	r3, [r4, #20]
 8008080:	b2f6      	uxtb	r6, r6
 8008082:	4283      	cmp	r3, r0
 8008084:	4637      	mov	r7, r6
 8008086:	dc04      	bgt.n	8008092 <__swbuf_r+0x3a>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff fdac 	bl	8007be8 <_fflush_r>
 8008090:	b9e0      	cbnz	r0, 80080cc <__swbuf_r+0x74>
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	3b01      	subs	r3, #1
 8008096:	60a3      	str	r3, [r4, #8]
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	6022      	str	r2, [r4, #0]
 800809e:	701e      	strb	r6, [r3, #0]
 80080a0:	6962      	ldr	r2, [r4, #20]
 80080a2:	1c43      	adds	r3, r0, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d004      	beq.n	80080b2 <__swbuf_r+0x5a>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	07db      	lsls	r3, r3, #31
 80080ac:	d506      	bpl.n	80080bc <__swbuf_r+0x64>
 80080ae:	2e0a      	cmp	r6, #10
 80080b0:	d104      	bne.n	80080bc <__swbuf_r+0x64>
 80080b2:	4621      	mov	r1, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f7ff fd97 	bl	8007be8 <_fflush_r>
 80080ba:	b938      	cbnz	r0, 80080cc <__swbuf_r+0x74>
 80080bc:	4638      	mov	r0, r7
 80080be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c0:	4621      	mov	r1, r4
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f806 	bl	80080d4 <__swsetup_r>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0d5      	beq.n	8008078 <__swbuf_r+0x20>
 80080cc:	f04f 37ff 	mov.w	r7, #4294967295
 80080d0:	e7f4      	b.n	80080bc <__swbuf_r+0x64>
	...

080080d4 <__swsetup_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4b2a      	ldr	r3, [pc, #168]	; (8008180 <__swsetup_r+0xac>)
 80080d8:	4605      	mov	r5, r0
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	460c      	mov	r4, r1
 80080de:	b118      	cbz	r0, 80080e8 <__swsetup_r+0x14>
 80080e0:	6a03      	ldr	r3, [r0, #32]
 80080e2:	b90b      	cbnz	r3, 80080e8 <__swsetup_r+0x14>
 80080e4:	f7fd ff84 	bl	8005ff0 <__sinit>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ee:	0718      	lsls	r0, r3, #28
 80080f0:	d422      	bmi.n	8008138 <__swsetup_r+0x64>
 80080f2:	06d9      	lsls	r1, r3, #27
 80080f4:	d407      	bmi.n	8008106 <__swsetup_r+0x32>
 80080f6:	2309      	movs	r3, #9
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e034      	b.n	8008170 <__swsetup_r+0x9c>
 8008106:	0758      	lsls	r0, r3, #29
 8008108:	d512      	bpl.n	8008130 <__swsetup_r+0x5c>
 800810a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810c:	b141      	cbz	r1, 8008120 <__swsetup_r+0x4c>
 800810e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008112:	4299      	cmp	r1, r3
 8008114:	d002      	beq.n	800811c <__swsetup_r+0x48>
 8008116:	4628      	mov	r0, r5
 8008118:	f7fe ff0c 	bl	8006f34 <_free_r>
 800811c:	2300      	movs	r3, #0
 800811e:	6363      	str	r3, [r4, #52]	; 0x34
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	2300      	movs	r3, #0
 800812a:	6063      	str	r3, [r4, #4]
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f043 0308 	orr.w	r3, r3, #8
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	b94b      	cbnz	r3, 8008150 <__swsetup_r+0x7c>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d003      	beq.n	8008150 <__swsetup_r+0x7c>
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	f000 f884 	bl	8008258 <__smakebuf_r>
 8008150:	89a0      	ldrh	r0, [r4, #12]
 8008152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008156:	f010 0301 	ands.w	r3, r0, #1
 800815a:	d00a      	beq.n	8008172 <__swsetup_r+0x9e>
 800815c:	2300      	movs	r3, #0
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	6963      	ldr	r3, [r4, #20]
 8008162:	425b      	negs	r3, r3
 8008164:	61a3      	str	r3, [r4, #24]
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	b943      	cbnz	r3, 800817c <__swsetup_r+0xa8>
 800816a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800816e:	d1c4      	bne.n	80080fa <__swsetup_r+0x26>
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	0781      	lsls	r1, r0, #30
 8008174:	bf58      	it	pl
 8008176:	6963      	ldrpl	r3, [r4, #20]
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	e7f4      	b.n	8008166 <__swsetup_r+0x92>
 800817c:	2000      	movs	r0, #0
 800817e:	e7f7      	b.n	8008170 <__swsetup_r+0x9c>
 8008180:	20000068 	.word	0x20000068

08008184 <_raise_r>:
 8008184:	291f      	cmp	r1, #31
 8008186:	b538      	push	{r3, r4, r5, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	460d      	mov	r5, r1
 800818c:	d904      	bls.n	8008198 <_raise_r+0x14>
 800818e:	2316      	movs	r3, #22
 8008190:	6003      	str	r3, [r0, #0]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800819a:	b112      	cbz	r2, 80081a2 <_raise_r+0x1e>
 800819c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081a0:	b94b      	cbnz	r3, 80081b6 <_raise_r+0x32>
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 f830 	bl	8008208 <_getpid_r>
 80081a8:	462a      	mov	r2, r5
 80081aa:	4601      	mov	r1, r0
 80081ac:	4620      	mov	r0, r4
 80081ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081b2:	f000 b817 	b.w	80081e4 <_kill_r>
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d00a      	beq.n	80081d0 <_raise_r+0x4c>
 80081ba:	1c59      	adds	r1, r3, #1
 80081bc:	d103      	bne.n	80081c6 <_raise_r+0x42>
 80081be:	2316      	movs	r3, #22
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	2001      	movs	r0, #1
 80081c4:	e7e7      	b.n	8008196 <_raise_r+0x12>
 80081c6:	2400      	movs	r4, #0
 80081c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081cc:	4628      	mov	r0, r5
 80081ce:	4798      	blx	r3
 80081d0:	2000      	movs	r0, #0
 80081d2:	e7e0      	b.n	8008196 <_raise_r+0x12>

080081d4 <raise>:
 80081d4:	4b02      	ldr	r3, [pc, #8]	; (80081e0 <raise+0xc>)
 80081d6:	4601      	mov	r1, r0
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	f7ff bfd3 	b.w	8008184 <_raise_r>
 80081de:	bf00      	nop
 80081e0:	20000068 	.word	0x20000068

080081e4 <_kill_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d07      	ldr	r5, [pc, #28]	; (8008204 <_kill_r+0x20>)
 80081e8:	2300      	movs	r3, #0
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	f7f9 fb96 	bl	8001922 <_kill>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	d102      	bne.n	8008200 <_kill_r+0x1c>
 80081fa:	682b      	ldr	r3, [r5, #0]
 80081fc:	b103      	cbz	r3, 8008200 <_kill_r+0x1c>
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	bf00      	nop
 8008204:	200043b8 	.word	0x200043b8

08008208 <_getpid_r>:
 8008208:	f7f9 bb83 	b.w	8001912 <_getpid>

0800820c <__swhatbuf_r>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	2900      	cmp	r1, #0
 8008216:	b096      	sub	sp, #88	; 0x58
 8008218:	4615      	mov	r5, r2
 800821a:	461e      	mov	r6, r3
 800821c:	da0d      	bge.n	800823a <__swhatbuf_r+0x2e>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	bf0c      	ite	eq
 800822a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800822e:	2340      	movne	r3, #64	; 0x40
 8008230:	2000      	movs	r0, #0
 8008232:	6031      	str	r1, [r6, #0]
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	b016      	add	sp, #88	; 0x58
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	466a      	mov	r2, sp
 800823c:	f000 f848 	bl	80082d0 <_fstat_r>
 8008240:	2800      	cmp	r0, #0
 8008242:	dbec      	blt.n	800821e <__swhatbuf_r+0x12>
 8008244:	9901      	ldr	r1, [sp, #4]
 8008246:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800824a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800824e:	4259      	negs	r1, r3
 8008250:	4159      	adcs	r1, r3
 8008252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008256:	e7eb      	b.n	8008230 <__swhatbuf_r+0x24>

08008258 <__smakebuf_r>:
 8008258:	898b      	ldrh	r3, [r1, #12]
 800825a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800825c:	079d      	lsls	r5, r3, #30
 800825e:	4606      	mov	r6, r0
 8008260:	460c      	mov	r4, r1
 8008262:	d507      	bpl.n	8008274 <__smakebuf_r+0x1c>
 8008264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	6123      	str	r3, [r4, #16]
 800826c:	2301      	movs	r3, #1
 800826e:	6163      	str	r3, [r4, #20]
 8008270:	b002      	add	sp, #8
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	ab01      	add	r3, sp, #4
 8008276:	466a      	mov	r2, sp
 8008278:	f7ff ffc8 	bl	800820c <__swhatbuf_r>
 800827c:	9900      	ldr	r1, [sp, #0]
 800827e:	4605      	mov	r5, r0
 8008280:	4630      	mov	r0, r6
 8008282:	f7fe fecb 	bl	800701c <_malloc_r>
 8008286:	b948      	cbnz	r0, 800829c <__smakebuf_r+0x44>
 8008288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828c:	059a      	lsls	r2, r3, #22
 800828e:	d4ef      	bmi.n	8008270 <__smakebuf_r+0x18>
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	f043 0302 	orr.w	r3, r3, #2
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	e7e3      	b.n	8008264 <__smakebuf_r+0xc>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	6020      	str	r0, [r4, #0]
 80082a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	9b00      	ldr	r3, [sp, #0]
 80082a8:	6163      	str	r3, [r4, #20]
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	6120      	str	r0, [r4, #16]
 80082ae:	b15b      	cbz	r3, 80082c8 <__smakebuf_r+0x70>
 80082b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 f81d 	bl	80082f4 <_isatty_r>
 80082ba:	b128      	cbz	r0, 80082c8 <__smakebuf_r+0x70>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	431d      	orrs	r5, r3
 80082cc:	81a5      	strh	r5, [r4, #12]
 80082ce:	e7cf      	b.n	8008270 <__smakebuf_r+0x18>

080082d0 <_fstat_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_fstat_r+0x20>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	f7f9 fb7f 	bl	80019e0 <_fstat>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d102      	bne.n	80082ec <_fstat_r+0x1c>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	b103      	cbz	r3, 80082ec <_fstat_r+0x1c>
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	200043b8 	.word	0x200043b8

080082f4 <_isatty_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	; (8008310 <_isatty_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f9 fb7e 	bl	8001a00 <_isatty>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_isatty_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_isatty_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200043b8 	.word	0x200043b8

08008314 <atan2f>:
 8008314:	f000 b800 	b.w	8008318 <__ieee754_atan2f>

08008318 <__ieee754_atan2f>:
 8008318:	ee10 2a90 	vmov	r2, s1
 800831c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008320:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008324:	b510      	push	{r4, lr}
 8008326:	eef0 7a40 	vmov.f32	s15, s0
 800832a:	dc06      	bgt.n	800833a <__ieee754_atan2f+0x22>
 800832c:	ee10 0a10 	vmov	r0, s0
 8008330:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008334:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008338:	dd04      	ble.n	8008344 <__ieee754_atan2f+0x2c>
 800833a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800833e:	eeb0 0a67 	vmov.f32	s0, s15
 8008342:	bd10      	pop	{r4, pc}
 8008344:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008348:	d103      	bne.n	8008352 <__ieee754_atan2f+0x3a>
 800834a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800834e:	f000 b883 	b.w	8008458 <atanf>
 8008352:	1794      	asrs	r4, r2, #30
 8008354:	f004 0402 	and.w	r4, r4, #2
 8008358:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800835c:	b943      	cbnz	r3, 8008370 <__ieee754_atan2f+0x58>
 800835e:	2c02      	cmp	r4, #2
 8008360:	d05e      	beq.n	8008420 <__ieee754_atan2f+0x108>
 8008362:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008434 <__ieee754_atan2f+0x11c>
 8008366:	2c03      	cmp	r4, #3
 8008368:	bf08      	it	eq
 800836a:	eef0 7a47 	vmoveq.f32	s15, s14
 800836e:	e7e6      	b.n	800833e <__ieee754_atan2f+0x26>
 8008370:	b941      	cbnz	r1, 8008384 <__ieee754_atan2f+0x6c>
 8008372:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008438 <__ieee754_atan2f+0x120>
 8008376:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800843c <__ieee754_atan2f+0x124>
 800837a:	2800      	cmp	r0, #0
 800837c:	bfb8      	it	lt
 800837e:	eef0 7a47 	vmovlt.f32	s15, s14
 8008382:	e7dc      	b.n	800833e <__ieee754_atan2f+0x26>
 8008384:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008388:	d110      	bne.n	80083ac <__ieee754_atan2f+0x94>
 800838a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800838e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008392:	d107      	bne.n	80083a4 <__ieee754_atan2f+0x8c>
 8008394:	2c02      	cmp	r4, #2
 8008396:	d846      	bhi.n	8008426 <__ieee754_atan2f+0x10e>
 8008398:	4b29      	ldr	r3, [pc, #164]	; (8008440 <__ieee754_atan2f+0x128>)
 800839a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800839e:	edd3 7a00 	vldr	s15, [r3]
 80083a2:	e7cc      	b.n	800833e <__ieee754_atan2f+0x26>
 80083a4:	2c02      	cmp	r4, #2
 80083a6:	d841      	bhi.n	800842c <__ieee754_atan2f+0x114>
 80083a8:	4b26      	ldr	r3, [pc, #152]	; (8008444 <__ieee754_atan2f+0x12c>)
 80083aa:	e7f6      	b.n	800839a <__ieee754_atan2f+0x82>
 80083ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083b0:	d0df      	beq.n	8008372 <__ieee754_atan2f+0x5a>
 80083b2:	1a5b      	subs	r3, r3, r1
 80083b4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80083b8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80083bc:	da1a      	bge.n	80083f4 <__ieee754_atan2f+0xdc>
 80083be:	2a00      	cmp	r2, #0
 80083c0:	da01      	bge.n	80083c6 <__ieee754_atan2f+0xae>
 80083c2:	313c      	adds	r1, #60	; 0x3c
 80083c4:	db19      	blt.n	80083fa <__ieee754_atan2f+0xe2>
 80083c6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80083ca:	f000 f919 	bl	8008600 <fabsf>
 80083ce:	f000 f843 	bl	8008458 <atanf>
 80083d2:	eef0 7a40 	vmov.f32	s15, s0
 80083d6:	2c01      	cmp	r4, #1
 80083d8:	d012      	beq.n	8008400 <__ieee754_atan2f+0xe8>
 80083da:	2c02      	cmp	r4, #2
 80083dc:	d017      	beq.n	800840e <__ieee754_atan2f+0xf6>
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d0ad      	beq.n	800833e <__ieee754_atan2f+0x26>
 80083e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008448 <__ieee754_atan2f+0x130>
 80083e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800844c <__ieee754_atan2f+0x134>
 80083ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083f2:	e7a4      	b.n	800833e <__ieee754_atan2f+0x26>
 80083f4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008438 <__ieee754_atan2f+0x120>
 80083f8:	e7ed      	b.n	80083d6 <__ieee754_atan2f+0xbe>
 80083fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008450 <__ieee754_atan2f+0x138>
 80083fe:	e7ea      	b.n	80083d6 <__ieee754_atan2f+0xbe>
 8008400:	ee17 3a90 	vmov	r3, s15
 8008404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	e797      	b.n	800833e <__ieee754_atan2f+0x26>
 800840e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008448 <__ieee754_atan2f+0x130>
 8008412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008416:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800844c <__ieee754_atan2f+0x134>
 800841a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800841e:	e78e      	b.n	800833e <__ieee754_atan2f+0x26>
 8008420:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800844c <__ieee754_atan2f+0x134>
 8008424:	e78b      	b.n	800833e <__ieee754_atan2f+0x26>
 8008426:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008454 <__ieee754_atan2f+0x13c>
 800842a:	e788      	b.n	800833e <__ieee754_atan2f+0x26>
 800842c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008450 <__ieee754_atan2f+0x138>
 8008430:	e785      	b.n	800833e <__ieee754_atan2f+0x26>
 8008432:	bf00      	nop
 8008434:	c0490fdb 	.word	0xc0490fdb
 8008438:	3fc90fdb 	.word	0x3fc90fdb
 800843c:	bfc90fdb 	.word	0xbfc90fdb
 8008440:	080089f4 	.word	0x080089f4
 8008444:	08008a00 	.word	0x08008a00
 8008448:	33bbbd2e 	.word	0x33bbbd2e
 800844c:	40490fdb 	.word	0x40490fdb
 8008450:	00000000 	.word	0x00000000
 8008454:	3f490fdb 	.word	0x3f490fdb

08008458 <atanf>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	ee10 5a10 	vmov	r5, s0
 800845e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008462:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008466:	eef0 7a40 	vmov.f32	s15, s0
 800846a:	db10      	blt.n	800848e <atanf+0x36>
 800846c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008470:	dd04      	ble.n	800847c <atanf+0x24>
 8008472:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008476:	eeb0 0a67 	vmov.f32	s0, s15
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80085b4 <atanf+0x15c>
 8008480:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80085b8 <atanf+0x160>
 8008484:	2d00      	cmp	r5, #0
 8008486:	bfd8      	it	le
 8008488:	eef0 7a47 	vmovle.f32	s15, s14
 800848c:	e7f3      	b.n	8008476 <atanf+0x1e>
 800848e:	4b4b      	ldr	r3, [pc, #300]	; (80085bc <atanf+0x164>)
 8008490:	429c      	cmp	r4, r3
 8008492:	dc10      	bgt.n	80084b6 <atanf+0x5e>
 8008494:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008498:	da0a      	bge.n	80084b0 <atanf+0x58>
 800849a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80085c0 <atanf+0x168>
 800849e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80084a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80084aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ae:	dce2      	bgt.n	8008476 <atanf+0x1e>
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	e013      	b.n	80084de <atanf+0x86>
 80084b6:	f000 f8a3 	bl	8008600 <fabsf>
 80084ba:	4b42      	ldr	r3, [pc, #264]	; (80085c4 <atanf+0x16c>)
 80084bc:	429c      	cmp	r4, r3
 80084be:	dc4f      	bgt.n	8008560 <atanf+0x108>
 80084c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80084c4:	429c      	cmp	r4, r3
 80084c6:	dc41      	bgt.n	800854c <atanf+0xf4>
 80084c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80084cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80084d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80084d4:	2300      	movs	r3, #0
 80084d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80084e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80085c8 <atanf+0x170>
 80084e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80085cc <atanf+0x174>
 80084ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80085d0 <atanf+0x178>
 80084f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80084f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80084f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80085d4 <atanf+0x17c>
 80084fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008500:	eddf 5a35 	vldr	s11, [pc, #212]	; 80085d8 <atanf+0x180>
 8008504:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008508:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80085dc <atanf+0x184>
 800850c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008510:	eddf 5a33 	vldr	s11, [pc, #204]	; 80085e0 <atanf+0x188>
 8008514:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008518:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80085e4 <atanf+0x18c>
 800851c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008520:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80085e8 <atanf+0x190>
 8008524:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008528:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80085ec <atanf+0x194>
 800852c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008530:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80085f0 <atanf+0x198>
 8008534:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008538:	ee27 7a26 	vmul.f32	s14, s14, s13
 800853c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008540:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008544:	d121      	bne.n	800858a <atanf+0x132>
 8008546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800854a:	e794      	b.n	8008476 <atanf+0x1e>
 800854c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008550:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008554:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008558:	2301      	movs	r3, #1
 800855a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800855e:	e7be      	b.n	80084de <atanf+0x86>
 8008560:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <atanf+0x19c>)
 8008562:	429c      	cmp	r4, r3
 8008564:	dc0b      	bgt.n	800857e <atanf+0x126>
 8008566:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800856a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800856e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008572:	2302      	movs	r3, #2
 8008574:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800857c:	e7af      	b.n	80084de <atanf+0x86>
 800857e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008582:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008586:	2303      	movs	r3, #3
 8008588:	e7a9      	b.n	80084de <atanf+0x86>
 800858a:	4a1b      	ldr	r2, [pc, #108]	; (80085f8 <atanf+0x1a0>)
 800858c:	491b      	ldr	r1, [pc, #108]	; (80085fc <atanf+0x1a4>)
 800858e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008592:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008596:	edd3 6a00 	vldr	s13, [r3]
 800859a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800859e:	2d00      	cmp	r5, #0
 80085a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085a4:	edd2 7a00 	vldr	s15, [r2]
 80085a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085ac:	bfb8      	it	lt
 80085ae:	eef1 7a67 	vneglt.f32	s15, s15
 80085b2:	e760      	b.n	8008476 <atanf+0x1e>
 80085b4:	3fc90fdb 	.word	0x3fc90fdb
 80085b8:	bfc90fdb 	.word	0xbfc90fdb
 80085bc:	3edfffff 	.word	0x3edfffff
 80085c0:	7149f2ca 	.word	0x7149f2ca
 80085c4:	3f97ffff 	.word	0x3f97ffff
 80085c8:	3c8569d7 	.word	0x3c8569d7
 80085cc:	3d4bda59 	.word	0x3d4bda59
 80085d0:	bd6ef16b 	.word	0xbd6ef16b
 80085d4:	3d886b35 	.word	0x3d886b35
 80085d8:	3dba2e6e 	.word	0x3dba2e6e
 80085dc:	3e124925 	.word	0x3e124925
 80085e0:	3eaaaaab 	.word	0x3eaaaaab
 80085e4:	bd15a221 	.word	0xbd15a221
 80085e8:	bd9d8795 	.word	0xbd9d8795
 80085ec:	bde38e38 	.word	0xbde38e38
 80085f0:	be4ccccd 	.word	0xbe4ccccd
 80085f4:	401bffff 	.word	0x401bffff
 80085f8:	08008a0c 	.word	0x08008a0c
 80085fc:	08008a1c 	.word	0x08008a1c

08008600 <fabsf>:
 8008600:	ee10 3a10 	vmov	r3, s0
 8008604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008608:	ee00 3a10 	vmov	s0, r3
 800860c:	4770      	bx	lr
	...

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
